{"version":3,"file":"static/js/438.64f27374.chunk.js","mappings":"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","sources":["common/utils/lazyLoadUtils.js","components/organisms/home/desktop/desktop-header/utils/utils.js","components/organisms/home/mobile/mobile-header/mobile-header.jsx","components/organisms/tools/select/select.js","components/organisms/tools/wordLengthSearch/wordLengthSearch.js"],"sourcesContent":["import { STATIC_OPTIONS } from '../../components/organisms/home/home-page/homePageRedux/initialState'\r\n\r\nexport const addOptionsDataIntoRedux = ({ newOptions, oldOptions, oldOriginalOptions, setOptions, setOriginalOptions }) => {\r\n    let resultantOptions\r\n    resultantOptions = [...oldOptions, ...newOptions]\r\n    setOptions(resultantOptions)\r\n    setOriginalOptions([...STATIC_OPTIONS, ...newOptions])\r\n}\r\n","import { getPhilosopherQuotes, lazyLoadAsset } from '../../../../../../common/static/utils/utils'\r\nimport { retryTenTimes } from '../../../../../../common/utils/apiUtils'\r\nimport { addOptionsDataIntoRedux } from '../../../../../../common/utils/lazyLoadUtils'\r\nimport { scrollToMemorizedRow } from '../../../../../../common/utils/utils'\r\nimport { changeQuotesData } from '../../../quotes-list/utils/utils'\r\n\r\nexport function onPhilosopherSelectChange({ philosopher, listRef, setIsFetching, setStart, setEnd, setSearchText, setCurrentPhilosopher, currentData, setCurrentData, options, setOptions, setQuotesLoaded, markedMode, markedQuotes, setMarkedQuotes }) {\r\n    function callback() {\r\n        setCurrentPhilosopher(philosopher)\r\n        changeQuotesData({ philosopher, currentData, setCurrentData, options }, { markedMode, markedQuotes, setMarkedQuotes })\r\n        scrollToMemorizedRow(listRef, currentData, philosopher)\r\n        setIsFetching(false)\r\n    }\r\n    setStart(1)\r\n    setEnd('')\r\n    setSearchText('')\r\n    setIsFetching(true)\r\n\r\n    if (!getPhilosopherQuotes({ philosopher, options })) {\r\n        lazyLoadAsset(philosopher, { options, setOptions }, setQuotesLoaded, []).then(callback)\r\n    } else {\r\n        callback()\r\n    }\r\n}\r\n\r\nexport const onFocusHandler = async ({ options, setOptions, isFetchingOptions, setIsFetchingOptions, originalOptions, setOriginalOptions }) => {\r\n    if (options.length === 1) {\r\n        setIsFetchingOptions(true)\r\n        let response = await retryTenTimes(() => fetch('https://cdn.jsdelivr.net/gh/speed1992/quotes/src/common/static/philosophers-data.json'))\r\n        response = await response.json()\r\n        addOptionsDataIntoRedux({ newOptions: response, oldOptions: options, oldOriginalOptions: originalOptions, setOptions, setOriginalOptions })\r\n        setIsFetchingOptions(false)\r\n    }\r\n}\r\n","import React, { Suspense, useState } from 'react'\r\nimport { retryTenTimes } from '../../../../../common/utils/apiUtils'\r\nimport Select from '../../../tools/select/select'\r\nimport { WordLengthSearch } from '../../../tools/wordLengthSearch/wordLengthSearch'\r\nimport { onFocusHandler, onPhilosopherSelectChange } from '../../desktop/desktop-header/utils/utils'\r\nconst MobileMenu = React.lazy(() => retryTenTimes(() => import('../mobile-menu/mobile-menu')))\r\nconst Breadcrumb = React.lazy(() => retryTenTimes(() => import('../../../analysis/breadcrumb/breadcrumb')))\r\nconst UnreadCounter = React.lazy(() => retryTenTimes(() => import('../../../analysis/unread-counter/unread-counter')))\r\nconst QuotesFound = React.lazy(() => retryTenTimes(() => import('../../../analysis/quotes-found/quotes-found')))\r\n\r\nfunction MobileHeader({ listRef, setSearchText, searchText, start, end, setStart, setEnd, isFetching, setIsFetching, markedMode, setMarkedMode, markedQuotes, currentData, setCurrentData, currentPhilosopher, originalData, setCurrentPhilosopher, options, setOptions, setQuotesLoaded, darkMode, setDarkMode, setSorting, sorting, isFetchingOptions, setIsFetchingOptions, originalOptions, setOriginalOptions, userName, setUserName }) {\r\n    const propsToSend = { start, end, setStart, setEnd, setSearchText, setCurrentData }\r\n    const [visible, toggleVisible] = useState(false)\r\n\r\n    return (\r\n        <div className=\"header\">\r\n            <div className=\"mobile-column\">\r\n                {visible && (\r\n                    <Suspense fallback={''}>\r\n                        <MobileMenu markedMode={markedMode} setMarkedMode={setMarkedMode} visible={visible} options={options} setOptions={setOptions} toggleVisible={toggleVisible} darkMode={darkMode} setDarkMode={setDarkMode} setSorting={setSorting} sorting={sorting} userName={userName} setUserName={setUserName} />\r\n                    </Suspense>\r\n                )}\r\n                <div style={{ paddingLeft: '0.5rem', paddingRight: '0.5rem' }} onClick={() => toggleVisible(!visible)}>\r\n                    â˜°\r\n                </div>\r\n            </div>\r\n            <div className=\"mobile-column\">\r\n                <WordLengthSearch isMobile={true} listRef={listRef} {...propsToSend} />\r\n            </div>\r\n            <div className=\"mobile-column\">\r\n                <input className=\"wordSearch\" type=\"text\" placeholder=\"Search word\" value={searchText} onChange={({ target: { value } }) => setSearchText(value)} />\r\n            </div>\r\n            <div className=\"mobile-column\">\r\n                <Select isMobile={true} isFetchingOptions={isFetchingOptions} options={options} currentPhilosopher={currentPhilosopher} onFocusHandlerCallback={() => onFocusHandler({ options, setOptions, isFetchingOptions, setIsFetchingOptions, originalOptions, setOriginalOptions })} onChangeHandler={({ target: { value: philosopher } }) => onPhilosopherSelectChange({ philosopher, listRef, setIsFetching, setStart, setEnd, setSearchText, setCurrentPhilosopher, setCurrentData, options, setOptions, setQuotesLoaded })} />\r\n            </div>\r\n            <Suspense fallback={''}>\r\n                <Breadcrumb>\r\n                    <QuotesFound markedMode={markedMode} found={currentData.length} />\r\n                    {markedMode && <UnreadCounter isFetching={isFetching} currentData={currentData} originalData={originalData} markedQuotes={markedQuotes} currentPhilosopher={currentPhilosopher} isFetchingOptions={isFetchingOptions} />}\r\n                </Breadcrumb>\r\n            </Suspense>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MobileHeader\r\n","import React, { Suspense } from 'react'\r\nimport { getCurrentPhilosopherFullname } from '../../../../common/static/utils/utils'\r\nimport { retryTenTimes } from '../../../../common/utils/apiUtils'\r\nimport './select.css'\r\nconst DesktopSelect = React.lazy(() => retryTenTimes(() => import('../../home/desktop/desktop-select/desktop-select')))\r\nconst MobileSelect = React.lazy(() => retryTenTimes(() => import('../../home/mobile/mobile-select/mobile-select')))\r\n\r\nconst Select = ({ options, currentPhilosopher, onChangeHandler, onFocusHandlerCallback, isMobile, isFetchingOptions }) => {\r\n    const renderSelect = () => {\r\n        if (isMobile) {\r\n            return (\r\n                <Suspense fallback={''}>\r\n                    <MobileSelect onFocusHandlerCallback={onFocusHandlerCallback} onChangeHandler={onChangeHandler} currentPhilosopher={currentPhilosopher} value={getCurrentPhilosopherFullname(currentPhilosopher, options)} placeholder={'Search philosopher'} options={options} isFetchingOptions={isFetchingOptions} />\r\n                </Suspense>\r\n            )\r\n        } else {\r\n            return (\r\n                <Suspense fallback={''}>\r\n                    <DesktopSelect onFocusHandler={onFocusHandlerCallback} onChangeHandler={onChangeHandler} options={options} currentPhilosopher={currentPhilosopher} isFetchingOptions={isFetchingOptions} />\r\n                </Suspense>\r\n            )\r\n        }\r\n    }\r\n\r\n    return renderSelect()\r\n}\r\n\r\nexport default Select\r\n","import React from 'react'\r\nimport { retryTenTimes } from '../../../../common/utils/apiUtils'\r\nimport './wordLengthSearch.css'\r\nconst DesktopWordLengthSearch = React.lazy(() => retryTenTimes(() => import('../../home/desktop/desktop-word-length-search/desktop-word-length-search')))\r\n\r\nexport function WordLengthSearch({ start, end, setStart, setEnd, setSearchText, isMobile }) {\r\n    const renderComponent = () => {\r\n        if (isMobile) {\r\n            return (\r\n                <>\r\n                    <input className=\"smallInput\" name=\"start\" type=\"number\" min=\"1\" value={start} onChange={({ target: { value } }) => setStart(value)} />\r\n                    <input className=\"smallInput\" name=\"end\" type=\"number\" min=\"0\" value={end} onChange={({ target: { value } }) => setEnd(value)} />\r\n                </>\r\n            )\r\n        } else {\r\n            return <DesktopWordLengthSearch start={start} setStart={setStart} end={end} setEnd={setEnd} />\r\n        }\r\n    }\r\n    return renderComponent()\r\n}\r\n"],"names":["addOptionsDataIntoRedux","newOptions","oldOptions","setOptions","oldOriginalOptions","setOriginalOptions","STATIC_OPTIONS","onPhilosopherSelectChange","philosopher","listRef","setIsFetching","setStart","setEnd","setSearchText","setCurrentPhilosopher","currentData","setCurrentData","options","setQuotesLoaded","markedMode","markedQuotes","setMarkedQuotes","callback","changeQuotesData","scrollToMemorizedRow","getPhilosopherQuotes","lazyLoadAsset","then","onFocusHandler","isFetchingOptions","setIsFetchingOptions","originalOptions","length","retryTenTimes","fetch","response","json","MobileMenu","React","Breadcrumb","UnreadCounter","QuotesFound","searchText","start","end","isFetching","setMarkedMode","currentPhilosopher","originalData","darkMode","setDarkMode","setSorting","sorting","userName","setUserName","propsToSend","useState","visible","toggleVisible","className","Suspense","fallback","style","paddingLeft","paddingRight","onClick","isMobile","type","placeholder","value","onChange","target","onFocusHandlerCallback","onChangeHandler","found","DesktopSelect","MobileSelect","getCurrentPhilosopherFullname","DesktopWordLengthSearch","WordLengthSearch","name","min"],"sourceRoot":""}