{"version":3,"file":"static/js/728.3b890da2.chunk.js","mappings":"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","sources":["common/utils/commonUtils.js","common/utils/localStorageUtils.js","common/utils/staticDataUtils.js","common/utils/utils.js","common/web-workers/worker.js","components/organisms/analysis/table/TableBody.js","components/organisms/analysis/table/TableHead.js","components/organisms/analysis/table/useSortableTable.js","components/organisms/analysis/table/table.jsx","components/organisms/analysis/report/report.js","components/organisms/analysis/report/utils/utils.js","common/utils/lazyLoadUtils.js","common/utils/objectUtils.js","components/organisms/home/desktop/desktop-header/utils/utils.js","components/organisms/home/home-page/constants/constants.js","components/organisms/home/home-page/utils/utils.js","components/organisms/home/quotes-list/utils/utils.js"],"sourcesContent":["export const isUndefined = (value) => typeof value === 'undefined'\r\nexport const isObjEmpty = (obj) => Object.values(obj).length === 0 && obj.constructor === Object\r\n\r\nexport function uuidv4() {\r\n    return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, (c) => (c ^ (crypto.getRandomValues(new Uint8Array(1))[0] & (15 >> (c / 4)))).toString(16))\r\n}\r\n","import { useEffect, useState } from 'react'\r\n\r\nexport function getStorageValue(key, defaultValue) {\r\n    const saved = localStorage.getItem(key)\r\n    const initial = JSON.parse(saved)\r\n    if (initial === undefined || initial === 'undefined' || initial === 'null' || initial === null) {\r\n        return defaultValue\r\n    } else return initial\r\n}\r\n\r\nexport function setStorageValue(key, value) {\r\n    localStorage.setItem(key, JSON.stringify(value))\r\n}\r\n\r\nexport const useLocalStorage = (key, defaultValue) => {\r\n    const [value, setValue] = useState(() => {\r\n        return getStorageValue(key, defaultValue)\r\n    })\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem(key, JSON.stringify(value))\r\n    }, [key, value])\r\n\r\n    return [value, setValue]\r\n}\r\n","import { getStorageValue } from './localStorageUtils'\r\n\r\nexport const removeReadData = ({ index, currentPhilosopher, markedMode, markedQuotes = {}, setMarkedQuotes, currentData, setCurrentData }) => {\r\n    let newMarkedQuotes = JSON.parse(JSON.stringify(markedQuotes))\r\n    let readQuotesArray = []\r\n\r\n    const READ_ARRAY_LOCALSTORAGE_KEY = `${currentPhilosopher}-MARKED_AS_READ`\r\n    readQuotesArray = getStorageValue(READ_ARRAY_LOCALSTORAGE_KEY, [])\r\n\r\n    if (markedQuotes && markedQuotes[currentPhilosopher] !== undefined) {\r\n        readQuotesArray = [...readQuotesArray, ...markedQuotes[currentPhilosopher]]\r\n    }\r\n\r\n    readQuotesArray = [...new Set(readQuotesArray)]\r\n\r\n    if (index) {\r\n        readQuotesArray.push(index)\r\n    }\r\n\r\n    newMarkedQuotes[currentPhilosopher] = readQuotesArray\r\n    setMarkedQuotes(newMarkedQuotes)\r\n\r\n    const newData = currentData.filter(({ id }, _) => readQuotesArray.indexOf(id) === -1)\r\n    setCurrentData(JSON.parse(JSON.stringify(newData)))\r\n}\r\n","import { worker } from '../web-workers/worker'\r\n\r\nexport const scrollToFirstRow = (listRef) => {\r\n    if (listRef.current) {\r\n        listRef.current.scrollToRow(0)\r\n    }\r\n}\r\n\r\nexport const scrollToMemorizedRow = (listRef, scrollPosition, currentData) => {\r\n    if (currentData.length > 0 && listRef.current) {\r\n        if (scrollPosition !== undefined && scrollPosition !== 'undefined' && scrollPosition && scrollPosition > 0) {\r\n            listRef.current.scrollToRow(scrollPosition)\r\n        } else {\r\n            scrollToFirstRow(listRef)\r\n        }\r\n    }\r\n}\r\n\r\nexport const search = ({ searchText, currentData, setCurrentData }) => {\r\n    return new Promise((resolve) => {\r\n        if (currentData !== undefined) {\r\n            worker.postMessage({ currentData, searchText, filterName: 'searchTermFilter' })\r\n            worker.onmessage = (event) => {\r\n                const filteredQuotesFromWorker = JSON.parse(eval(`(${JSON.stringify(event.data)})`))\r\n                resolve(filteredQuotesFromWorker)\r\n            }\r\n        }\r\n    })\r\n}\r\n\r\nexport const isMobile = () => window.innerWidth <= 600\r\n\r\nexport const isDesktop = () => window.innerWidth >= 600\r\n","export let worker\r\nif (window.Worker) {\r\n    worker = new Worker(new URL('./filter-worker.js', import.meta.url))\r\n} else {\r\n    alert(\"Your browser doesn't support web workers.\")\r\n}\r\n","const TableBody = ({ tableData, columns }) => {\r\n    return (\r\n        <tbody>\r\n            {tableData.map((data) => {\r\n                return (\r\n                    <tr key={data.id}>\r\n                        {columns.map(({ accessor }) => {\r\n                            const tData = data[accessor] ? data[accessor] : '——'\r\n                            return <td key={accessor}>{tData}</td>\r\n                        })}\r\n                    </tr>\r\n                )\r\n            })}\r\n        </tbody>\r\n    )\r\n}\r\n\r\nexport default TableBody\r\n","import { useState } from 'react'\r\n\r\nconst TableHead = ({ columns, handleSorting }) => {\r\n    const [sortField, setSortField] = useState('')\r\n    const [order, setOrder] = useState('asc')\r\n\r\n    const handleSortingChange = (accessor) => {\r\n        const sortOrder = accessor === sortField && order === 'asc' ? 'desc' : 'asc'\r\n        setSortField(accessor)\r\n        setOrder(sortOrder)\r\n        handleSorting(accessor, sortOrder)\r\n    }\r\n\r\n    return (\r\n        <thead>\r\n            <tr>\r\n                {columns.map(({ label, accessor, sortable }) => {\r\n                    const cl = sortable ? (sortField === accessor && order === 'asc' ? 'up' : sortField === accessor && order === 'desc' ? 'down' : 'default') : ''\r\n                    return (\r\n                        <th key={accessor} onClick={sortable ? () => handleSortingChange(accessor) : null} className={cl}>\r\n                            {label}\r\n                        </th>\r\n                    )\r\n                })}\r\n            </tr>\r\n        </thead>\r\n    )\r\n}\r\n\r\nexport default TableHead\r\n","import { useEffect, useState } from 'react'\r\n\r\nfunction getDefaultSorting(defaultTableData, columns) {\r\n    const sorted = [...defaultTableData].sort((a, b) => {\r\n        const filterColumn = columns.filter((column) => column.sortbyOrder)\r\n\r\n        let { accessor = 'id', sortbyOrder = 'asc' } = Object.assign({}, ...filterColumn)\r\n\r\n        if (a[accessor] === null) return 1\r\n        if (b[accessor] === null) return -1\r\n        if (a[accessor] === null && b[accessor] === null) return 0\r\n\r\n        const ascending = a[accessor].toString().localeCompare(b[accessor].toString(), 'en', {\r\n            numeric: true,\r\n        })\r\n\r\n        return sortbyOrder === 'asc' ? ascending : -ascending\r\n    })\r\n    return sorted\r\n}\r\n\r\nexport const useSortableTable = (data, columns) => {\r\n    const [tableData, setTableData] = useState([])\r\n\r\n    useEffect(() => {\r\n        setTableData(getDefaultSorting(data, columns))\r\n    }, [data])\r\n\r\n    const handleSorting = (sortField, sortOrder) => {\r\n        if (sortField) {\r\n            const sorted = [...tableData].sort((a, b) => {\r\n                if (a[sortField] === null) return 1\r\n                if (b[sortField] === null) return -1\r\n                if (a[sortField] === null && b[sortField] === null) return 0\r\n                return (\r\n                    a[sortField].toString().localeCompare(b[sortField].toString(), 'en', {\r\n                        numeric: true,\r\n                    }) * (sortOrder === 'asc' ? 1 : -1)\r\n                )\r\n            })\r\n            setTableData(sorted)\r\n        }\r\n    }\r\n\r\n    return [tableData, handleSorting]\r\n}\r\n","import './table.css'\r\nimport TableBody from './TableBody'\r\nimport TableHead from './TableHead'\r\nimport { useSortableTable } from './useSortableTable'\r\n\r\nconst Table = ({ caption, data, columns }) => {\r\n    const [tableData, handleSorting] = useSortableTable(data, columns)\r\n\r\n    return (\r\n        <>\r\n            <table className=\"table\">\r\n                {caption && <caption>{caption}</caption>}\r\n                <TableHead {...{ columns, handleSorting }} />\r\n                <TableBody {...{ columns, tableData }} />\r\n            </table>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Table\r\n","import { useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { onFocusHandler as getPhilosopherJSON } from '../../home/desktop/desktop-header/utils/utils'\r\nimport { setOptionsRedux, setOriginalOptionsRedux } from '../../home/home-page/homePageRedux/homePageRedux'\r\nimport { setThemeClassNameOnHTMLTag } from '../../home/home-page/utils/utils'\r\nimport Table from '../table/table'\r\nimport columns from './columns.json'\r\nimport { createData } from './utils/utils'\r\n\r\nconst Report = () => {\r\n    const [data, setData] = useState([])\r\n    const dispatch = useDispatch()\r\n    const markedQuotes = useSelector((state) => state.philosophersData.markedQuotes)\r\n    const options = useSelector((state) => state.philosophersData.options)\r\n    const darkMode = useSelector((state) => state.philosophersData.darkMode)\r\n    const originalOptions = useSelector((state) => state?.philosophersData?.originalOptions)\r\n    const setOriginalOptions = (value) => dispatch(setOriginalOptionsRedux(value))\r\n    const setOptions = (value) => dispatch(setOptionsRedux(value))\r\n    const sorting = useSelector((state) => state.philosophersData.sorting)\r\n\r\n    useEffect(() => {\r\n        getPhilosopherJSON({ options, setOptions, originalOptions, setOriginalOptions, sorting })\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        createData({ markedQuotes, options, setData })\r\n    }, [options.length])\r\n\r\n    useEffect(() => {\r\n        setThemeClassNameOnHTMLTag(darkMode)\r\n    }, [darkMode])\r\n\r\n    return data.length > 0 ? (\r\n        <Table data={data} columns={columns} />\r\n    ) : (\r\n        <>\r\n            <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', height: '100vh', fontSize: '2rem', margin: '3rem' }}>No records found!</div>\r\n            <div style={{ fontSize: '2rem', margin: '3rem' }}>Please use, marked mode feature, mark quotes as read and come back.</div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Report\r\n","import { getPhilosopherObjectIndex } from '../../../../../common/static/utils/utils'\r\nimport { isUndefined, uuidv4 } from '../../../../../common/utils/commonUtils'\r\nimport { getPhilosopherFullName } from '../../../home/quotes-list/utils/utils'\r\n\r\nexport const createData = ({ markedQuotes, options, setData }) => {\r\n    const data = []\r\n    let sum = 0\r\n    for (const key in markedQuotes) {\r\n        if (markedQuotes.hasOwnProperty(key) && getPhilosopherObjectIndex(key, options) !== -1) {\r\n            let readCount = 0\r\n            if (!isUndefined(markedQuotes[key])) {\r\n                readCount = markedQuotes[key].length\r\n                sum += readCount\r\n            }\r\n            const obj = { philosopher: getPhilosopherFullName({ currentPhilosopher: key, options }), readCount: readCount, id: uuidv4() }\r\n            data.push(obj)\r\n        }\r\n    }\r\n    const obj = { philosopher: 'Total Read', readCount: sum, id: uuidv4() }\r\n    data.push(obj)\r\n    setData(data)\r\n}\r\n","import { ALPHABETICAL, LATEST } from '../../components/organisms/home/home-page/constants/constants'\r\nimport { STATIC_OPTIONS } from '../../components/organisms/home/home-page/homePageRedux/initialState'\r\nimport { bringIntoAlphabeticalOrder, bringIntoOriginalOrder } from '../../components/organisms/home/home-page/utils/utils'\r\nimport { merge } from './objectUtils'\r\n\r\nexport const addOptionsDataIntoRedux = ({ newOptions, oldOptions, oldOriginalOptions, setOptions, setOriginalOptions }) => {\r\n    console.log('newOptions', newOptions, 'oldOptions', oldOptions)\r\n    let resultantOptions\r\n    resultantOptions = [...oldOptions, ...newOptions]\r\n    setOptions(resultantOptions)\r\n    setOriginalOptions([...STATIC_OPTIONS, ...newOptions])\r\n}\r\n\r\nexport const addResponseOptionsDataIntoRedux = ({ newOptions, oldOptions, oldOriginalOptions, setOptions, setOriginalOptions, sorting }) => {\r\n    const originalOptions = [...STATIC_OPTIONS, ...newOptions]\r\n    let resultantOptions = merge(oldOptions, [...originalOptions])\r\n    if (sorting === LATEST) {\r\n        resultantOptions = bringIntoOriginalOrder(originalOptions, resultantOptions)\r\n    } else if (sorting === ALPHABETICAL) {\r\n        resultantOptions = bringIntoAlphabeticalOrder(resultantOptions)\r\n    }\r\n    setOptions([...resultantOptions])\r\n    setOriginalOptions(originalOptions)\r\n}\r\n","import { getPhilosopherObjectIndex } from '../static/utils/utils'\r\n\r\nexport const merge = (oldOptions, newOptions) => {\r\n    let newOptionsCopy = JSON.parse(JSON.stringify(newOptions))\r\n    newOptionsCopy.forEach((element, newOptionindex) => {\r\n        const oldOptionIndex = getPhilosopherObjectIndex(element.value, oldOptions)\r\n        if (oldOptionIndex !== -1) {\r\n            newOptionsCopy[newOptionindex].quotes = oldOptions[oldOptionIndex].quotes\r\n        }\r\n    })\r\n    return newOptionsCopy\r\n}\r\n","import { API_ENDPOINTS } from '../../../../../../common/apis/apiEndpoints'\r\nimport { getPhilosopherQuotes, lazyLoadAsset } from '../../../../../../common/static/utils/utils'\r\nimport { retryTenTimes } from '../../../../../../common/utils/apiUtils'\r\nimport { addResponseOptionsDataIntoRedux } from '../../../../../../common/utils/lazyLoadUtils'\r\nimport { scrollToMemorizedRow } from '../../../../../../common/utils/utils'\r\nimport { changeQuotesData } from '../../../quotes-list/utils/utils'\r\n\r\nexport function onPhilosopherSelectChange({ philosopher, listRef, setIsFetching, setStart, setEnd, setSearchText, setCurrentPhilosopher, currentData, setCurrentData, options, setOptions, setQuotesLoaded, markedMode, markedQuotes, setMarkedQuotes }) {\r\n    function callback() {\r\n        setCurrentPhilosopher(philosopher)\r\n        changeQuotesData({ philosopher, currentData, setCurrentData, options }, { markedMode, markedQuotes, setMarkedQuotes })\r\n        scrollToMemorizedRow(listRef, currentData, philosopher)\r\n        setIsFetching(false)\r\n    }\r\n    setStart(1)\r\n    setEnd('')\r\n    setSearchText('')\r\n    setIsFetching(true)\r\n\r\n    if (!getPhilosopherQuotes({ philosopher, options })) {\r\n        lazyLoadAsset(philosopher, { options, setOptions }, setQuotesLoaded, []).then(callback)\r\n    } else {\r\n        callback()\r\n    }\r\n}\r\n\r\nexport const onFocusHandler = async ({ options, setOptions, isFetchingOptions, setIsFetchingOptions, originalOptions, setOriginalOptions, sorting }) => {\r\n    setIsFetchingOptions && setIsFetchingOptions(true)\r\n    let response = await retryTenTimes(() => fetch(API_ENDPOINTS.STATIC_DATA.STATIC_ASSET_GRAPH))\r\n    response = await response.json()\r\n    addResponseOptionsDataIntoRedux({ newOptions: response, oldOptions: options, oldOriginalOptions: originalOptions, setOptions, setOriginalOptions, sorting })\r\n    setIsFetchingOptions && setIsFetchingOptions(false)\r\n}\r\n","export const LATEST = 'latest'\r\nexport const ALPHABETICAL = 'alphabetical'\r\n","import { getPhilosopherData } from '../../../../../common/static/utils/utils'\r\n\r\nexport const setThemeClassNameOnHTMLTag = (value) => {\r\n    var root = document.getElementsByTagName('html')[0]\r\n    root.className = ''\r\n    if (value) {\r\n        root.classList.add('darkTheme')\r\n    } else {\r\n        root.classList.add('lightTheme')\r\n    }\r\n}\r\n\r\nexport const bringIntoOriginalOrder = (originalOptions, newOptions) => originalOptions.map((item) => getPhilosopherData({ philosopher: item.value, options: newOptions })).reverse()\r\n\r\nexport const bringIntoAlphabeticalOrder = (options) => [...options].sort((a, b) => a.fullName.localeCompare(b.fullName))\r\n","import { isObjEmpty } from '../../../../../common/utils/commonUtils'\r\nimport { removeReadData } from '../../../../../common/utils/staticDataUtils'\r\nimport { worker } from '../../../../../common/web-workers/worker'\r\n\r\nexport const changeQuotesData = ({ currentPhilosopher, currentData, setCurrentData, options }, { markedMode = null, markedQuotes, setMarkedQuotes }) => {\r\n    if (currentData) setCurrentData(currentData)\r\n    if (markedMode !== undefined && markedMode) removeReadData({ currentPhilosopher, markedMode, markedQuotes, setMarkedQuotes, currentData, setCurrentData })\r\n}\r\n\r\nexport const getPhilosopherFullName = ({ currentPhilosopher, options }) => {\r\n    const currentIndex = options.filter(({ value }) => currentPhilosopher === value)\r\n    if (!isObjEmpty(currentIndex)) return currentIndex && currentIndex[0].fullName\r\n}\r\n\r\nexport const getPhilosopherFullName_i10n = ({ currentPhilosopher, options }) => {\r\n    const currentIndex = options.filter(({ value }) => currentPhilosopher === value)\r\n    if (!isObjEmpty(currentIndex)) return currentIndex && currentIndex[0].fullNameInOtherLanguages\r\n}\r\n\r\nexport const searchByWordLength = async (start, end, quotes, { markedMode, markedQuotes, setMarkedQuotes }, { setCurrentData, currentPhilosopher }) => {\r\n    return new Promise((resolve) => {\r\n        if (quotes !== undefined) {\r\n            if (typeof start === 'string' && start.trim() === '') start = 0\r\n            worker.postMessage({ quotes, end, start, filterName: 'wordCountFilter' })\r\n            worker.onmessage = (event) => {\r\n                const newData = JSON.parse(eval(`(${JSON.stringify(event.data)})`))\r\n                changeQuotesData({ currentData: newData, setCurrentData, currentPhilosopher }, { markedMode, markedQuotes, setMarkedQuotes })\r\n                resolve()\r\n            }\r\n        }\r\n    })\r\n}\r\n\r\nexport function getWordCount(str) {\r\n    return str.split(' ').filter(function (n) {\r\n        return n !== ''\r\n    }).length\r\n}\r\n"],"names":["isUndefined","value","isObjEmpty","obj","Object","values","length","constructor","uuidv4","replace","c","crypto","getRandomValues","Uint8Array","toString","getStorageValue","key","defaultValue","saved","localStorage","getItem","initial","JSON","parse","undefined","removeReadData","_ref","index","currentPhilosopher","_ref$markedQuotes","markedMode","markedQuotes","setMarkedQuotes","currentData","setCurrentData","newMarkedQuotes","stringify","readQuotesArray","READ_ARRAY_LOCALSTORAGE_KEY","concat","_toConsumableArray","Set","push","newData","filter","_ref2","_","id","indexOf","scrollToFirstRow","listRef","current","scrollToRow","scrollToMemorizedRow","scrollPosition","search","searchText","Promise","resolve","worker","postMessage","filterName","onmessage","event","filteredQuotesFromWorker","eval","data","isMobile","window","innerWidth","isDesktop","Worker","URL","alert","tableData","columns","_jsx","children","map","accessor","tData","handleSorting","_useState","useState","_useState2","_slicedToArray","sortField","setSortField","_useState3","_useState4","order","setOrder","label","sortable","cl","onClick","sortOrder","handleSortingChange","className","useSortableTable","setTableData","useEffect","defaultTableData","sort","a","b","filterColumn","column","sortbyOrder","_Object$assign","assign","apply","_Object$assign$access","_Object$assign$sortby","ascending","localeCompare","numeric","getDefaultSorting","sorted","caption","_useSortableTable","_useSortableTable2","_Fragment","_jsxs","TableHead","TableBody","setData","dispatch","useDispatch","useSelector","state","philosophersData","options","darkMode","originalOptions","_state$philosophersDa","setOriginalOptions","setOriginalOptionsRedux","setOptions","setOptionsRedux","sorting","getPhilosopherJSON","sum","hasOwnProperty","getPhilosopherObjectIndex","readCount","philosopher","getPhilosopherFullName","createData","setThemeClassNameOnHTMLTag","Table","style","display","alignItems","justifyContent","height","fontSize","margin","addResponseOptionsDataIntoRedux","newOptions","oldOptions","oldOriginalOptions","STATIC_OPTIONS","resultantOptions","newOptionsCopy","forEach","element","newOptionindex","oldOptionIndex","quotes","merge","LATEST","bringIntoOriginalOrder","ALPHABETICAL","bringIntoAlphabeticalOrder","onPhilosopherSelectChange","setIsFetching","setStart","setEnd","setSearchText","setCurrentPhilosopher","setQuotesLoaded","callback","changeQuotesData","getPhilosopherQuotes","lazyLoadAsset","then","onFocusHandler","_ref3","_asyncToGenerator","_regeneratorRuntime","mark","_callee","setIsFetchingOptions","response","wrap","_context","prev","next","isFetchingOptions","retryTenTimes","fetch","API_ENDPOINTS","STATIC_DATA","STATIC_ASSET_GRAPH","sent","json","stop","_x","arguments","root","document","getElementsByTagName","classList","add","item","getPhilosopherData","reverse","fullName","_ref2$markedMode","currentIndex","_ref4","getPhilosopherFullName_i10n","_ref5","_ref6","fullNameInOtherLanguages","searchByWordLength","_ref9","start","end","_ref7","_ref8","_callee$","abrupt","trim","_x2","_x3","_x4","_x5","getWordCount","str","split","n"],"sourceRoot":""}