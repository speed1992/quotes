{"version":3,"file":"static/js/405.9ec21127.chunk.js","mappings":"wPASMA,EAAYC,EAAAA,MAAW,kBAAMC,EAAAA,EAAAA,KAAc,kBAAM,oCACjDC,EAAgBF,EAAAA,MAAW,kBAAMC,EAAAA,EAAAA,KAAc,kBAAM,mCACrDE,EAAiBH,EAAAA,MAAW,kBAAMC,EAAAA,EAAAA,KAAc,kBAAM,oCA2D5D,MAzDA,YAAkN,IAA5LG,EAA2L,EAA3LA,WAAYC,EAA+K,EAA/KA,cAAeC,EAAgK,EAAhKA,QAASC,EAAuJ,EAAvJA,cAAeC,EAAwI,EAAxIA,SAAUC,EAA8H,EAA9HA,YAAaC,EAAiH,EAAjHA,WAAYC,EAAqG,EAArGA,QAASC,EAA4F,EAA5FA,SAAUC,EAAkF,EAAlFA,YAAaC,EAAqE,EAArEA,gBAAiBC,EAAoD,EAApDA,WAAYC,EAAwC,EAAxCA,cAAeC,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,YACxLC,GAAaC,EAAAA,EAAAA,KAAY,qBAAGC,iBAAoBF,cAChDG,GAAeF,EAAAA,EAAAA,KAAY,qBAAGC,iBAAoBC,gBACxD,GAAuBC,EAAAA,EAAAA,MAAhBC,GAAP,eAEMC,GAAWC,EAAAA,EAAAA,MAEXC,EAA2B,SAACC,GACnBA,EAAMC,OAAOC,KAEbC,EAAAA,EAAQrB,EAAWqB,EAAAA,GACzBrB,EAAWsB,EAAAA,IAGpB,OACI,SAAC7B,EAAD,CAAgB8B,SAAU,kBAAM1B,GAAc,IAA9C,UACI,gBAAIuB,GAAG,aAAaI,MAAO,CAAEC,QAAS7B,EAAU,QAAU,QAA1D,WACI,+CAEI,4BACI,kBAAO8B,KAAK,QAAQN,GAAIC,EAAAA,EAAQM,KAAK,WAAWC,QAASX,EAA0BY,eAAgB5B,IAAYoB,EAAAA,KAC/G,kBAAOS,QAAST,EAAAA,EAAhB,wBAEJ,4BACI,kBAAOK,KAAK,QAAQN,GAAIE,EAAAA,EAAcK,KAAK,WAAWC,QAASX,EAA0BY,eAAgB5B,IAAYqB,EAAAA,KACrH,kBAAOQ,QAASR,EAAAA,EAAhB,iCAGR,yCAEI,kBAAOI,KAAK,WAAWK,QAASrC,EAAYsC,SAAU,gBAAaD,EAAb,EAAGZ,OAAUY,QAAb,OAA6BpC,EAAcoC,UAErG,uCAEI,kBAAOL,KAAK,WAAWK,QAASjC,EAAUkC,SAAU,gBAAaD,EAAb,EAAGZ,OAAUY,QAAb,OAA6BhC,EAAYgC,UAEjG,+CAEI,kBAAOC,SAAU,SAACd,GAAD,OAAWH,GAASkB,EAAAA,EAAAA,IAAmBf,EAAMC,OAAOe,MAAQ,MAAMC,UAAU,aAAaT,KAAK,SAASQ,MAAOzB,EAA0B,GAAbA,EAAkB,SAElK,yBACI,SAAC,KAAD,CAAM2B,GAAIC,EAAAA,EAAAA,OAAAA,MAAqBb,MAAO,CAAEc,eAAgB,OAAQC,MAAO,QAAvE,UACI,iDAGR,2BACI,SAAC/C,EAAD,CAAqBW,YAAAA,EAAaD,SAAAA,EAAUY,aAAAA,EAAcT,WAAAA,EAAYC,cAAAA,EAAeF,gBAAAA,EAAiBQ,aAAAA,EAAcL,SAAAA,EAAUC,YAAAA,KAC9H,gBAAK2B,UAAU,aAAf,2GAEJ,yBACI,SAAC9C,EAAD","sources":["components/organisms/home/mobile/mobile-menu/mobile-menu.js"],"sourcesContent":["import React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport { useSnackbar } from 'react-simple-snackbar'\r\nimport ROUTES from '../../../../../common/routes/routes'\r\nimport { retryTenTimes } from '../../../../../common/utils/apiUtils'\r\nimport { ALPHABETICAL, LATEST } from '../../home-page/constants/constants'\r\nimport { setVoiceSpeedRedux } from '../../home-page/homePageRedux/homePageRedux'\r\nimport './mobile-menu.css'\r\nconst BuildInfo = React.lazy(() => retryTenTimes(() => import('../../../tools/build-info/build-info')))\r\nconst LoginRegister = React.lazy(() => retryTenTimes(() => import('../login-register/login-register')))\r\nconst OutsideAlerter = React.lazy(() => retryTenTimes(() => import('../../../../../common/components/outside-alerter/outside-alerter')))\r\n\r\nfunction MobileMenu({ markedMode, setMarkedMode, visible, toggleVisible, darkMode, setDarkMode, setSorting, sorting, userName, setUserName, setMarkedQuotes, isLoggedIn, setIsLoggedIn, password, setPassword }) {\r\n    const voiceSpeed = useSelector(({ philosophersData: { voiceSpeed } }) => voiceSpeed)\r\n    const markedQuotes = useSelector(({ philosophersData: { markedQuotes } }) => markedQuotes)\r\n    const [openSnackbar] = useSnackbar()\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const onClickSortButtonHandler = (event) => {\r\n        const id = event.target.id\r\n\r\n        if (id === LATEST) setSorting(LATEST)\r\n        else setSorting(ALPHABETICAL)\r\n    }\r\n\r\n    return (\r\n        <OutsideAlerter callback={() => toggleVisible(false)}>\r\n            <ul id=\"slide_menu\" style={{ display: visible ? 'block' : 'none' }}>\r\n                <li>\r\n                    Sort philosophers\r\n                    <div>\r\n                        <input type=\"radio\" id={LATEST} name=\"sortType\" onClick={onClickSortButtonHandler} defaultChecked={sorting === LATEST ? true : false} />\r\n                        <label htmlFor={LATEST}>Latest</label>\r\n                    </div>\r\n                    <div>\r\n                        <input type=\"radio\" id={ALPHABETICAL} name=\"sortType\" onClick={onClickSortButtonHandler} defaultChecked={sorting === ALPHABETICAL ? true : false} />\r\n                        <label htmlFor={ALPHABETICAL}>Alphabetical</label>\r\n                    </div>\r\n                </li>\r\n                <li>\r\n                    Marked Mode\r\n                    <input type=\"checkbox\" checked={markedMode} onChange={({ target: { checked } }) => setMarkedMode(checked)} />\r\n                </li>\r\n                <li>\r\n                    Dark Mode\r\n                    <input type=\"checkbox\" checked={darkMode} onChange={({ target: { checked } }) => setDarkMode(checked)} />\r\n                </li>\r\n                <li>\r\n                    Voice Speed[1-20]\r\n                    <input onChange={(event) => dispatch(setVoiceSpeedRedux(event.target.value / 10))} className=\"voiceSpeed\" type=\"number\" value={voiceSpeed ? voiceSpeed * 10 : ''} />\r\n                </li>\r\n                <li>\r\n                    <Link to={ROUTES.report.route} style={{ textDecoration: 'none', color: '#000' }}>\r\n                        <button>Open Report</button>\r\n                    </Link>\r\n                </li>\r\n                <li>\r\n                    <LoginRegister {...{ setUserName, userName, openSnackbar, isLoggedIn, setIsLoggedIn, setMarkedQuotes, markedQuotes, password, setPassword }} />\r\n                    <div className=\"backupNote\">You can login to backup your marked quotes in database in case browser data gets deleted.</div>\r\n                </li>\r\n                <li>\r\n                    <BuildInfo />\r\n                </li>\r\n            </ul>\r\n        </OutsideAlerter>\r\n    )\r\n}\r\n\r\nexport default MobileMenu\r\n"],"names":["BuildInfo","React","retryTenTimes","LoginRegister","OutsideAlerter","markedMode","setMarkedMode","visible","toggleVisible","darkMode","setDarkMode","setSorting","sorting","userName","setUserName","setMarkedQuotes","isLoggedIn","setIsLoggedIn","password","setPassword","voiceSpeed","useSelector","philosophersData","markedQuotes","useSnackbar","openSnackbar","dispatch","useDispatch","onClickSortButtonHandler","event","target","id","LATEST","ALPHABETICAL","callback","style","display","type","name","onClick","defaultChecked","htmlFor","checked","onChange","setVoiceSpeedRedux","value","className","to","ROUTES","textDecoration","color"],"sourceRoot":""}