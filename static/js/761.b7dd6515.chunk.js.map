{"version":3,"file":"static/js/761.b7dd6515.chunk.js","mappings":"sJAqBA,UAlBsB,SAAC,GAA4D,IAA1DA,EAAyD,EAAzDA,YAAaC,EAA4C,EAA5CA,SAAUC,EAAkC,EAAlCA,cAAeC,EAAmB,EAAnBA,aAC3D,GAAgCC,EAAAA,EAAAA,UAAS,IAAzC,eAAOC,EAAP,KAAiBC,EAAjB,KACA,OACI,4CAEI,kBAAOC,KAAK,OAAOC,UAAU,YAAYC,SAAU,SAACC,GAAD,OAAOV,EAAYU,EAAEC,OAAOC,QAAQA,MAAOX,IAFlG,YAII,kBAAOM,KAAK,WAAWC,UAAU,YAAYC,SAAU,SAACC,GAAD,OAAOJ,EAAYI,EAAEC,OAAOC,QAAQA,MAAOP,KAClG,mBAAQG,UAAU,UAAUK,QAAS,kBAAMC,EAAAA,EAAAA,IAAc,CAAEC,YAAa,QAASd,SAAAA,EAAUI,SAAAA,EAAUH,cAAAA,EAAeC,aAAAA,KAApH,oBAGA,mBAAQK,UAAU,UAAUK,QAAS,kBAAMC,EAAAA,EAAAA,IAAc,CAAEC,YAAa,WAAYd,SAAAA,EAAUI,SAAAA,EAAUH,cAAAA,EAAeC,aAAAA,KAAvH,2B,gJCZCa,EAAe,mCAAG,kGAASf,EAAT,EAASA,SAAUgB,EAAnB,EAAmBA,aAAcd,EAAjC,EAAiCA,aAAjC,UACNe,EAAAA,EAAAA,KAAa,iBAC9B,8FACUC,MAAM,4DAA6D,CACrEC,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAU,CACjBvB,SAAAA,EACAgB,aAAAA,EACAQ,WAAYC,KAAKC,UAP7B,oFAFuB,cACvBC,EADuB,gBAcVA,EAASC,OAdC,OAc3BD,EAd2B,OAe3BzB,EAAaoB,KAAKC,UAAUI,IAfD,2CAAH,sDAkBfE,EAAc,mCAAG,kGAAS7B,EAAT,EAASA,SAAT,EAAmBgB,aAAcd,EAAjC,EAAiCA,aAAc4B,EAA/C,EAA+CA,gBAA/C,UACLb,EAAAA,EAAAA,KAAa,iBAC9B,8FACUC,MAAM,6DAA8D,CACtEC,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAU,CACjBvB,SAAAA,MALZ,oFAFsB,cACtB2B,EADsB,gBAYTA,EAASC,OAZA,OAY1BD,EAZ0B,OAa1BG,EAAgBH,EAAS,GAAGX,cAC5Bd,EAAa,gBAAiB,KAdJ,2CAAH,sDAiBdW,EAAa,mCAAG,sGAASC,EAAT,EAASA,YAAad,EAAtB,EAAsBA,SAAUI,EAAhC,EAAgCA,SAAUH,EAA1C,EAA0CA,cAAeC,EAAzD,EAAyDA,aAC5E6B,EAAsB/B,EAASgC,OAAO,GAAGC,cAAgBjC,EAASkC,MAAM,GAE1D,UAAhBpB,EAHqB,iCAIJG,EAAAA,EAAAA,KAAa,iBAC1B,8FACUC,MAAM,mDAAoD,CAC5DC,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAU,CACjBvB,SAAAA,EACAI,SAAAA,MANZ,oFALiB,OAIrBuB,EAJqB,gDAgBJV,EAAAA,EAAAA,KAAa,iBAC1B,8FACUC,MAAM,oDAAqD,CAC7DC,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAU,CACjBvB,SAAAA,EACAI,SAAAA,MANZ,oFAjBiB,QAgBrBuB,EAhBqB,gCA6BRA,EAASC,OA7BD,QA6BzBD,EA7ByB,OA+BzB,UAAIA,SAAJ,OAAI,EAAUQ,IACVlC,GAAc,GACdC,EAAa6B,EAAsB,IAAMT,KAAKC,UAAUI,EAASS,kBAEjElC,EAAaoB,KAAKC,UAAUI,EAASU,QAnChB,4CAAH","sources":["components/organisms/home/mobile/login-register/login-register.js","components/organisms/home/mobile/mobile-menu/utils/utils.js"],"sourcesContent":["import { useState } from 'react'\r\nimport { loginRegister } from '../mobile-menu/utils/utils'\r\n\r\nconst LoginRegister = ({ setUserName, userName, setIsLoggedIn, openSnackbar }) => {\r\n    const [password, setPassword] = useState('')\r\n    return (\r\n        <>\r\n            Username\r\n            <input type=\"text\" className=\"userInput\" onChange={(e) => setUserName(e.target.value)} value={userName} />\r\n            Password\r\n            <input type=\"password\" className=\"userInput\" onChange={(e) => setPassword(e.target.value)} value={password} />\r\n            <button className=\"menuBtn\" onClick={() => loginRegister({ apiCallType: 'login', userName, password, setIsLoggedIn, openSnackbar })}>\r\n                Login\r\n            </button>\r\n            <button className=\"menuBtn\" onClick={() => loginRegister({ apiCallType: 'register', userName, password, setIsLoggedIn, openSnackbar })}>\r\n                Register\r\n            </button>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default LoginRegister\r\n","import { retryTenTimes } from '../../../../../../common/utils/apiUtils'\r\n\r\nexport const sendUserDetails = async ({ userName, markedQuotes, openSnackbar }) => {\r\n    let response = await retryTenTimes(\r\n        async () =>\r\n            await fetch('https://quotes-backend.vercel.app/api/markedQuotes/backup', {\r\n                method: 'post',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({\r\n                    userName,\r\n                    markedQuotes,\r\n                    dateSynced: Date.now(),\r\n                }),\r\n            })\r\n    )\r\n\r\n    response = await response.json()\r\n    openSnackbar(JSON.stringify(response))\r\n}\r\n\r\nexport const getUserDetails = async ({ userName, markedQuotes, openSnackbar, setMarkedQuotes }) => {\r\n    let response = await retryTenTimes(\r\n        async () =>\r\n            await fetch('https://quotes-backend.vercel.app/api/markedQuotes/restore', {\r\n                method: 'post',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({\r\n                    userName,\r\n                }),\r\n            })\r\n    )\r\n\r\n    response = await response.json()\r\n    setMarkedQuotes(response[0].markedQuotes)\r\n    openSnackbar('Restored data', 2000)\r\n}\r\n\r\nexport const loginRegister = async ({ apiCallType, userName, password, setIsLoggedIn, openSnackbar }) => {\r\n    const capitalizedUserName = userName.charAt(0).toUpperCase() + userName.slice(1)\r\n    let response\r\n    if (apiCallType === 'login') {\r\n        response = await retryTenTimes(\r\n            async () =>\r\n                await fetch('https://quotes-backend.vercel.app/api/user/login', {\r\n                    method: 'post',\r\n                    headers: { 'Content-Type': 'application/json' },\r\n                    body: JSON.stringify({\r\n                        userName,\r\n                        password,\r\n                    }),\r\n                })\r\n        )\r\n    } else {\r\n        response = await retryTenTimes(\r\n            async () =>\r\n                await fetch('https://quotes-backend.vercel.app/api/user/create', {\r\n                    method: 'post',\r\n                    headers: { 'Content-Type': 'application/json' },\r\n                    body: JSON.stringify({\r\n                        userName,\r\n                        password,\r\n                    }),\r\n                })\r\n        )\r\n    }\r\n\r\n    response = await response.json()\r\n\r\n    if (response?.ok) {\r\n        setIsLoggedIn(true)\r\n        openSnackbar(capitalizedUserName + ' ' + JSON.stringify(response.serverResponse))\r\n    } else {\r\n        openSnackbar(JSON.stringify(response.error))\r\n    }\r\n}\r\n"],"names":["setUserName","userName","setIsLoggedIn","openSnackbar","useState","password","setPassword","type","className","onChange","e","target","value","onClick","loginRegister","apiCallType","sendUserDetails","markedQuotes","retryTenTimes","fetch","method","headers","body","JSON","stringify","dateSynced","Date","now","response","json","getUserDetails","setMarkedQuotes","capitalizedUserName","charAt","toUpperCase","slice","ok","serverResponse","error"],"sourceRoot":""}