{"version":3,"file":"static/js/Report.2e61d95c.chunk.js","mappings":"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","sources":["common/utils/commonUtils.js","common/utils/dateUtils.js","common/utils/localStorageUtils.js","common/utils/staticDataUtils.js","common/utils/urlUtils.js","webpack://quotes/./src/components/organisms/analysis/table/table.module.css?59c5","components/organisms/analysis/table/TableBody.js","components/organisms/analysis/table/TableHead.js","components/organisms/analysis/table/useSortableTable.js","components/organisms/analysis/table/table.jsx","components/organisms/analysis/report/utils/utils.js","components/organisms/analysis/report/report.js","common/settings/constants.js","common/utils/objectUtils.js","common/utils/lazyLoadUtils.js","components/organisms/home/desktop/desktop-header/utils/utils.js","components/organisms/home/home-page/constants/constants.js","components/organisms/home/home-page/utils/utils.js","components/organisms/home/mobile/mobile-menu/utils/utils.js","components/organisms/home/quotes-list/utils/utils.js"],"sourcesContent":["export const isUndefined = (value) => typeof value === 'undefined'\nexport const isObjEmpty = (obj) => Object.values(obj).length === 0 && obj.constructor === Object\n\nexport function uuidv4() {\n    return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, (c) => (c ^ (crypto.getRandomValues(new Uint8Array(1))[0] & (15 >> (c / 4)))).toString(16))\n}\n","import { checkQueryParams } from './urlUtils'\n\nexport const isCacheExpired = (startDate, cacheTime, setLogs = null) => {\n    startDate = new Date(startDate)\n    const endDate = new Date()\n    const dateDifferenceInMilliSeconds = endDate.getTime() - startDate.getTime()\n    const dateDifferenceInDays = Math.floor(dateDifferenceInMilliSeconds / (1000 * 60 * 60 * 24))\n    if (setLogs && checkQueryParams('dev')) {\n        setLogs?.('inside isCacheExpired ' + endDate)\n        setLogs?.('startDate ' + startDate)\n        setLogs?.('endDate ' + endDate)\n        setLogs?.('dateDifferenceInMilliSeconds endDate.getTime() - startDate.getTime() ' + dateDifferenceInMilliSeconds)\n        setLogs?.('dateDifference In hours ' + Math.floor((dateDifferenceInMilliSeconds / (1000 * 60 * 60)) % 24))\n        setLogs?.('dateDifferenceInDays ' + dateDifferenceInDays)\n        setLogs?.('dateDifferenceInDays >= cacheTime ' + dateDifferenceInDays >= cacheTime)\n        setLogs?.('cacheTime ' + cacheTime)\n    }\n    return dateDifferenceInDays >= cacheTime\n}\n\nexport const getDifferenceFromCurrentDate = (date2) => {\n    const date1 = new Date()\n    return date2.getTime() - date1.getTime()\n}\n","import { useEffect, useState } from 'react'\n\nexport function getStorageValue(key, defaultValue) {\n    const saved = localStorage.getItem(key)\n    const initial = JSON.parse(saved)\n    if (initial === undefined || initial === 'undefined' || initial === 'null' || initial === null) {\n        return defaultValue\n    } else return initial\n}\n\nexport function setStorageValue(key, value) {\n    localStorage.setItem(key, JSON.stringify(value))\n}\n\nexport const useLocalStorage = (key, defaultValue) => {\n    const [value, setValue] = useState(() => {\n        return getStorageValue(key, defaultValue)\n    })\n\n    useEffect(() => {\n        localStorage.setItem(key, JSON.stringify(value))\n    }, [key, value])\n\n    return [value, setValue]\n}\n","import { getStorageValue } from './localStorageUtils'\n\nexport const removeReadData = ({ index, currentPhilosopher, markedMode, markedQuotes = {}, setMarkedQuotes, currentData, setCurrentData }) => {\n    let newMarkedQuotes = JSON.parse(JSON.stringify(markedQuotes))\n    let readQuotesArray = []\n\n    const READ_ARRAY_LOCALSTORAGE_KEY = `${currentPhilosopher}-MARKED_AS_READ`\n    readQuotesArray = getStorageValue(READ_ARRAY_LOCALSTORAGE_KEY, [])\n\n    if (markedQuotes && markedQuotes[currentPhilosopher] !== undefined) {\n        readQuotesArray = [...readQuotesArray, ...markedQuotes[currentPhilosopher]]\n    }\n\n    readQuotesArray = [...new Set(readQuotesArray)]\n\n    if (index) {\n        readQuotesArray.push(index)\n    }\n\n    newMarkedQuotes[currentPhilosopher] = readQuotesArray\n    setMarkedQuotes(newMarkedQuotes)\n\n    const newData = currentData.filter(({ id }, _) => readQuotesArray.indexOf(id) === -1)\n    setCurrentData(JSON.parse(JSON.stringify(newData)))\n}\n","export function getQueryParams(qs) {\n    qs = qs.split('+').join(' ')\n\n    var params = {},\n        tokens,\n        re = /[?&]?([^=]+)=([^&]*)/g\n    while ((tokens = re.exec(qs))) {\n        params[decodeURIComponent(tokens[1])] = decodeURIComponent(tokens[2])\n    }\n\n    return params\n}\n\nexport function checkQueryParams(param) {\n    let query = getQueryParams(document.location.search)\n    let val = query[param] ? query[param].toLowerCase() : null\n    if (val === 'false' || val) return true\n    else return false\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"table\":\"table_table__yNjzg\",\"tableHeading\":\"table_tableHeading__-u0tG\",\"tableColumn\":\"table_tableColumn__yamPG\"};","import styles from './table.module.css'\n\nconst TableBody = ({ tableData, columns }) => {\n    return (\n        <tbody>\n            {tableData.map((data) => {\n                return (\n                    <tr key={data.id}>\n                        {columns.map(({ accessor }) => {\n                            const tData = data[accessor] ? data[accessor] : '——'\n                            return (\n                                <td className={styles.tableColumn} key={accessor}>\n                                    {tData}\n                                </td>\n                            )\n                        })}\n                    </tr>\n                )\n            })}\n        </tbody>\n    )\n}\n\nexport default TableBody\n","import { useState } from 'react'\nimport styles from './table.module.css'\n\nconst TableHead = ({ columns, handleSorting }) => {\n    const [sortField, setSortField] = useState('')\n    const [order, setOrder] = useState('asc')\n\n    const handleSortingChange = (accessor) => {\n        const sortOrder = accessor === sortField && order === 'asc' ? 'desc' : 'asc'\n        setSortField(accessor)\n        setOrder(sortOrder)\n        handleSorting(accessor, sortOrder)\n    }\n\n    return (\n        <thead>\n            <tr>\n                {columns.map(({ label, accessor, sortable }) => {\n                    const cl = sortable ? (sortField === accessor && order === 'asc' ? 'up' : sortField === accessor && order === 'desc' ? 'down' : 'default') : ''\n                    return (\n                        <th className={`${styles.tableHeading} ${cl}`} key={accessor} onClick={sortable ? () => handleSortingChange(accessor) : null}>\n                            {label}\n                        </th>\n                    )\n                })}\n            </tr>\n        </thead>\n    )\n}\n\nexport default TableHead\n","import { useEffect, useState } from 'react'\n\nfunction getDefaultSorting(defaultTableData, columns) {\n    const sorted = [...defaultTableData].sort((a, b) => {\n        const filterColumn = columns.filter((column) => column.sortbyOrder)\n\n        let { accessor = 'id', sortbyOrder = 'asc' } = Object.assign({}, ...filterColumn)\n\n        if (a[accessor] === null) return 1\n        if (b[accessor] === null) return -1\n        if (a[accessor] === null && b[accessor] === null) return 0\n\n        const ascending = a[accessor]?.toString()?.localeCompare(b[accessor]?.toString(), 'en', {\n            numeric: true,\n        })\n\n        return sortbyOrder === 'asc' ? ascending : -ascending\n    })\n    return sorted\n}\n\nexport const useSortableTable = (data, columns) => {\n    const [tableData, setTableData] = useState([])\n\n    useEffect(() => {\n        setTableData(getDefaultSorting(data, columns))\n    }, [data])\n\n    const handleSorting = (sortField, sortOrder) => {\n        if (sortField) {\n            const sorted = [...tableData].sort((a, b) => {\n                if (a[sortField] === null) return 1\n                if (b[sortField] === null) return -1\n                if (a[sortField] === null && b[sortField] === null) return 0\n                return (\n                    a[sortField]?.toString()?.localeCompare(b[sortField]?.toString(), 'en', {\n                        numeric: true,\n                    }) * (sortOrder === 'asc' ? 1 : -1)\n                )\n            })\n            setTableData(sorted)\n        }\n    }\n\n    return [tableData, handleSorting]\n}\n","import styles from './table.module.css'\nimport TableBody from './TableBody'\nimport TableHead from './TableHead'\nimport { useSortableTable } from './useSortableTable'\n\nconst Table = ({ data, columns }) => {\n    const [tableData, handleSorting] = useSortableTable(data, columns)\n\n    return (\n        <>\n            <table className={styles.table}>\n                <TableHead {...{ columns, handleSorting }} />\n                <TableBody {...{ columns, tableData }} />\n            </table>\n        </>\n    )\n}\n\nexport default Table\n","import { getPhilosopherObjectIndex, getPhilosopherQuotes } from '../../../../../common/static/utils/utils'\nimport { isUndefined, uuidv4 } from '../../../../../common/utils/commonUtils'\nimport { getPhilosopherFullName } from '../../../home/quotes-list/utils/utils'\n\nexport const createData = ({ markedQuotes, options, setData }) => {\n    const data = []\n    let sum = 0\n    for (const key in markedQuotes) {\n        if (markedQuotes.hasOwnProperty(key) && getPhilosopherObjectIndex(key, options) !== -1) {\n            let readCount = 0\n            if (!isUndefined(markedQuotes[key])) {\n                readCount = markedQuotes[key].length\n                sum += readCount\n            }\n            const originalData = getPhilosopherQuotes({ philosopher: key, options })\n            const totalQuoteCount = originalData?.length\n            const obj = { id: uuidv4(), philosopher: getPhilosopherFullName({ currentPhilosopher: key, options }), readCount, totalCount: totalQuoteCount || '——', percentageCompleted: totalQuoteCount ? `${((readCount / totalQuoteCount) * 100).toFixed(2)}%` : '——' }\n            data.push(obj)\n        }\n    }\n    const obj = { philosopher: 'Total Read', readCount: sum, id: uuidv4() }\n    data.push(obj)\n    setData(data)\n}\n","import { useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { onFocusHandler as getPhilosopherJSON } from '../../home/desktop/desktop-header/utils/utils'\nimport { setOptionsRedux, setOriginalOptionsRedux } from '../../home/home-page/homePageRedux/homePageRedux'\nimport { setThemeClassNameOnHTMLTag } from '../../home/home-page/utils/utils'\nimport Table from '../table/table'\nimport columns from './columns.json'\nimport { createData } from './utils/utils'\n\nconst Report = () => {\n    const [data, setData] = useState([])\n    const dispatch = useDispatch()\n    const markedQuotes = useSelector((state) => state.philosophersData.markedQuotes)\n    const options = useSelector((state) => state.philosophersData.options)\n    const darkMode = useSelector((state) => state.philosophersData.darkMode)\n    const originalOptions = useSelector((state) => state?.philosophersData?.originalOptions)\n    const setOriginalOptions = (value) => dispatch(setOriginalOptionsRedux(value))\n    const setOptions = (value) => dispatch(setOptionsRedux(value))\n    const sorting = useSelector((state) => state.philosophersData.sorting)\n\n    useEffect(() => {\n        getPhilosopherJSON({ options, setOptions, originalOptions, setOriginalOptions, sorting })\n    }, [])\n\n    useEffect(() => {\n        createData({ markedQuotes, options, setData })\n    }, [options.length])\n\n    useEffect(() => {\n        setThemeClassNameOnHTMLTag(darkMode)\n    }, [darkMode])\n\n    return data.length > 0 ? (\n        <Table data={data} columns={columns} />\n    ) : (\n        <>\n            <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', height: '100vh', fontSize: '2rem', margin: '3rem' }}>No records found!</div>\n            <div style={{ fontSize: '2rem', margin: '3rem' }}>Please use, marked mode feature, mark quotes as read and come back.</div>\n        </>\n    )\n}\n\nexport default Report\n","export const MAX_RECENT_PHILOSOPHERS = 15\n","import { getPhilosopherObjectIndex } from '../static/utils/utils'\n\nexport const merge = (oldOptions, newOptions) => {\n    let newOptionsCopy = JSON.parse(JSON.stringify(newOptions))\n    newOptionsCopy.forEach((element, newOptionindex) => {\n        const oldOptionIndex = getPhilosopherObjectIndex(element.value, oldOptions)\n        if (oldOptionIndex !== -1) {\n            newOptionsCopy[newOptionindex].quotes = oldOptions[oldOptionIndex].quotes\n        }\n    })\n    return newOptionsCopy\n}\n","import { ALPHABETICAL, LATEST } from '../../components/organisms/home/home-page/constants/constants'\nimport { STATIC_OPTIONS } from '../../components/organisms/home/home-page/homePageRedux/initialState'\nimport { bringIntoAlphabeticalOrder, bringIntoOriginalOrder } from '../../components/organisms/home/home-page/utils/utils'\nimport { merge } from './objectUtils'\n\nexport const addOptionsDataIntoRedux = ({ newOptions, oldOptions, oldOriginalOptions, setOptions, setOriginalOptions }) => {\n    let resultantOptions\n    resultantOptions = [...oldOptions, ...newOptions]\n    setOptions(resultantOptions)\n    setOriginalOptions([...STATIC_OPTIONS, ...newOptions])\n}\n\nexport const addResponseOptionsDataIntoRedux = ({ newOptions, oldOptions, oldOriginalOptions, setOptions, setOriginalOptions, sorting }) => {\n    const originalOptions = [...STATIC_OPTIONS, ...newOptions]\n    let resultantOptions = merge(oldOptions, [...originalOptions])\n    if (sorting === LATEST) {\n        resultantOptions = bringIntoOriginalOrder(originalOptions, resultantOptions)\n    } else if (sorting === ALPHABETICAL) {\n        resultantOptions = bringIntoAlphabeticalOrder(resultantOptions)\n    }\n    setOptions([...resultantOptions])\n    setOriginalOptions(originalOptions)\n}\n","import { API_ENDPOINTS } from '../../../../../../common/apis/apiEndpoints'\nimport CACHE_IN_DAYS from '../../../../../../common/settings/cache.json'\nimport { MAX_RECENT_PHILOSOPHERS } from '../../../../../../common/settings/constants'\nimport { getPhilosopherQuotes, lazyLoadAsset } from '../../../../../../common/static/utils/utils'\nimport { retryTenTimes } from '../../../../../../common/utils/apiUtils'\nimport { isCacheExpired } from '../../../../../../common/utils/dateUtils'\nimport { addResponseOptionsDataIntoRedux } from '../../../../../../common/utils/lazyLoadUtils'\nimport { checkQueryParams } from '../../../../../../common/utils/urlUtils'\nimport { changeQuotesData } from '../../../quotes-list/utils/utils'\nexport function onPhilosopherSelectChange({ philosopher, setIsFetching, setCurrentPhilosopher, currentData, setCurrentData, options, setOptions, markedMode, markedQuotes, setMarkedQuotes, recentPhilosophers, setRecentPhilosophers }) {\n    function callback() {\n        if (recentPhilosophers) setRecentPhilosophers([...new Set([philosopher, ...recentPhilosophers.slice(0, MAX_RECENT_PHILOSOPHERS - 1)])])\n        setCurrentPhilosopher(philosopher)\n        changeQuotesData({ philosopher, currentData, setCurrentData, options }, { markedMode, markedQuotes, setMarkedQuotes })\n        setIsFetching(false)\n    }\n    // setEnd('')\n    // setSearchText('')\n    setIsFetching(true)\n\n    if (!getPhilosopherQuotes({ philosopher, options })) {\n        lazyLoadAsset(philosopher, { options, setOptions }, []).then(callback)\n    } else {\n        callback()\n    }\n}\n\nexport const onFocusHandler = async ({ options, setOptions, setSyncDate, setIsFetchingOptions, originalOptions, setOriginalOptions, sorting, syncDate, setLogs }) => {\n    if (checkQueryParams('dev')) {\n        const today = new Date()\n        setLogs?.('inside onFocusHandler')\n        setLogs?.('isCacheExpired(syncDate, CACHE_IN_DAYS.ASSET_GRAPH, setLogs) || options.length === 1 ' + isCacheExpired(syncDate, CACHE_IN_DAYS.ASSET_GRAPH, setLogs) || options.length === 1)\n        setLogs?.('options.length ' + options.length)\n        setLogs?.('current time ' + today)\n        setLogs?.('syncDate ' + new Date(syncDate))\n    }\n    if (isCacheExpired(syncDate, CACHE_IN_DAYS.ASSET_GRAPH, setLogs) || options.length === 1) {\n        setIsFetchingOptions?.(true)\n        let response = await retryTenTimes(() => fetch(API_ENDPOINTS.STATIC_DATA.STATIC_ASSET_GRAPH))\n        response = await response.json()\n        if (checkQueryParams('dev')) setLogs?.('api response ' + response)\n        addResponseOptionsDataIntoRedux({ newOptions: response, oldOptions: options, oldOriginalOptions: originalOptions, setOptions, setOriginalOptions, sorting })\n        setIsFetchingOptions?.(false)\n        setSyncDate?.(Date.now())\n    }\n}\n","export const LATEST = 'latest'\nexport const ALPHABETICAL = 'alphabetical'\n","import { getPhilosopherData, getPhilosopherQuotes } from '../../../../../common/static/utils/utils'\nimport { getUserDetails, getUserMarkedQuotesCount, sendUserDetails } from '../../mobile/mobile-menu/utils/utils'\nimport { getWordCount } from '../../quotes-list/utils/utils'\n\nexport const setThemeClassNameOnHTMLTag = (value) => {\n    let root = document.getElementsByTagName('html')[0]\n    root.className = ''\n    if (value) {\n        root.classList.add('darkTheme')\n    } else {\n        root.classList.add('lightTheme')\n    }\n}\n\nexport const bringIntoOriginalOrder = (originalOptions, newOptions) => originalOptions.map((item) => getPhilosopherData({ philosopher: item.value, options: newOptions })).reverse()\n\nexport const bringIntoAlphabeticalOrder = (options) => [...options].sort((a, b) => a.fullName.localeCompare(b.fullName))\n\nexport async function compareWithServerSyncDatesAndMakeAnAPICall(userName, markedQuotes, openSnackbar, setMarkedQuotes, setRestoreQuotesFromServerCachedDate, markedQuoteClientCount) {\n    const markedQuotesFromServerCount = await getUserMarkedQuotesCount({ userName })\n    if (markedQuotesFromServerCount) {\n        if (markedQuotesFromServerCount > markedQuoteClientCount) {\n            let { markedQuotesFromServer } = await getUserDetails({ userName, openSnackbar })\n            setMarkedQuotes(markedQuotesFromServer)\n            openSnackbar('Auto-Sync : Restored all marked quotes!', 4000)\n        } else if (markedQuoteClientCount > markedQuotesFromServerCount) {\n            await sendUserDetails({ userName, markedQuotes, openSnackbar })\n            // openSnackbar('Auto-Sync : Synced marked quotes with server database!', 4000)\n        }\n        setRestoreQuotesFromServerCachedDate(Date.now())\n    }\n}\n\nexport const autoPopulateWordCount = ({ currentPhilosopher, options, markedQuotes, setStart, setEnd }) => {\n    const quotes = getPhilosopherQuotes({ philosopher: currentPhilosopher, options })\n    const markedQuotesOfTheCurrentPhilosopher = markedQuotes?.[currentPhilosopher] || []\n    const newQuotes = quotes.filter((quote) => !markedQuotesOfTheCurrentPhilosopher.includes(quote.id))\n    const minimumWordCount = newQuotes.reduce((minCount, { quote }) => {\n        if (quote !== '') return Math.min(getWordCount(quote), minCount)\n        else return minCount\n    }, Infinity)\n    if (minimumWordCount !== Infinity) {\n        setStart(1)\n        setEnd(minimumWordCount)\n    }\n}\n","import { API_ENDPOINTS } from '../../../../../../common/apis/apiEndpoints'\nimport { retryTenTimes } from '../../../../../../common/utils/apiUtils'\n\nexport const sendUserDetails = async ({ userName, markedQuotes, openSnackbar, setSyncDate }) => {\n    await retryTenTimes(async () => {\n        return await fetch(API_ENDPOINTS.MARKED_QUOTES.BACKUP, {\n            method: 'post',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n                userName,\n                markedQuotes,\n                dateSynced: Date.now(),\n            }),\n        })\n    })\n}\n\nexport const getUserDetails = async ({ userName, openSnackbar }) => {\n    let response = await retryTenTimes(\n        async () =>\n            await fetch(API_ENDPOINTS.MARKED_QUOTES.RESTORE, {\n                method: 'post',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({\n                    userName,\n                }),\n            })\n    )\n\n    response = await response.json()\n    if (response?.ok) {\n        try {\n            const markedQuotesFromServer = response?.results?.[0]?.markedQuotes\n            const markedQuotesFromServerCount = Object.values(markedQuotesFromServer).flat().length\n            if (markedQuotesFromServer && markedQuotesFromServerCount > 0) {\n                return { markedQuotesFromServer, dateFromServer: response?.results?.[0]?.dateSynced }\n                // setMarkedQuotes(response?.results?.[0]?.markedQuotes)\n            }\n        } catch (error) {\n            openSnackbar(JSON.stringify(error))\n        }\n    } else {\n        openSnackbar(JSON.stringify(response.error))\n    }\n}\n\nexport const getUserMarkedQuotesCount = async ({ userName }) => {\n    let response = await retryTenTimes(\n        async () =>\n            await fetch(API_ENDPOINTS.MARKED_QUOTES.GET_COUNT, {\n                method: 'post',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({\n                    userName,\n                }),\n            })\n    )\n\n    response = await response.json()\n    if (response?.ok) {\n        return response?.count\n    } else {\n        return null\n    }\n}\n\nexport const loginRegister = async ({ apiCallType, userName, password, setIsLoggedIn, openSnackbar, setIsFetching }) => {\n    const capitalizedUserName = userName.charAt(0).toUpperCase() + userName.slice(1)\n    let response\n    setIsFetching(true)\n    if (apiCallType === 'login') {\n        response = await retryTenTimes(\n            async () =>\n                await fetch(API_ENDPOINTS.USER.LOGIN, {\n                    method: 'post',\n                    headers: { 'Content-Type': 'application/json' },\n                    body: JSON.stringify({\n                        userName,\n                        password,\n                    }),\n                })\n        )\n    } else {\n        response = await retryTenTimes(\n            async () =>\n                await fetch(API_ENDPOINTS.USER.CREATE, {\n                    method: 'post',\n                    headers: { 'Content-Type': 'application/json' },\n                    body: JSON.stringify({\n                        userName,\n                        password,\n                    }),\n                })\n        )\n    }\n\n    response = await response.json()\n    setIsFetching(false)\n\n    if (response?.ok) {\n        setIsLoggedIn(true)\n        openSnackbar(capitalizedUserName + ' ' + JSON.stringify(response.serverResponse))\n    } else {\n        openSnackbar(JSON.stringify(response.error))\n    }\n}\n","import { isObjEmpty } from '../../../../../common/utils/commonUtils'\nimport { removeReadData } from '../../../../../common/utils/staticDataUtils'\n\nexport const changeQuotesData = ({ currentPhilosopher, currentData, setCurrentData, options }, { markedMode = null, markedQuotes, setMarkedQuotes }) => {\n    if (currentData) setCurrentData(currentData)\n    if (markedMode !== undefined && markedMode) removeReadData({ currentPhilosopher, markedMode, markedQuotes, setMarkedQuotes, currentData, setCurrentData })\n}\n\nexport const getPhilosopherFullName = ({ currentPhilosopher, options }) => {\n    const currentIndex = options.filter(({ value }) => currentPhilosopher === value)\n    if (!isObjEmpty(currentIndex)) return currentIndex && currentIndex[0].fullName\n}\n\nexport const getPhilosopherFullName_i10n = ({ currentPhilosopher, options }) => {\n    const currentIndex = options.filter(({ value }) => currentPhilosopher === value)\n    if (!isObjEmpty(currentIndex)) return currentIndex && currentIndex[0].fullNameInOtherLanguages\n}\n\nexport function getWordCount(str) {\n    return str.split(' ').filter(function (n) {\n        return n !== ''\n    }).length\n}\n"],"names":["isUndefined","value","isObjEmpty","obj","Object","values","length","constructor","uuidv4","replace","c","crypto","getRandomValues","Uint8Array","toString","isCacheExpired","startDate","cacheTime","setLogs","arguments","undefined","Date","endDate","dateDifferenceInMilliSeconds","getTime","dateDifferenceInDays","Math","floor","checkQueryParams","getStorageValue","key","defaultValue","saved","localStorage","getItem","initial","JSON","parse","removeReadData","_ref","index","currentPhilosopher","markedMode","markedQuotes","setMarkedQuotes","currentData","setCurrentData","newMarkedQuotes","stringify","readQuotesArray","Set","push","newData","filter","_ref2","_","id","indexOf","param","query","qs","split","join","tokens","params","re","exec","decodeURIComponent","getQueryParams","document","location","search","val","toLowerCase","tableData","columns","_jsx","children","map","data","accessor","tData","className","styles","handleSorting","sortField","setSortField","useState","order","setOrder","label","sortable","cl","onClick","sortOrder","handleSortingChange","useSortableTable","setTableData","useEffect","defaultTableData","sort","a","b","_a$accessor","_a$accessor$toString","_b$accessor","filterColumn","column","sortbyOrder","assign","ascending","localeCompare","numeric","getDefaultSorting","sorted","_a$sortField","_a$sortField$toString","_b$sortField","_Fragment","_jsxs","TableHead","TableBody","Report","setData","dispatch","useDispatch","useSelector","state","philosophersData","options","darkMode","originalOptions","_state$philosophersDa","setOriginalOptions","setOriginalOptionsRedux","setOptions","setOptionsRedux","sorting","getPhilosopherJSON","sum","hasOwnProperty","getPhilosopherObjectIndex","readCount","originalData","getPhilosopherQuotes","philosopher","totalQuoteCount","getPhilosopherFullName","totalCount","percentageCompleted","toFixed","createData","setThemeClassNameOnHTMLTag","Table","style","display","alignItems","justifyContent","height","fontSize","margin","MAX_RECENT_PHILOSOPHERS","addResponseOptionsDataIntoRedux","newOptions","oldOptions","oldOriginalOptions","STATIC_OPTIONS","resultantOptions","merge","newOptionsCopy","forEach","element","newOptionindex","oldOptionIndex","quotes","LATEST","bringIntoOriginalOrder","ALPHABETICAL","bringIntoAlphabeticalOrder","onPhilosopherSelectChange","setIsFetching","setCurrentPhilosopher","recentPhilosophers","setRecentPhilosophers","callback","slice","changeQuotesData","lazyLoadAsset","then","onFocusHandler","async","setSyncDate","setIsFetchingOptions","syncDate","today","CACHE_IN_DAYS","response","retryTenTimes","fetch","API_ENDPOINTS","STATIC_DATA","STATIC_ASSET_GRAPH","json","now","root","getElementsByTagName","classList","add","item","getPhilosopherData","reverse","fullName","compareWithServerSyncDatesAndMakeAnAPICall","userName","openSnackbar","setRestoreQuotesFromServerCachedDate","markedQuoteClientCount","markedQuotesFromServerCount","getUserMarkedQuotesCount","markedQuotesFromServer","getUserDetails","sendUserDetails","autoPopulateWordCount","setStart","setEnd","markedQuotesOfTheCurrentPhilosopher","minimumWordCount","quote","includes","reduce","minCount","min","getWordCount","Infinity","MARKED_QUOTES","BACKUP","method","headers","body","dateSynced","_response","RESTORE","ok","_response2","_response2$results","_response2$results$","results","flat","_response3","_response3$results","_response3$results$","dateFromServer","error","_response4","_ref3","GET_COUNT","_response5","count","loginRegister","_response6","apiCallType","password","setIsLoggedIn","_ref4","capitalizedUserName","charAt","toUpperCase","USER","LOGIN","CREATE","serverResponse","currentIndex","getPhilosopherFullName_i10n","_ref5","_ref6","fullNameInOtherLanguages","str","n"],"sourceRoot":""}