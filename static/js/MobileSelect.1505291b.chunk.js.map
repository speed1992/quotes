{"version":3,"file":"static/js/MobileSelect.1505291b.chunk.js","mappings":"qJACA,SAAgB,kBAAoB,yCAAyC,UAAY,iCAAiC,aAAe,oCAAoC,OAAS,+B,aCEtL,MAAMA,EAAiBC,EAAAA,MAAW,KAAMC,EAAAA,EAAAA,KAAc,IAAM,iCAE7C,SAASC,EAAYC,GAA6J,IAA5J,QAAEC,EAAO,mBAAEC,EAAkB,gBAAEC,EAAe,uBAAEC,EAAsB,YAAEC,EAAW,MAAEC,EAAK,kBAAEC,EAAiB,mBAAEC,EAAkB,SAAEC,EAAQ,WAAEC,GAAYV,EAC1L,MAAOW,EAAaC,IAAkBC,EAAAA,EAAAA,UAAS,KACxCC,EAAYC,IAAiBF,EAAAA,EAAAA,UAAS,KACtCG,EAAWC,IAAgBJ,EAAAA,EAAAA,WAAS,IAC3CK,EAAAA,EAAAA,YAAU,IAAMH,EAAcT,IAAQ,CAACA,IACvC,MAAMa,GAAaC,EAAAA,EAAAA,WAEnBF,EAAAA,EAAAA,YAAU,KACFF,GAAaf,EAAQoB,OAAS,IAC9BN,EAAc,IACdH,EAAeX,GACfgB,GAAa,GACjB,GACD,CAAChB,EAAQoB,OAAQL,IAoDpB,OACIM,EAAAA,EAAAA,KAAC1B,EAAc,CAAC2B,SAAUA,IAAMX,EAAe,IAAIY,UAC/CC,EAAAA,EAAAA,MAAA,OAAKC,UAAW,GAAGC,EAAOC,qBAAqBnB,EAAWkB,EAAOE,UAAY,KAAKL,SAAA,EAC9EF,EAAAA,EAAAA,KAAA,SAAOQ,KAAK,qBAAqBC,KAAK,OAAOC,QArDjCC,IACpB7B,IACAa,GAAa,EAAK,EAmD4DiB,SAhD5DD,IAClB,MAAM3B,EAAQ2B,EAAEE,OAAO7B,MACvB,GAAc,KAAVA,EAAcM,EAAeX,OAC5B,CACD,IAAIU,EAAc,GAClB,GAAIL,EAAMe,OAAS,EAAG,CAClB,MAAMe,EAAQ,IAAIC,OAAO,GAAG/B,IAAS,KACrCK,EAAcV,EAAQqC,QAAOC,IAAA,IAAC,SAAEC,GAAUD,EAAA,OAAKH,EAAMK,KAAKD,EAAS,GACvE,CAEA5B,EAAeD,EACnB,CACAI,EAAcT,EAAM,EAoCkFD,YAAaA,EAAaC,MAAOQ,EAAY4B,OAjCjIC,KAClB5B,EAAcT,EAAM,IAiCXC,GACGe,EAAAA,EAAAA,KAAA,MAAII,UAAWC,EAAOiB,aAAapB,UAC/BF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,iBAvBO,IAAvBb,EAAYU,OACL,MAIPC,EAAAA,EAAAA,KAAA,MAAIuB,IAAK1B,EAAYO,UAAW,GAAGC,EAAOiB,gBAAgBnC,GAAYkB,EAAOE,YAAYL,SACzE,OAAXb,QAAW,IAAXA,OAAW,EAAXA,EAAamC,KAAI,CAAAC,EAAwCC,KAAK,IAA5C,SAAER,EAAQ,MAAElC,EAAK,SAAE2C,GAAW,GAAOF,EAAA,OACpDE,GAAYvC,EAAa,MACrBY,EAAAA,EAAAA,KAAA,MAAI4B,MAAsB,KAAfpC,GAAqBkC,GAA0B,OAAlBxC,QAAkB,IAAlBA,OAAkB,EAAlBA,EAAoBa,QAAS,CAAE8B,MAAO,WAAc,CAAC,EAAGC,GAAIlD,IAAuBI,EAAQ,SAAW,GAAgBA,MAAOA,EAAO+C,QAAUpB,GAjB/KqB,EAACd,EAAUlC,UACpBiD,IAAVjD,IACAM,EAAe,IACfG,EAAcyB,GACdrC,EAAgB,CAAEgC,OAAQ,CAAE7B,WAChC,EAY4MgD,CAAmBd,EAAUlC,GAAOkB,SAC3NgB,GADkJlC,EAG1J,UAoBrB,C","sources":["webpack://quotes/./src/components/organisms/home/mobile/mobile-select/mobile-select.module.css?ae0e","components/organisms/home/mobile/mobile-select/mobile-select.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"typeAheadDropDown\":\"mobile-select_typeAheadDropDown__JJA7z\",\"darkTheme\":\"mobile-select_darkTheme__iM4xE\",\"dropDownList\":\"mobile-select_dropDownList__-Kl0K\",\"active\":\"mobile-select_active__bSwvG\"};","import React, { useEffect, useRef, useState } from 'react'\nimport { retryTenTimes } from '../../../../../common/utils/apiUtils'\nimport styles from './mobile-select.module.css'\nconst OutsideAlerter = React.lazy(() => retryTenTimes(() => import(/* webpackChunkName: \"OutsideAlerter\" */ '../../../../../common/components/outside-alerter/outside-alerter')))\n\nexport default function MobileSelect({ options, currentPhilosopher, onChangeHandler, onFocusHandlerCallback, placeholder, value, isFetchingOptions, recentPhilosophers, darkMode, markedMode }) {\n    const [suggestions, setSuggestions] = useState([])\n    const [searchText, setSearchText] = useState([])\n    const [isFocused, setIsFocused] = useState(false)\n    useEffect(() => setSearchText(value), [value])\n    const scollToRef = useRef()\n\n    useEffect(() => {\n        if (isFocused && options.length > 1) {\n            setSearchText('')\n            setSuggestions(options)\n            setIsFocused(false)\n        }\n    }, [options.length, isFocused])\n\n    const onFocusHandler = (e) => {\n        onFocusHandlerCallback()\n        setIsFocused(true)\n    }\n\n    const onTextChange = (e) => {\n        const value = e.target.value\n        if (value === '') setSuggestions(options)\n        else {\n            let suggestions = []\n            if (value.length > 0) {\n                const regex = new RegExp(`${value}`, `i`)\n                suggestions = options.filter(({ fullName }) => regex.test(fullName))\n            }\n\n            setSuggestions(suggestions)\n        }\n        setSearchText(value)\n    }\n\n    const onBlurHandler = () => {\n        setSearchText(value)\n    }\n\n    const suggestionSelected = (fullName, value) => {\n        if (value !== undefined) {\n            setSuggestions([])\n            setSearchText(fullName)\n            onChangeHandler({ target: { value } })\n        }\n    }\n\n    const renderSuggestions = () => {\n        if (suggestions.length === 0) {\n            return null\n        }\n\n        return (\n            <ul ref={scollToRef} className={`${styles.dropDownList} ${darkMode && styles.darkTheme}`}>\n                {suggestions?.map(({ fullName, value, disabled = false }, index) =>\n                    disabled && markedMode ? null : (\n                        <li style={searchText === '' && index < recentPhilosophers?.length ? { color: '#FF00FF' } : {}} id={currentPhilosopher === value ? 'active' : ''} key={value} value={value} onClick={(e) => suggestionSelected(fullName, value)}>\n                            {fullName}\n                        </li>\n                    )\n                )}\n            </ul>\n        )\n    }\n\n    return (\n        <OutsideAlerter callback={() => setSuggestions([])}>\n            <div className={`${styles.typeAheadDropDown} ${darkMode ? styles.darkTheme : ''}`}>\n                <input name=\"search-philosopher\" type=\"text\" onFocus={onFocusHandler} onChange={onTextChange} placeholder={placeholder} value={searchText} onBlur={onBlurHandler} />\n                {isFetchingOptions ? (\n                    <ul className={styles.dropDownList}>\n                        <li>Loading...</li>\n                    </ul>\n                ) : (\n                    renderSuggestions()\n                )}\n            </div>\n        </OutsideAlerter>\n    )\n}\n"],"names":["OutsideAlerter","React","retryTenTimes","MobileSelect","_ref","options","currentPhilosopher","onChangeHandler","onFocusHandlerCallback","placeholder","value","isFetchingOptions","recentPhilosophers","darkMode","markedMode","suggestions","setSuggestions","useState","searchText","setSearchText","isFocused","setIsFocused","useEffect","scollToRef","useRef","length","_jsx","callback","children","_jsxs","className","styles","typeAheadDropDown","darkTheme","name","type","onFocus","e","onChange","target","regex","RegExp","filter","_ref2","fullName","test","onBlur","onBlurHandler","dropDownList","ref","map","_ref3","index","disabled","style","color","id","onClick","suggestionSelected","undefined"],"sourceRoot":""}