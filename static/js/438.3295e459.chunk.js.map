{"version":3,"file":"static/js/438.3295e459.chunk.js","mappings":"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","sources":["common/utils/lazyLoadUtils.js","common/utils/objectUtils.js","components/organisms/home/desktop/desktop-header/utils/utils.js","components/organisms/home/mobile/mobile-header/mobile-header.jsx","components/organisms/tools/select/select.js","components/organisms/tools/wordLengthSearch/wordLengthSearch.js"],"sourcesContent":["import { ALPHABETICAL, LATEST } from '../../components/organisms/home/home-page/constants/constants'\r\nimport { STATIC_OPTIONS } from '../../components/organisms/home/home-page/homePageRedux/initialState'\r\nimport { bringIntoAlphabeticalOrder, bringIntoOriginalOrder } from '../../components/organisms/home/home-page/utils/utils'\r\nimport { merge } from './objectUtils'\r\n\r\nexport const addOptionsDataIntoRedux = ({ newOptions, oldOptions, oldOriginalOptions, setOptions, setOriginalOptions }) => {\r\n    console.log('newOptions', newOptions, 'oldOptions', oldOptions)\r\n    let resultantOptions\r\n    resultantOptions = [...oldOptions, ...newOptions]\r\n    setOptions(resultantOptions)\r\n    setOriginalOptions([...STATIC_OPTIONS, ...newOptions])\r\n}\r\n\r\nexport const addResponseOptionsDataIntoRedux = ({ newOptions, oldOptions, oldOriginalOptions, setOptions, setOriginalOptions, sorting }) => {\r\n    const originalOptions = [...STATIC_OPTIONS, ...newOptions]\r\n    let resultantOptions = merge(oldOptions, [...originalOptions])\r\n    if (sorting === LATEST) {\r\n        resultantOptions = bringIntoOriginalOrder(originalOptions, resultantOptions)\r\n    } else if (sorting === ALPHABETICAL) {\r\n        resultantOptions = bringIntoAlphabeticalOrder(resultantOptions)\r\n    }\r\n    setOptions([...resultantOptions])\r\n    setOriginalOptions(originalOptions)\r\n}\r\n","import { getPhilosopherObjectIndex } from '../static/utils/utils'\r\n\r\nexport const merge = (oldOptions, newOptions) => {\r\n    let newOptionsCopy = JSON.parse(JSON.stringify(newOptions))\r\n    newOptionsCopy.forEach((element, newOptionindex) => {\r\n        const oldOptionIndex = getPhilosopherObjectIndex(element.value, oldOptions)\r\n        if (oldOptionIndex !== -1) {\r\n            newOptionsCopy[newOptionindex].quotes = oldOptions[oldOptionIndex].quotes\r\n        }\r\n    })\r\n    return newOptionsCopy\r\n}\r\n","import { getPhilosopherQuotes, lazyLoadAsset } from '../../../../../../common/static/utils/utils'\r\nimport { retryTenTimes } from '../../../../../../common/utils/apiUtils'\r\nimport { addResponseOptionsDataIntoRedux } from '../../../../../../common/utils/lazyLoadUtils'\r\nimport { scrollToMemorizedRow } from '../../../../../../common/utils/utils'\r\nimport { changeQuotesData } from '../../../quotes-list/utils/utils'\r\n\r\nexport function onPhilosopherSelectChange({ philosopher, listRef, setIsFetching, setStart, setEnd, setSearchText, setCurrentPhilosopher, currentData, setCurrentData, options, setOptions, setQuotesLoaded, markedMode, markedQuotes, setMarkedQuotes }) {\r\n    function callback() {\r\n        setCurrentPhilosopher(philosopher)\r\n        changeQuotesData({ philosopher, currentData, setCurrentData, options }, { markedMode, markedQuotes, setMarkedQuotes })\r\n        scrollToMemorizedRow(listRef, currentData, philosopher)\r\n        setIsFetching(false)\r\n    }\r\n    setStart(1)\r\n    setEnd('')\r\n    setSearchText('')\r\n    setIsFetching(true)\r\n\r\n    if (!getPhilosopherQuotes({ philosopher, options })) {\r\n        lazyLoadAsset(philosopher, { options, setOptions }, setQuotesLoaded, []).then(callback)\r\n    } else {\r\n        callback()\r\n    }\r\n}\r\n\r\nexport const onFocusHandler = async ({ options, setOptions, isFetchingOptions, setIsFetchingOptions, originalOptions, setOriginalOptions, sorting }) => {\r\n    // if (options.length === 1) {\r\n    setIsFetchingOptions && setIsFetchingOptions(true)\r\n    let response = await retryTenTimes(() => fetch('https://cdn.jsdelivr.net/gh/speed1992/quotes/src/common/static/philosophers-data.json'))\r\n    // let response = await retryTenTimes(() => fetch('https://raw.githubusercontent.com/speed1992/quotes/main/src/common/static/philosophers-data.json'))\r\n    response = await response.json()\r\n    addResponseOptionsDataIntoRedux({ newOptions: response, oldOptions: options, oldOriginalOptions: originalOptions, setOptions, setOriginalOptions, sorting })\r\n    setIsFetchingOptions && setIsFetchingOptions(false)\r\n    // }\r\n}\r\n","import React, { Suspense, useState } from 'react'\r\nimport { retryTenTimes } from '../../../../../common/utils/apiUtils'\r\nimport Select from '../../../tools/select/select'\r\nimport { WordLengthSearch } from '../../../tools/wordLengthSearch/wordLengthSearch'\r\nimport { onFocusHandler, onPhilosopherSelectChange } from '../../desktop/desktop-header/utils/utils'\r\nconst MobileMenu = React.lazy(() => retryTenTimes(() => import('../mobile-menu/mobile-menu')))\r\nconst Breadcrumb = React.lazy(() => retryTenTimes(() => import('../../../analysis/breadcrumb/breadcrumb')))\r\nconst UnreadCounter = React.lazy(() => retryTenTimes(() => import('../../../analysis/unread-counter/unread-counter')))\r\nconst QuotesFound = React.lazy(() => retryTenTimes(() => import('../../../analysis/quotes-found/quotes-found')))\r\n\r\nfunction MobileHeader({ listRef, setSearchText, searchText, start, end, setStart, setEnd, isFetching, setIsFetching, markedMode, setMarkedMode, markedQuotes, currentData, setCurrentData, currentPhilosopher, originalData, setCurrentPhilosopher, options, setOptions, setQuotesLoaded, darkMode, setDarkMode, setSorting, sorting, isFetchingOptions, setIsFetchingOptions, originalOptions, setOriginalOptions, userName, setUserName, setMarkedQuotes, isLoggedIn, setIsLoggedIn, password, setPassword }) {\r\n    const propsToSend = { start, end, setStart, setEnd, setSearchText, setCurrentData }\r\n    const [visible, toggleVisible] = useState(false)\r\n\r\n    return (\r\n        <div className=\"header\">\r\n            <div className=\"mobile-column\">\r\n                {visible && (\r\n                    <Suspense fallback={''}>\r\n                        <MobileMenu markedMode={markedMode} setMarkedMode={setMarkedMode} visible={visible} options={options} setOptions={setOptions} toggleVisible={toggleVisible} darkMode={darkMode} setDarkMode={setDarkMode} setSorting={setSorting} sorting={sorting} userName={userName} setUserName={setUserName} setMarkedQuotes={setMarkedQuotes} {...{ isLoggedIn, setIsLoggedIn, password, setPassword }} />\r\n                    </Suspense>\r\n                )}\r\n                <div style={{ paddingLeft: '0.5rem', paddingRight: '0.5rem' }} onClick={() => toggleVisible(!visible)}>\r\n                    ☰\r\n                </div>\r\n            </div>\r\n            <div className=\"mobile-column\">\r\n                <WordLengthSearch isMobile={true} listRef={listRef} {...propsToSend} />\r\n            </div>\r\n            <div className=\"mobile-column\">\r\n                <input data-testid=\"search-text\" className=\"wordSearch\" type=\"text\" placeholder=\"Search word\" value={searchText} onChange={({ target: { value } }) => setSearchText(value)} />\r\n            </div>\r\n            <div className=\"mobile-column\">\r\n                <Select isMobile={true} isFetchingOptions={isFetchingOptions} options={options} currentPhilosopher={currentPhilosopher} onFocusHandlerCallback={() => onFocusHandler({ options, setOptions, isFetchingOptions, setIsFetchingOptions, originalOptions, setOriginalOptions, sorting })} onChangeHandler={({ target: { value: philosopher } }) => onPhilosopherSelectChange({ philosopher, listRef, setIsFetching, setStart, setEnd, setSearchText, setCurrentPhilosopher, setCurrentData, options, setOptions, setQuotesLoaded })} />\r\n            </div>\r\n            <Suspense fallback={''}>\r\n                <Breadcrumb>\r\n                    <QuotesFound markedMode={markedMode} found={currentData.length} />\r\n                    {markedMode && <UnreadCounter isFetching={isFetching} currentData={currentData} originalData={originalData} markedQuotes={markedQuotes} currentPhilosopher={currentPhilosopher} isFetchingOptions={isFetchingOptions} />}\r\n                </Breadcrumb>\r\n            </Suspense>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MobileHeader\r\n","import React, { Suspense } from 'react'\r\nimport { getCurrentPhilosopherFullname } from '../../../../common/static/utils/utils'\r\nimport { retryTenTimes } from '../../../../common/utils/apiUtils'\r\nimport './select.css'\r\nconst DesktopSelect = React.lazy(() => retryTenTimes(() => import('../../home/desktop/desktop-select/desktop-select')))\r\nconst MobileSelect = React.lazy(() => retryTenTimes(() => import('../../home/mobile/mobile-select/mobile-select')))\r\n\r\nconst Select = ({ options, currentPhilosopher, onChangeHandler, onFocusHandlerCallback, isMobile, isFetchingOptions }) => {\r\n    const renderSelect = () => {\r\n        if (isMobile) {\r\n            return (\r\n                <Suspense fallback={''}>\r\n                    <MobileSelect onFocusHandlerCallback={onFocusHandlerCallback} onChangeHandler={onChangeHandler} currentPhilosopher={currentPhilosopher} value={getCurrentPhilosopherFullname(currentPhilosopher, options)} placeholder={'Search philosopher'} options={options} isFetchingOptions={isFetchingOptions} />\r\n                </Suspense>\r\n            )\r\n        } else {\r\n            return (\r\n                <Suspense fallback={''}>\r\n                    <DesktopSelect onFocusHandler={onFocusHandlerCallback} onChangeHandler={onChangeHandler} options={options} currentPhilosopher={currentPhilosopher} isFetchingOptions={isFetchingOptions} />\r\n                </Suspense>\r\n            )\r\n        }\r\n    }\r\n\r\n    return renderSelect()\r\n}\r\n\r\nexport default Select\r\n","import React from 'react'\r\nimport { retryTenTimes } from '../../../../common/utils/apiUtils'\r\nimport './wordLengthSearch.css'\r\nconst DesktopWordLengthSearch = React.lazy(() => retryTenTimes(() => import('../../home/desktop/desktop-word-length-search/desktop-word-length-search')))\r\n\r\nexport function WordLengthSearch({ start, end, setStart, setEnd, setSearchText, isMobile }) {\r\n    const renderComponent = () => {\r\n        if (isMobile) {\r\n            return (\r\n                <>\r\n                    <input className=\"smallInput\" key=\"start\" name=\"start\" type=\"number\" min=\"1\" value={start} onChange={({ target: { value } }) => setStart(value)} />\r\n                    <input className=\"smallInput\" key=\"end\" name=\"end\" type=\"number\" min=\"0\" value={end} onChange={({ target: { value } }) => setEnd(value)} />\r\n                </>\r\n            )\r\n        } else {\r\n            return <DesktopWordLengthSearch start={start} setStart={setStart} end={end} setEnd={setEnd} />\r\n        }\r\n    }\r\n    return renderComponent()\r\n}\r\n"],"names":["addResponseOptionsDataIntoRedux","newOptions","oldOptions","setOptions","oldOriginalOptions","setOriginalOptions","sorting","originalOptions","STATIC_OPTIONS","resultantOptions","newOptionsCopy","JSON","parse","stringify","forEach","element","newOptionindex","oldOptionIndex","getPhilosopherObjectIndex","value","quotes","merge","LATEST","bringIntoOriginalOrder","ALPHABETICAL","bringIntoAlphabeticalOrder","onPhilosopherSelectChange","philosopher","listRef","setIsFetching","setStart","setEnd","setSearchText","setCurrentPhilosopher","currentData","setCurrentData","options","setQuotesLoaded","markedMode","markedQuotes","setMarkedQuotes","callback","changeQuotesData","scrollToMemorizedRow","getPhilosopherQuotes","lazyLoadAsset","then","onFocusHandler","isFetchingOptions","setIsFetchingOptions","retryTenTimes","fetch","response","json","MobileMenu","React","Breadcrumb","UnreadCounter","QuotesFound","searchText","start","end","isFetching","setMarkedMode","currentPhilosopher","originalData","darkMode","setDarkMode","setSorting","userName","setUserName","isLoggedIn","setIsLoggedIn","password","setPassword","propsToSend","useState","visible","toggleVisible","className","Suspense","fallback","style","paddingLeft","paddingRight","onClick","isMobile","type","placeholder","onChange","target","onFocusHandlerCallback","onChangeHandler","found","length","DesktopSelect","MobileSelect","getCurrentPhilosopherFullname","DesktopWordLengthSearch","WordLengthSearch","name","min"],"sourceRoot":""}