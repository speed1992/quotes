{"version":3,"file":"static/js/890.9f0313f7.chunk.js","mappings":"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","sources":["common/utils/commonUtils.js","common/utils/dateUtils.js","common/utils/localStorageUtils.js","common/utils/staticDataUtils.js","common/utils/urlUtils.js","common/web-workers/worker.js","webpack://quotes/./src/components/organisms/analysis/table/table.module.css?59c5","components/organisms/analysis/table/TableBody.js","components/organisms/analysis/table/TableHead.js","components/organisms/analysis/table/useSortableTable.js","components/organisms/analysis/table/table.jsx","components/organisms/analysis/report/utils/utils.js","components/organisms/analysis/report/report.js","common/settings/constants.js","common/utils/objectUtils.js","common/utils/lazyLoadUtils.js","components/organisms/home/desktop/desktop-header/utils/utils.js","components/organisms/home/home-page/constants/constants.js","components/organisms/home/home-page/utils/utils.js","components/organisms/home/mobile/mobile-menu/utils/utils.js","components/organisms/home/quotes-list/utils/utils.js"],"sourcesContent":["export const isUndefined = (value) => typeof value === 'undefined'\r\nexport const isObjEmpty = (obj) => Object.values(obj).length === 0 && obj.constructor === Object\r\n\r\nexport function uuidv4() {\r\n    return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, (c) => (c ^ (crypto.getRandomValues(new Uint8Array(1))[0] & (15 >> (c / 4)))).toString(16))\r\n}\r\n","import { checkQueryParams } from './urlUtils'\r\n\r\nconst CACHE_TIME_IN_DAYS = 15\r\n\r\nexport const isCacheExpired = (startDate, setLogs = null) => {\r\n    startDate = new Date(startDate)\r\n    const endDate = new Date()\r\n    const dateDifferenceInMilliSeconds = endDate.getTime() - startDate.getTime()\r\n    const dateDifferenceInDays = Math.floor(dateDifferenceInMilliSeconds / (1000 * 60 * 60 * 24))\r\n    if (setLogs && checkQueryParams('dev')) {\r\n        setLogs('inside isCacheExpired ' + endDate)\r\n        setLogs('startDate ' + startDate)\r\n        setLogs('endDate ' + endDate)\r\n        setLogs('dateDifferenceInMilliSeconds endDate.getTime() - startDate.getTime() ' + dateDifferenceInMilliSeconds)\r\n        setLogs('dateDifference In hours ' + Math.floor((dateDifferenceInMilliSeconds / (1000 * 60 * 60)) % 24))\r\n        setLogs('dateDifferenceInDays ' + dateDifferenceInDays)\r\n        setLogs('dateDifferenceInDays >= CACHE_TIME_IN_DAYS ' + dateDifferenceInDays >= CACHE_TIME_IN_DAYS)\r\n        setLogs('CACHE_TIME_IN_DAYS ' + CACHE_TIME_IN_DAYS)\r\n    }\r\n    return dateDifferenceInDays >= CACHE_TIME_IN_DAYS\r\n}\r\n\r\nexport const getDifferenceFromCurrentDate = (date2) => {\r\n    const date1 = new Date()\r\n    return date2.getTime() - date1.getTime()\r\n}\r\n","import { useEffect, useState } from 'react'\r\n\r\nexport function getStorageValue(key, defaultValue) {\r\n    const saved = localStorage.getItem(key)\r\n    const initial = JSON.parse(saved)\r\n    if (initial === undefined || initial === 'undefined' || initial === 'null' || initial === null) {\r\n        return defaultValue\r\n    } else return initial\r\n}\r\n\r\nexport function setStorageValue(key, value) {\r\n    localStorage.setItem(key, JSON.stringify(value))\r\n}\r\n\r\nexport const useLocalStorage = (key, defaultValue) => {\r\n    const [value, setValue] = useState(() => {\r\n        return getStorageValue(key, defaultValue)\r\n    })\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem(key, JSON.stringify(value))\r\n    }, [key, value])\r\n\r\n    return [value, setValue]\r\n}\r\n","import { getStorageValue } from './localStorageUtils'\r\n\r\nexport const removeReadData = ({ index, currentPhilosopher, markedMode, markedQuotes = {}, setMarkedQuotes, currentData, setCurrentData }) => {\r\n    let newMarkedQuotes = JSON.parse(JSON.stringify(markedQuotes))\r\n    let readQuotesArray = []\r\n\r\n    const READ_ARRAY_LOCALSTORAGE_KEY = `${currentPhilosopher}-MARKED_AS_READ`\r\n    readQuotesArray = getStorageValue(READ_ARRAY_LOCALSTORAGE_KEY, [])\r\n\r\n    if (markedQuotes && markedQuotes[currentPhilosopher] !== undefined) {\r\n        readQuotesArray = [...readQuotesArray, ...markedQuotes[currentPhilosopher]]\r\n    }\r\n\r\n    readQuotesArray = [...new Set(readQuotesArray)]\r\n\r\n    if (index) {\r\n        readQuotesArray.push(index)\r\n    }\r\n\r\n    newMarkedQuotes[currentPhilosopher] = readQuotesArray\r\n    setMarkedQuotes(newMarkedQuotes)\r\n\r\n    const newData = currentData.filter(({ id }, _) => readQuotesArray.indexOf(id) === -1)\r\n    setCurrentData(JSON.parse(JSON.stringify(newData)))\r\n}\r\n","export function getQueryParams(qs) {\r\n    qs = qs.split('+').join(' ')\r\n\r\n    var params = {},\r\n        tokens,\r\n        re = /[?&]?([^=]+)=([^&]*)/g\r\n    while ((tokens = re.exec(qs))) {\r\n        params[decodeURIComponent(tokens[1])] = decodeURIComponent(tokens[2])\r\n    }\r\n\r\n    return params\r\n}\r\n\r\nexport function checkQueryParams(param) {\r\n    let query = getQueryParams(document.location.search)\r\n    let val = query[param] ? query[param].toLowerCase() : null\r\n    if (val === 'false' || val) return true\r\n    else return false\r\n}\r\n","export let worker\r\nif (window.Worker) {\r\n    worker = new Worker(new URL('./filter-worker.js', import.meta.url))\r\n} else {\r\n    alert(\"Your browser doesn't support web workers.\")\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"table\":\"table_table__DjpbW\",\"tableHeading\":\"table_tableHeading__bQNPH\",\"tableColumn\":\"table_tableColumn__X9yJG\"};","import styles from './table.module.css'\r\n\r\nconst TableBody = ({ tableData, columns }) => {\r\n    return (\r\n        <tbody>\r\n            {tableData.map((data) => {\r\n                return (\r\n                    <tr key={data.id}>\r\n                        {columns.map(({ accessor }) => {\r\n                            const tData = data[accessor] ? data[accessor] : '——'\r\n                            return (\r\n                                <td className={styles.tableColumn} key={accessor}>\r\n                                    {tData}\r\n                                </td>\r\n                            )\r\n                        })}\r\n                    </tr>\r\n                )\r\n            })}\r\n        </tbody>\r\n    )\r\n}\r\n\r\nexport default TableBody\r\n","import { useState } from 'react'\r\nimport styles from './table.module.css'\r\n\r\nconst TableHead = ({ columns, handleSorting }) => {\r\n    const [sortField, setSortField] = useState('')\r\n    const [order, setOrder] = useState('asc')\r\n\r\n    const handleSortingChange = (accessor) => {\r\n        const sortOrder = accessor === sortField && order === 'asc' ? 'desc' : 'asc'\r\n        setSortField(accessor)\r\n        setOrder(sortOrder)\r\n        handleSorting(accessor, sortOrder)\r\n    }\r\n\r\n    return (\r\n        <thead>\r\n            <tr>\r\n                {columns.map(({ label, accessor, sortable }) => {\r\n                    const cl = sortable ? (sortField === accessor && order === 'asc' ? 'up' : sortField === accessor && order === 'desc' ? 'down' : 'default') : ''\r\n                    return (\r\n                        <th className={`${styles.tableHeading} ${cl}`} key={accessor} onClick={sortable ? () => handleSortingChange(accessor) : null}>\r\n                            {label}\r\n                        </th>\r\n                    )\r\n                })}\r\n            </tr>\r\n        </thead>\r\n    )\r\n}\r\n\r\nexport default TableHead\r\n","import { useEffect, useState } from 'react'\r\n\r\nfunction getDefaultSorting(defaultTableData, columns) {\r\n    const sorted = [...defaultTableData].sort((a, b) => {\r\n        const filterColumn = columns.filter((column) => column.sortbyOrder)\r\n\r\n        let { accessor = 'id', sortbyOrder = 'asc' } = Object.assign({}, ...filterColumn)\r\n\r\n        if (a[accessor] === null) return 1\r\n        if (b[accessor] === null) return -1\r\n        if (a[accessor] === null && b[accessor] === null) return 0\r\n\r\n        const ascending = a[accessor].toString().localeCompare(b[accessor].toString(), 'en', {\r\n            numeric: true,\r\n        })\r\n\r\n        return sortbyOrder === 'asc' ? ascending : -ascending\r\n    })\r\n    return sorted\r\n}\r\n\r\nexport const useSortableTable = (data, columns) => {\r\n    const [tableData, setTableData] = useState([])\r\n\r\n    useEffect(() => {\r\n        setTableData(getDefaultSorting(data, columns))\r\n    }, [data])\r\n\r\n    const handleSorting = (sortField, sortOrder) => {\r\n        if (sortField) {\r\n            const sorted = [...tableData].sort((a, b) => {\r\n                if (a[sortField] === null) return 1\r\n                if (b[sortField] === null) return -1\r\n                if (a[sortField] === null && b[sortField] === null) return 0\r\n                return (\r\n                    a[sortField].toString().localeCompare(b[sortField].toString(), 'en', {\r\n                        numeric: true,\r\n                    }) * (sortOrder === 'asc' ? 1 : -1)\r\n                )\r\n            })\r\n            setTableData(sorted)\r\n        }\r\n    }\r\n\r\n    return [tableData, handleSorting]\r\n}\r\n","import styles from './table.module.css'\r\nimport TableBody from './TableBody'\r\nimport TableHead from './TableHead'\r\nimport { useSortableTable } from './useSortableTable'\r\n\r\nconst Table = ({ data, columns }) => {\r\n    const [tableData, handleSorting] = useSortableTable(data, columns)\r\n\r\n    return (\r\n        <>\r\n            <table className={styles.table}>\r\n                <TableHead {...{ columns, handleSorting }} />\r\n                <TableBody {...{ columns, tableData }} />\r\n            </table>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Table\r\n","import { getPhilosopherObjectIndex } from '../../../../../common/static/utils/utils'\r\nimport { isUndefined, uuidv4 } from '../../../../../common/utils/commonUtils'\r\nimport { getPhilosopherFullName } from '../../../home/quotes-list/utils/utils'\r\n\r\nexport const createData = ({ markedQuotes, options, setData }) => {\r\n    const data = []\r\n    let sum = 0\r\n    for (const key in markedQuotes) {\r\n        if (markedQuotes.hasOwnProperty(key) && getPhilosopherObjectIndex(key, options) !== -1) {\r\n            let readCount = 0\r\n            if (!isUndefined(markedQuotes[key])) {\r\n                readCount = markedQuotes[key].length\r\n                sum += readCount\r\n            }\r\n            const obj = { philosopher: getPhilosopherFullName({ currentPhilosopher: key, options }), readCount: readCount, id: uuidv4() }\r\n            data.push(obj)\r\n        }\r\n    }\r\n    const obj = { philosopher: 'Total Read', readCount: sum, id: uuidv4() }\r\n    data.push(obj)\r\n    setData(data)\r\n}\r\n","import { useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { onFocusHandler as getPhilosopherJSON } from '../../home/desktop/desktop-header/utils/utils'\r\nimport { setOptionsRedux, setOriginalOptionsRedux } from '../../home/home-page/homePageRedux/homePageRedux'\r\nimport { setThemeClassNameOnHTMLTag } from '../../home/home-page/utils/utils'\r\nimport Table from '../table/table'\r\nimport columns from './columns.json'\r\nimport { createData } from './utils/utils'\r\n\r\nconst Report = () => {\r\n    const [data, setData] = useState([])\r\n    const dispatch = useDispatch()\r\n    const markedQuotes = useSelector((state) => state.philosophersData.markedQuotes)\r\n    const options = useSelector((state) => state.philosophersData.options)\r\n    const darkMode = useSelector((state) => state.philosophersData.darkMode)\r\n    const originalOptions = useSelector((state) => state?.philosophersData?.originalOptions)\r\n    const setOriginalOptions = (value) => dispatch(setOriginalOptionsRedux(value))\r\n    const setOptions = (value) => dispatch(setOptionsRedux(value))\r\n    const sorting = useSelector((state) => state.philosophersData.sorting)\r\n\r\n    useEffect(() => {\r\n        getPhilosopherJSON({ options, setOptions, originalOptions, setOriginalOptions, sorting })\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        createData({ markedQuotes, options, setData })\r\n    }, [options.length])\r\n\r\n    useEffect(() => {\r\n        setThemeClassNameOnHTMLTag(darkMode)\r\n    }, [darkMode])\r\n\r\n    return data.length > 0 ? (\r\n        <Table data={data} columns={columns} />\r\n    ) : (\r\n        <>\r\n            <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', height: '100vh', fontSize: '2rem', margin: '3rem' }}>No records found!</div>\r\n            <div style={{ fontSize: '2rem', margin: '3rem' }}>Please use, marked mode feature, mark quotes as read and come back.</div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Report\r\n","export const MAX_RECENT_PHILOSOPHERS = 8\r\n","import { getPhilosopherObjectIndex } from '../static/utils/utils'\r\n\r\nexport const merge = (oldOptions, newOptions) => {\r\n    let newOptionsCopy = JSON.parse(JSON.stringify(newOptions))\r\n    newOptionsCopy.forEach((element, newOptionindex) => {\r\n        const oldOptionIndex = getPhilosopherObjectIndex(element.value, oldOptions)\r\n        if (oldOptionIndex !== -1) {\r\n            newOptionsCopy[newOptionindex].quotes = oldOptions[oldOptionIndex].quotes\r\n        }\r\n    })\r\n    return newOptionsCopy\r\n}\r\n","import { ALPHABETICAL, LATEST } from '../../components/organisms/home/home-page/constants/constants'\r\nimport { STATIC_OPTIONS } from '../../components/organisms/home/home-page/homePageRedux/initialState'\r\nimport { bringIntoAlphabeticalOrder, bringIntoOriginalOrder } from '../../components/organisms/home/home-page/utils/utils'\r\nimport { merge } from './objectUtils'\r\n\r\nexport const addOptionsDataIntoRedux = ({ newOptions, oldOptions, oldOriginalOptions, setOptions, setOriginalOptions }) => {\r\n    let resultantOptions\r\n    resultantOptions = [...oldOptions, ...newOptions]\r\n    setOptions(resultantOptions)\r\n    setOriginalOptions([...STATIC_OPTIONS, ...newOptions])\r\n}\r\n\r\nexport const addResponseOptionsDataIntoRedux = ({ newOptions, oldOptions, oldOriginalOptions, setOptions, setOriginalOptions, sorting }) => {\r\n    const originalOptions = [...STATIC_OPTIONS, ...newOptions]\r\n    let resultantOptions = merge(oldOptions, [...originalOptions])\r\n    if (sorting === LATEST) {\r\n        resultantOptions = bringIntoOriginalOrder(originalOptions, resultantOptions)\r\n    } else if (sorting === ALPHABETICAL) {\r\n        resultantOptions = bringIntoAlphabeticalOrder(resultantOptions)\r\n    }\r\n    setOptions([...resultantOptions])\r\n    setOriginalOptions(originalOptions)\r\n}\r\n","import { API_ENDPOINTS } from '../../../../../../common/apis/apiEndpoints'\r\nimport { MAX_RECENT_PHILOSOPHERS } from '../../../../../../common/settings/constants'\r\nimport { getPhilosopherQuotes, lazyLoadAsset } from '../../../../../../common/static/utils/utils'\r\nimport { retryTenTimes } from '../../../../../../common/utils/apiUtils'\r\nimport { isCacheExpired } from '../../../../../../common/utils/dateUtils'\r\nimport { addResponseOptionsDataIntoRedux } from '../../../../../../common/utils/lazyLoadUtils'\r\nimport { checkQueryParams } from '../../../../../../common/utils/urlUtils'\r\nimport { changeQuotesData } from '../../../quotes-list/utils/utils'\r\n\r\nexport function onPhilosopherSelectChange({ philosopher, listRef, setIsFetching, setStart, setEnd, setSearchText, setCurrentPhilosopher, currentData, setCurrentData, options, setOptions, markedMode, markedQuotes, setMarkedQuotes, scrollPosition, setRowsRendered, recentPhilosophers, setRecentPhilosophers, setIsFirstLoad }) {\r\n    function callback() {\r\n        if (recentPhilosophers) setRecentPhilosophers([...new Set([philosopher, ...recentPhilosophers.slice(0, MAX_RECENT_PHILOSOPHERS - 1)])])\r\n        setCurrentPhilosopher(philosopher)\r\n        changeQuotesData({ philosopher, currentData, setCurrentData, options }, { markedMode, markedQuotes, setMarkedQuotes })\r\n        setIsFetching(false)\r\n        setIsFirstLoad(true)\r\n    }\r\n    setStart(1)\r\n    setEnd('')\r\n    setSearchText('')\r\n    setIsFetching(true)\r\n\r\n    if (!getPhilosopherQuotes({ philosopher, options })) {\r\n        lazyLoadAsset(philosopher, { options, setOptions }, []).then(callback)\r\n    } else {\r\n        callback()\r\n    }\r\n}\r\n\r\nexport const onFocusHandler = async ({ options, setOptions, isLoggedIn, setSyncDate, isFetchingOptions, setIsFetchingOptions, originalOptions, setOriginalOptions, sorting, syncDate, setLogs }) => {\r\n    if (checkQueryParams('dev')) {\r\n        const today = new Date()\r\n        setLogs('inside onFocusHandler')\r\n        setLogs('isCacheExpired(syncDate, setLogs) || options.length === 1 ' + isCacheExpired(syncDate, setLogs) || options.length === 1)\r\n        setLogs('options.length ' + options.length)\r\n        setLogs('current time ' + today)\r\n        setLogs('syncDate ' + new Date(syncDate))\r\n    }\r\n    if (isCacheExpired(syncDate, setLogs) || options.length === 1) {\r\n        setIsFetchingOptions?.(true)\r\n        let response = await retryTenTimes(() => fetch(API_ENDPOINTS.STATIC_DATA.STATIC_ASSET_GRAPH))\r\n        response = await response.json()\r\n        if (checkQueryParams('dev')) setLogs('api response ' + response)\r\n        addResponseOptionsDataIntoRedux({ newOptions: response, oldOptions: options, oldOriginalOptions: originalOptions, setOptions, setOriginalOptions, sorting })\r\n        setIsFetchingOptions?.(false)\r\n        setSyncDate?.(Date.now())\r\n    }\r\n}\r\n","export const LATEST = 'latest'\r\nexport const ALPHABETICAL = 'alphabetical'\r\n","import { getPhilosopherData } from '../../../../../common/static/utils/utils'\r\nimport { getUserDetails, getUserMarkedQuotesCount, sendUserDetails } from '../../mobile/mobile-menu/utils/utils'\r\n\r\nexport const setThemeClassNameOnHTMLTag = (value) => {\r\n    let root = document.getElementsByTagName('html')[0]\r\n    root.className = ''\r\n    if (value) {\r\n        root.classList.add('darkTheme')\r\n    } else {\r\n        root.classList.add('lightTheme')\r\n    }\r\n}\r\n\r\nexport const bringIntoOriginalOrder = (originalOptions, newOptions) => originalOptions.map((item) => getPhilosopherData({ philosopher: item.value, options: newOptions })).reverse()\r\n\r\nexport const bringIntoAlphabeticalOrder = (options) => [...options].sort((a, b) => a.fullName.localeCompare(b.fullName))\r\n\r\nexport async function compareWithServerSyncDatesAndMakeAnAPICall(userName, markedQuotes, openSnackbar, setMarkedQuotes, setRestoreQuotesFromServerCachedDate, markedQuoteClientCount) {\r\n    const markedQuotesFromServerCount = await getUserMarkedQuotesCount({ userName })\r\n    if (markedQuotesFromServerCount) {\r\n        if (markedQuotesFromServerCount > markedQuoteClientCount) {\r\n            let { markedQuotesFromServer } = await getUserDetails({ userName, openSnackbar })\r\n            setMarkedQuotes(markedQuotesFromServer)\r\n            openSnackbar('Auto-Sync : Restored all marked quotes!', 4000)\r\n        } else if (markedQuoteClientCount > markedQuotesFromServerCount) {\r\n            await sendUserDetails({ userName, markedQuotes, openSnackbar })\r\n            // openSnackbar('Auto-Sync : Synced marked quotes with server database!', 4000)\r\n        }\r\n        setRestoreQuotesFromServerCachedDate(Date.now())\r\n    }\r\n}\r\n","import { API_ENDPOINTS } from '../../../../../../common/apis/apiEndpoints'\r\nimport { retryTenTimes } from '../../../../../../common/utils/apiUtils'\r\n\r\nexport const sendUserDetails = async ({ userName, markedQuotes, openSnackbar, setSyncDate }) => {\r\n    await retryTenTimes(async () => {\r\n        return await fetch(API_ENDPOINTS.MARKED_QUOTES.BACKUP, {\r\n            method: 'post',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({\r\n                userName,\r\n                markedQuotes,\r\n                dateSynced: Date.now(),\r\n            }),\r\n        })\r\n    })\r\n}\r\n\r\nexport const getUserDetails = async ({ userName, openSnackbar }) => {\r\n    let response = await retryTenTimes(\r\n        async () =>\r\n            await fetch(API_ENDPOINTS.MARKED_QUOTES.RESTORE, {\r\n                method: 'post',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({\r\n                    userName,\r\n                }),\r\n            })\r\n    )\r\n\r\n    response = await response.json()\r\n    if (response?.ok) {\r\n        try {\r\n            const markedQuotesFromServer = response?.results?.[0]?.markedQuotes\r\n            const markedQuotesFromServerCount = Object.values(markedQuotesFromServer).flat().length\r\n            if (markedQuotesFromServer && markedQuotesFromServerCount > 0) {\r\n                return { markedQuotesFromServer, dateFromServer: response?.results?.[0]?.dateSynced }\r\n                // setMarkedQuotes(response?.results?.[0]?.markedQuotes)\r\n            }\r\n        } catch (error) {\r\n            openSnackbar(JSON.stringify(error))\r\n        }\r\n    } else {\r\n        openSnackbar(JSON.stringify(response.error))\r\n    }\r\n}\r\n\r\nexport const getUserMarkedQuotesCount = async ({ userName }) => {\r\n    let response = await retryTenTimes(\r\n        async () =>\r\n            await fetch(API_ENDPOINTS.MARKED_QUOTES.GET_COUNT, {\r\n                method: 'post',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({\r\n                    userName,\r\n                }),\r\n            })\r\n    )\r\n\r\n    response = await response.json()\r\n    if (response?.ok) {\r\n        return response.count\r\n    } else {\r\n        return null\r\n    }\r\n}\r\n\r\nexport const loginRegister = async ({ apiCallType, userName, password, setIsLoggedIn, openSnackbar, setIsFetching }) => {\r\n    const capitalizedUserName = userName.charAt(0).toUpperCase() + userName.slice(1)\r\n    let response\r\n    setIsFetching(true)\r\n    if (apiCallType === 'login') {\r\n        response = await retryTenTimes(\r\n            async () =>\r\n                await fetch(API_ENDPOINTS.USER.LOGIN, {\r\n                    method: 'post',\r\n                    headers: { 'Content-Type': 'application/json' },\r\n                    body: JSON.stringify({\r\n                        userName,\r\n                        password,\r\n                    }),\r\n                })\r\n        )\r\n    } else {\r\n        response = await retryTenTimes(\r\n            async () =>\r\n                await fetch(API_ENDPOINTS.USER.CREATE, {\r\n                    method: 'post',\r\n                    headers: { 'Content-Type': 'application/json' },\r\n                    body: JSON.stringify({\r\n                        userName,\r\n                        password,\r\n                    }),\r\n                })\r\n        )\r\n    }\r\n\r\n    response = await response.json()\r\n    setIsFetching(false)\r\n\r\n    if (response?.ok) {\r\n        setIsLoggedIn(true)\r\n        openSnackbar(capitalizedUserName + ' ' + JSON.stringify(response.serverResponse))\r\n    } else {\r\n        openSnackbar(JSON.stringify(response.error))\r\n    }\r\n}\r\n","import { isObjEmpty } from '../../../../../common/utils/commonUtils'\r\nimport { removeReadData } from '../../../../../common/utils/staticDataUtils'\r\nimport { worker } from '../../../../../common/web-workers/worker'\r\n\r\nexport const changeQuotesData = ({ currentPhilosopher, currentData, setCurrentData, options }, { markedMode = null, markedQuotes, setMarkedQuotes }) => {\r\n    if (currentData) setCurrentData(currentData)\r\n    if (markedMode !== undefined && markedMode) removeReadData({ currentPhilosopher, markedMode, markedQuotes, setMarkedQuotes, currentData, setCurrentData })\r\n}\r\n\r\nexport const getPhilosopherFullName = ({ currentPhilosopher, options }) => {\r\n    const currentIndex = options.filter(({ value }) => currentPhilosopher === value)\r\n    if (!isObjEmpty(currentIndex)) return currentIndex && currentIndex[0].fullName\r\n}\r\n\r\nexport const getPhilosopherFullName_i10n = ({ currentPhilosopher, options }) => {\r\n    const currentIndex = options.filter(({ value }) => currentPhilosopher === value)\r\n    if (!isObjEmpty(currentIndex)) return currentIndex && currentIndex[0].fullNameInOtherLanguages\r\n}\r\n\r\nexport const searchByWordLength = async (start, end, quotes, { markedMode, markedQuotes, setMarkedQuotes }, { setCurrentData, currentPhilosopher }) => {\r\n    return new Promise((resolve) => {\r\n        if (quotes !== undefined) {\r\n            if (typeof start === 'string' && start.trim() === '') start = 0\r\n            worker.postMessage({ quotes, end, start, filterName: 'wordCountFilter' })\r\n            worker.onmessage = (event) => {\r\n                const newData = JSON.parse(eval(`(${JSON.stringify(event.data)})`))\r\n                changeQuotesData({ currentData: newData, setCurrentData, currentPhilosopher }, { markedMode, markedQuotes, setMarkedQuotes })\r\n                resolve()\r\n            }\r\n        }\r\n    })\r\n}\r\n\r\nexport function getWordCount(str) {\r\n    return str.split(' ').filter(function (n) {\r\n        return n !== ''\r\n    }).length\r\n}\r\n"],"names":["isUndefined","value","isObjEmpty","obj","Object","values","length","constructor","uuidv4","replace","c","crypto","getRandomValues","Uint8Array","toString","isCacheExpired","startDate","setLogs","arguments","undefined","Date","endDate","dateDifferenceInMilliSeconds","getTime","dateDifferenceInDays","Math","floor","checkQueryParams","getStorageValue","key","defaultValue","saved","localStorage","getItem","initial","JSON","parse","removeReadData","_ref","index","currentPhilosopher","markedMode","markedQuotes","setMarkedQuotes","currentData","setCurrentData","newMarkedQuotes","stringify","readQuotesArray","READ_ARRAY_LOCALSTORAGE_KEY","concat","Set","push","newData","filter","_ref2","_","id","indexOf","param","query","qs","split","join","tokens","params","re","exec","decodeURIComponent","getQueryParams","document","location","search","val","toLowerCase","worker","window","Worker","URL","alert","tableData","columns","_jsx","children","map","data","accessor","tData","className","styles","handleSorting","sortField","setSortField","useState","order","setOrder","label","sortable","cl","onClick","sortOrder","handleSortingChange","useSortableTable","setTableData","useEffect","defaultTableData","sort","a","b","filterColumn","column","sortbyOrder","assign","ascending","localeCompare","numeric","getDefaultSorting","sorted","_Fragment","_jsxs","TableHead","TableBody","Report","setData","dispatch","useDispatch","useSelector","state","philosophersData","options","darkMode","originalOptions","_state$philosophersDa","setOriginalOptions","setOriginalOptionsRedux","setOptions","setOptionsRedux","sorting","getPhilosopherJSON","sum","hasOwnProperty","getPhilosopherObjectIndex","readCount","philosopher","getPhilosopherFullName","createData","setThemeClassNameOnHTMLTag","Table","style","display","alignItems","justifyContent","height","fontSize","margin","MAX_RECENT_PHILOSOPHERS","addResponseOptionsDataIntoRedux","newOptions","oldOptions","oldOriginalOptions","STATIC_OPTIONS","resultantOptions","merge","newOptionsCopy","forEach","element","newOptionindex","oldOptionIndex","quotes","LATEST","bringIntoOriginalOrder","ALPHABETICAL","bringIntoAlphabeticalOrder","onPhilosopherSelectChange","listRef","setIsFetching","setStart","setEnd","setSearchText","setCurrentPhilosopher","scrollPosition","setRowsRendered","recentPhilosophers","setRecentPhilosophers","setIsFirstLoad","callback","slice","changeQuotesData","getPhilosopherQuotes","lazyLoadAsset","then","onFocusHandler","async","isLoggedIn","setSyncDate","isFetchingOptions","setIsFetchingOptions","syncDate","today","response","retryTenTimes","fetch","API_ENDPOINTS","STATIC_DATA","STATIC_ASSET_GRAPH","json","now","root","getElementsByTagName","classList","add","item","getPhilosopherData","reverse","fullName","compareWithServerSyncDatesAndMakeAnAPICall","userName","openSnackbar","setRestoreQuotesFromServerCachedDate","markedQuoteClientCount","markedQuotesFromServerCount","getUserMarkedQuotesCount","markedQuotesFromServer","getUserDetails","sendUserDetails","MARKED_QUOTES","BACKUP","method","headers","body","dateSynced","_response","RESTORE","ok","_response2","_response2$results","_response2$results$","results","flat","_response3","_response3$results","_response3$results$","dateFromServer","error","_response4","_ref3","GET_COUNT","count","loginRegister","_response5","apiCallType","password","setIsLoggedIn","_ref4","capitalizedUserName","charAt","toUpperCase","USER","LOGIN","CREATE","serverResponse","currentIndex","getPhilosopherFullName_i10n","_ref5","_ref6","fullNameInOtherLanguages","searchByWordLength","start","end","_ref7","_ref8","Promise","resolve","trim","postMessage","filterName","onmessage","event","eval","getWordCount","str","n"],"sourceRoot":""}