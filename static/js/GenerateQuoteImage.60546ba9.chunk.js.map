{"version":3,"file":"static/js/GenerateQuoteImage.60546ba9.chunk.js","mappings":"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","sources":["common/components/snackbar/useSnackbar.js","common/utils/commonUtils.js","common/utils/localStorageUtils.js","common/utils/staticDataUtils.js","components/organisms/analysis/generate-quote-image/utils/utils.js","components/organisms/analysis/generate-quote-image/utils/hooks.js","components/organisms/analysis/generate-quote-image/generateQuoteImage.js","components/organisms/home/home-page/utils/utils.js","components/organisms/home/mobile/mobile-menu/utils/utils.js","components/organisms/home/quotes-list/utils/utils.js","webpack://quotes/./src/components/organisms/tools/exclusions-inclusions/exclusions-inclusions.module.css?f7e9","components/organisms/tools/exclusions-inclusions/exclusions-inclusions.js","common/static/assets/images/philosophers|sync|/^/.*$"],"sourcesContent":["// dispatch(setSnackabrMessage('Are you an idiot?'))\r\n\r\nimport { useDispatch } from 'react-redux'\r\nimport { setSnackabrMessage } from './snackbarRedux'\r\n\r\nconst useSnackbar = () => {\r\n    const dispatch = useDispatch()\r\n    const openSnackbar = (text, timeout = 1400) => {\r\n        dispatch(setSnackabrMessage(text))\r\n        setTimeout(() => dispatch(setSnackabrMessage('')), timeout)\r\n    }\r\n    return [openSnackbar]\r\n}\r\n\r\nexport default useSnackbar\r\n","export const isUndefined = (value) => typeof value === 'undefined'\r\nexport const isObjEmpty = (obj) => Object.values(obj).length === 0 && obj.constructor === Object\r\n\r\nexport function uuidv4() {\r\n    return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, (c) => (c ^ (crypto.getRandomValues(new Uint8Array(1))[0] & (15 >> (c / 4)))).toString(16))\r\n}\r\n","import { useEffect, useState } from 'react'\r\n\r\nexport function getStorageValue(key, defaultValue) {\r\n    const saved = localStorage.getItem(key)\r\n    const initial = JSON.parse(saved)\r\n    if (initial === undefined || initial === 'undefined' || initial === 'null' || initial === null) {\r\n        return defaultValue\r\n    } else return initial\r\n}\r\n\r\nexport function setStorageValue(key, value) {\r\n    localStorage.setItem(key, JSON.stringify(value))\r\n}\r\n\r\nexport const useLocalStorage = (key, defaultValue) => {\r\n    const [value, setValue] = useState(() => {\r\n        return getStorageValue(key, defaultValue)\r\n    })\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem(key, JSON.stringify(value))\r\n    }, [key, value])\r\n\r\n    return [value, setValue]\r\n}\r\n","import { getStorageValue } from './localStorageUtils'\r\n\r\nexport const removeReadData = ({ index, currentPhilosopher, markedMode, markedQuotes = {}, setMarkedQuotes, currentData, setCurrentData }) => {\r\n    let newMarkedQuotes = JSON.parse(JSON.stringify(markedQuotes))\r\n    let readQuotesArray = []\r\n\r\n    const READ_ARRAY_LOCALSTORAGE_KEY = `${currentPhilosopher}-MARKED_AS_READ`\r\n    readQuotesArray = getStorageValue(READ_ARRAY_LOCALSTORAGE_KEY, [])\r\n\r\n    if (markedQuotes && markedQuotes[currentPhilosopher] !== undefined) {\r\n        readQuotesArray = [...readQuotesArray, ...markedQuotes[currentPhilosopher]]\r\n    }\r\n\r\n    readQuotesArray = [...new Set(readQuotesArray)]\r\n\r\n    if (index) {\r\n        readQuotesArray.push(index)\r\n    }\r\n\r\n    newMarkedQuotes[currentPhilosopher] = readQuotesArray\r\n    setMarkedQuotes(newMarkedQuotes)\r\n\r\n    const newData = currentData.filter(({ id }, _) => readQuotesArray.indexOf(id) === -1)\r\n    setCurrentData(JSON.parse(JSON.stringify(newData)))\r\n}\r\n","import html2canvas from 'html2canvas'\r\n\r\nconst downloadImage = (blob, fileName) => {\r\n    const fakeLink = window.document.createElement('a')\r\n    fakeLink.style = 'display:none;'\r\n    fakeLink.download = fileName\r\n\r\n    fakeLink.href = blob\r\n\r\n    document.body.appendChild(fakeLink)\r\n    fakeLink.click()\r\n    document.body.removeChild(fakeLink)\r\n\r\n    fakeLink.remove()\r\n}\r\n\r\nexport const exportAsImage = async (element, imageFileName) => {\r\n    const html = document.getElementsByTagName('html')[0]\r\n    const body = document.getElementsByTagName('body')[0]\r\n    let htmlWidth = html.clientWidth\r\n    let bodyWidth = body.clientWidth\r\n    const newWidth = element.scrollWidth - element.clientWidth\r\n    if (newWidth > element.clientWidth) {\r\n        htmlWidth += newWidth\r\n        bodyWidth += newWidth\r\n    }\r\n    html.style.width = htmlWidth + 'px'\r\n    body.style.width = bodyWidth + 'px'\r\n    const canvas = await html2canvas(element, { scale: 3 })\r\n    const image = canvas.toDataURL('image/png', 1.0)\r\n    downloadImage(image, imageFileName)\r\n    html.style.width = null\r\n    body.style.width = null\r\n}\r\n\r\nexport const shareQuote = async (element, imageFileName) => {\r\n    ;(async () => {\r\n        if (!('share' in navigator)) {\r\n            return\r\n        }\r\n        const canvas = await html2canvas(element, { scale: 3 })\r\n        canvas.toBlob(async (blob) => {\r\n            const files = [new File([blob], imageFileName, { type: blob.type })]\r\n            const shareData = {\r\n                files,\r\n            }\r\n            if (navigator.canShare(shareData)) {\r\n                try {\r\n                    await navigator.share(shareData)\r\n                } catch (err) {\r\n                    if (err.name !== 'AbortError') {\r\n                        console.error(err.name, err.message)\r\n                    }\r\n                }\r\n            } else {\r\n                console.warn('Sharing not supported', shareData)\r\n            }\r\n        })\r\n    })()\r\n}\r\n","import { useEffect } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { setCurrentModalName } from '../../../../../common/components/modal/modalRedux'\r\nimport { uuidv4 } from '../../../../../common/utils/commonUtils'\r\nimport { setThemeClassNameOnHTMLTag } from '../../../home/home-page/utils/utils'\r\nimport { exportAsImage, shareQuote } from './utils'\r\n\r\nexport function useCreateQuoteImage(philosopherFullName, share, exportRef, darkMode) {\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        setThemeClassNameOnHTMLTag(true)\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        ;(async function () {\r\n            const filename = `${philosopherFullName}-quote-${uuidv4()}.png`\r\n            if (share !== undefined && share === true) {\r\n                await shareQuote(exportRef.current, filename)\r\n            } else {\r\n                await exportAsImage(exportRef.current, filename)\r\n            }\r\n            if (!darkMode) setThemeClassNameOnHTMLTag(false)\r\n            dispatch(setCurrentModalName(''))\r\n        })()\r\n    }, [exportRef, philosopherFullName, share])\r\n}\r\n","import React, { useRef } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { retryTenTimes } from '../../../../common/utils/apiUtils'\r\nimport { useCreateQuoteImage } from './utils/hooks'\r\nconst QuoteWithImage = React.lazy(() => retryTenTimes(() => import(/* webpackChunkName: \"QuoteWithImage\" */ '../quote-with-image/quote-with-image')))\r\nconst QuoteWithoutImage = React.lazy(() => retryTenTimes(() => import(/* webpackChunkName: \"QuoteWithoutImage\" */ '../quote-without-image/quote-without-image')))\r\n\r\nconst GenerateQuoteImage = () => {\r\n    let { quotationText, philosopherFullName, signature, share = false } = useSelector((state) => state.quoteImage)\r\n    const exportRef = useRef()\r\n    const currentPhilosopher = useSelector((state) => state.philosophersData.currentPhilosopher)\r\n    const darkMode = useSelector((state) => state.philosophersData.darkMode)\r\n\r\n    const propsToSend = { exportRef, quotationText, philosopherFullName, signature }\r\n\r\n    useCreateQuoteImage(philosopherFullName, share, exportRef, darkMode)\r\n\r\n    try {\r\n        const imageName = `${currentPhilosopher}.jpg`\r\n        require('../../../../common/static/assets/images/philosophers/' + imageName)\r\n        return <QuoteWithImage {...propsToSend} imageName={imageName} />\r\n    } catch (error) {\r\n        return <QuoteWithoutImage {...propsToSend} />\r\n    }\r\n}\r\n\r\nexport default GenerateQuoteImage\r\n","import { getPhilosopherData, getPhilosopherQuotes } from '../../../../../common/static/utils/utils'\r\nimport { getUserDetails, getUserMarkedQuotesCount, sendUserDetails } from '../../mobile/mobile-menu/utils/utils'\r\nimport { getWordCount } from '../../quotes-list/utils/utils'\r\n\r\nexport const setThemeClassNameOnHTMLTag = (value) => {\r\n    let root = document.getElementsByTagName('html')[0]\r\n    root.className = ''\r\n    if (value) {\r\n        root.classList.add('darkTheme')\r\n    } else {\r\n        root.classList.add('lightTheme')\r\n    }\r\n}\r\n\r\nexport const bringIntoOriginalOrder = (originalOptions, newOptions) => originalOptions.map((item) => getPhilosopherData({ philosopher: item.value, options: newOptions })).reverse()\r\n\r\nexport const bringIntoAlphabeticalOrder = (options) => [...options].sort((a, b) => a.fullName.localeCompare(b.fullName))\r\n\r\nexport async function compareWithServerSyncDatesAndMakeAnAPICall(userName, markedQuotes, openSnackbar, setMarkedQuotes, setRestoreQuotesFromServerCachedDate, markedQuoteClientCount) {\r\n    const markedQuotesFromServerCount = await getUserMarkedQuotesCount({ userName })\r\n    if (markedQuotesFromServerCount) {\r\n        if (markedQuotesFromServerCount > markedQuoteClientCount) {\r\n            let { markedQuotesFromServer } = await getUserDetails({ userName, openSnackbar })\r\n            setMarkedQuotes(markedQuotesFromServer)\r\n            openSnackbar('Auto-Sync : Restored all marked quotes!', 4000)\r\n        } else if (markedQuoteClientCount > markedQuotesFromServerCount) {\r\n            await sendUserDetails({ userName, markedQuotes, openSnackbar })\r\n            // openSnackbar('Auto-Sync : Synced marked quotes with server database!', 4000)\r\n        }\r\n        setRestoreQuotesFromServerCachedDate(Date.now())\r\n    }\r\n}\r\n\r\nexport const autoPopulateWordCount = ({ currentPhilosopher, options, markedQuotes, setStart, setEnd }) => {\r\n    const quotes = getPhilosopherQuotes({ philosopher: currentPhilosopher, options })\r\n    const markedQuotesOfTheCurrentPhilosopher = markedQuotes?.[currentPhilosopher] || []\r\n    const newQuotes = quotes.filter((quote) => !markedQuotesOfTheCurrentPhilosopher.includes(quote.id))\r\n    const minimumWordCount = newQuotes.reduce((minCount, { quote }) => {\r\n        if (quote !== '') return Math.min(getWordCount(quote), minCount)\r\n        else return minCount\r\n    }, Infinity)\r\n    if (minimumWordCount !== Infinity) {\r\n        setStart(1)\r\n        setEnd(minimumWordCount)\r\n    }\r\n}\r\n","import { API_ENDPOINTS } from '../../../../../../common/apis/apiEndpoints'\r\nimport { retryTenTimes } from '../../../../../../common/utils/apiUtils'\r\n\r\nexport const sendUserDetails = async ({ userName, markedQuotes, openSnackbar, setSyncDate }) => {\r\n    await retryTenTimes(async () => {\r\n        return await fetch(API_ENDPOINTS.MARKED_QUOTES.BACKUP, {\r\n            method: 'post',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({\r\n                userName,\r\n                markedQuotes,\r\n                dateSynced: Date.now(),\r\n            }),\r\n        })\r\n    })\r\n}\r\n\r\nexport const getUserDetails = async ({ userName, openSnackbar }) => {\r\n    let response = await retryTenTimes(\r\n        async () =>\r\n            await fetch(API_ENDPOINTS.MARKED_QUOTES.RESTORE, {\r\n                method: 'post',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({\r\n                    userName,\r\n                }),\r\n            })\r\n    )\r\n\r\n    response = await response.json()\r\n    if (response?.ok) {\r\n        try {\r\n            const markedQuotesFromServer = response?.results?.[0]?.markedQuotes\r\n            const markedQuotesFromServerCount = Object.values(markedQuotesFromServer).flat().length\r\n            if (markedQuotesFromServer && markedQuotesFromServerCount > 0) {\r\n                return { markedQuotesFromServer, dateFromServer: response?.results?.[0]?.dateSynced }\r\n                // setMarkedQuotes(response?.results?.[0]?.markedQuotes)\r\n            }\r\n        } catch (error) {\r\n            openSnackbar(JSON.stringify(error))\r\n        }\r\n    } else {\r\n        openSnackbar(JSON.stringify(response.error))\r\n    }\r\n}\r\n\r\nexport const getUserMarkedQuotesCount = async ({ userName }) => {\r\n    let response = await retryTenTimes(\r\n        async () =>\r\n            await fetch(API_ENDPOINTS.MARKED_QUOTES.GET_COUNT, {\r\n                method: 'post',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({\r\n                    userName,\r\n                }),\r\n            })\r\n    )\r\n\r\n    response = await response.json()\r\n    if (response?.ok) {\r\n        return response?.count\r\n    } else {\r\n        return null\r\n    }\r\n}\r\n\r\nexport const loginRegister = async ({ apiCallType, userName, password, setIsLoggedIn, openSnackbar, setIsFetching }) => {\r\n    const capitalizedUserName = userName.charAt(0).toUpperCase() + userName.slice(1)\r\n    let response\r\n    setIsFetching(true)\r\n    if (apiCallType === 'login') {\r\n        response = await retryTenTimes(\r\n            async () =>\r\n                await fetch(API_ENDPOINTS.USER.LOGIN, {\r\n                    method: 'post',\r\n                    headers: { 'Content-Type': 'application/json' },\r\n                    body: JSON.stringify({\r\n                        userName,\r\n                        password,\r\n                    }),\r\n                })\r\n        )\r\n    } else {\r\n        response = await retryTenTimes(\r\n            async () =>\r\n                await fetch(API_ENDPOINTS.USER.CREATE, {\r\n                    method: 'post',\r\n                    headers: { 'Content-Type': 'application/json' },\r\n                    body: JSON.stringify({\r\n                        userName,\r\n                        password,\r\n                    }),\r\n                })\r\n        )\r\n    }\r\n\r\n    response = await response.json()\r\n    setIsFetching(false)\r\n\r\n    if (response?.ok) {\r\n        setIsLoggedIn(true)\r\n        openSnackbar(capitalizedUserName + ' ' + JSON.stringify(response.serverResponse))\r\n    } else {\r\n        openSnackbar(JSON.stringify(response.error))\r\n    }\r\n}\r\n","import { isObjEmpty } from '../../../../../common/utils/commonUtils'\r\nimport { removeReadData } from '../../../../../common/utils/staticDataUtils'\r\n\r\nexport const changeQuotesData = ({ currentPhilosopher, currentData, setCurrentData, options }, { markedMode = null, markedQuotes, setMarkedQuotes }) => {\r\n    if (currentData) setCurrentData(currentData)\r\n    if (markedMode !== undefined && markedMode) removeReadData({ currentPhilosopher, markedMode, markedQuotes, setMarkedQuotes, currentData, setCurrentData })\r\n}\r\n\r\nexport const getPhilosopherFullName = ({ currentPhilosopher, options }) => {\r\n    const currentIndex = options.filter(({ value }) => currentPhilosopher === value)\r\n    if (!isObjEmpty(currentIndex)) return currentIndex && currentIndex[0].fullName\r\n}\r\n\r\nexport const getPhilosopherFullName_i10n = ({ currentPhilosopher, options }) => {\r\n    const currentIndex = options.filter(({ value }) => currentPhilosopher === value)\r\n    if (!isObjEmpty(currentIndex)) return currentIndex && currentIndex[0].fullNameInOtherLanguages\r\n}\r\n\r\nexport function getWordCount(str) {\r\n    return str.split(' ').filter(function (n) {\r\n        return n !== ''\r\n    }).length\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"exclusions-inclusions_modal__gxaat\",\"clearBtn\":\"exclusions-inclusions_clearBtn__cwe7O\"};","import { useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport useSnackbar from '../../../../common/components/snackbar/useSnackbar'\r\nimport { setSearchFiltersRedux } from '../../home/home-page/homePageRedux/homePageRedux'\r\nimport styles from './exclusions-inclusions.module.css'\r\n\r\nconst ExclusionsInclusions = () => {\r\n    const dispatch = useDispatch()\r\n    const [openSnackbar] = useSnackbar()\r\n    const searchFilters = useSelector((state) => state?.philosophersData?.searchFilters)\r\n    const [filters, setFilters] = useState(searchFilters)\r\n    return (\r\n        <div className={styles?.modal}>\r\n            <h5>Exclusions</h5>\r\n            <textarea rows=\"10\" onChange={(e) => setFilters({ ...filters, exclusions: e?.target?.value?.toLowerCase() })} value={filters?.exclusions} />\r\n            <h5>Inclusions</h5>\r\n            <textarea rows=\"10\" onChange={(e) => setFilters({ ...filters, inclusions: e?.target?.value?.toLowerCase() })} value={filters?.inclusions} />\r\n            <div>\r\n                <button\r\n                    onClick={() => {\r\n                        dispatch(setSearchFiltersRedux(filters))\r\n                        openSnackbar('Exclusions/Inclusions Updated!', 4000)\r\n                    }}\r\n                >\r\n                    Add\r\n                </button>\r\n                <button\r\n                    className={styles?.clearBtn}\r\n                    onClick={() => {\r\n                        const clearedFilters = { inclusions: '', exclusions: '' }\r\n                        setFilters(clearedFilters)\r\n                        dispatch(setSearchFiltersRedux(clearedFilters))\r\n                        openSnackbar('Exclusions/Inclusions Updated!', 4000)\r\n                    }}\r\n                >\r\n                    Clear\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ExclusionsInclusions\r\n","var map = {\n\t\"./BEAUVOIR.jpg\": 1848,\n\t\"./BUKOWSKI.jpg\": 1322,\n\t\"./CARL_JUNG.jpg\": 8094,\n\t\"./FREUD.jpg\": 139,\n\t\"./MARK_TWAIN.jpg\": 4554,\n\t\"./OSHO.jpg\": 5984,\n\t\"./PETERSON.jpg\": 3527,\n\t\"./RICKY_GERVAIS.png\": 4507,\n\t\"./ROUSSEAU.jpg\": 1502\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 7853;"],"names":["useSnackbar","dispatch","useDispatch","text","timeout","arguments","length","undefined","setSnackabrMessage","setTimeout","isUndefined","value","isObjEmpty","obj","Object","values","constructor","uuidv4","replace","c","crypto","getRandomValues","Uint8Array","toString","getStorageValue","key","defaultValue","saved","localStorage","getItem","initial","JSON","parse","removeReadData","_ref","index","currentPhilosopher","markedMode","markedQuotes","setMarkedQuotes","currentData","setCurrentData","newMarkedQuotes","stringify","readQuotesArray","READ_ARRAY_LOCALSTORAGE_KEY","concat","Set","push","newData","filter","_ref2","_","id","indexOf","exportAsImage","async","element","imageFileName","html","document","getElementsByTagName","body","htmlWidth","clientWidth","bodyWidth","newWidth","scrollWidth","style","width","downloadImage","blob","fileName","fakeLink","window","createElement","download","href","appendChild","click","removeChild","remove","html2canvas","scale","toDataURL","useCreateQuoteImage","philosopherFullName","share","exportRef","darkMode","useEffect","setThemeClassNameOnHTMLTag","filename","navigator","toBlob","shareData","files","File","type","canShare","err","name","console","error","message","warn","shareQuote","current","setCurrentModalName","QuoteWithImage","React","retryTenTimes","QuoteWithoutImage","GenerateQuoteImage","quotationText","signature","useSelector","state","quoteImage","useRef","philosophersData","propsToSend","imageName","require","_jsx","root","className","classList","add","bringIntoOriginalOrder","originalOptions","newOptions","map","item","getPhilosopherData","philosopher","options","reverse","bringIntoAlphabeticalOrder","sort","a","b","fullName","localeCompare","compareWithServerSyncDatesAndMakeAnAPICall","userName","openSnackbar","setRestoreQuotesFromServerCachedDate","markedQuoteClientCount","markedQuotesFromServerCount","getUserMarkedQuotesCount","markedQuotesFromServer","getUserDetails","sendUserDetails","Date","now","autoPopulateWordCount","setStart","setEnd","quotes","getPhilosopherQuotes","markedQuotesOfTheCurrentPhilosopher","minimumWordCount","quote","includes","reduce","minCount","Math","min","getWordCount","Infinity","setSyncDate","fetch","API_ENDPOINTS","MARKED_QUOTES","BACKUP","method","headers","dateSynced","_response","response","RESTORE","json","ok","_response2","_response2$results","_response2$results$","results","flat","_response3","_response3$results","_response3$results$","dateFromServer","_response4","_ref3","GET_COUNT","_response5","count","loginRegister","_response6","apiCallType","password","setIsLoggedIn","setIsFetching","_ref4","capitalizedUserName","charAt","toUpperCase","slice","USER","LOGIN","CREATE","serverResponse","changeQuotesData","getPhilosopherFullName","currentIndex","getPhilosopherFullName_i10n","_ref5","_ref6","fullNameInOtherLanguages","str","split","n","ExclusionsInclusions","searchFilters","_state$philosophersDa","filters","setFilters","useState","_jsxs","styles","modal","children","rows","onChange","e","_e$target","_e$target$value","exclusions","target","toLowerCase","_e$target2","_e$target2$value","inclusions","onClick","setSearchFiltersRedux","clearBtn","clearedFilters","webpackContext","req","webpackContextResolve","__webpack_require__","o","Error","code","keys","resolve","module","exports"],"sourceRoot":""}