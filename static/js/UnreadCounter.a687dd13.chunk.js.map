{"version":3,"file":"static/js/UnreadCounter.a687dd13.chunk.js","mappings":"kLAmCA,QA9BA,SAAsBA,GAAuE,IAAtE,WAAEC,EAAU,kBAAEC,EAAiB,aAAEC,EAAY,mBAAEC,GAAoBJ,EACtF,MAAOK,EAAaC,IAAkBC,EAAAA,EAAAA,UAAS,CAAEC,gBAAiB,KAAMC,UAAW,KAAMC,YAAa,OAChGC,GAAUC,EAAAA,EAAAA,KAAaC,GAAUA,EAAMC,iBAAiBH,UACxDI,GAAeC,EAAAA,EAAAA,GAAqB,CAAEC,YAAab,EAAoBO,aACvE,gBAAEH,EAAe,UAAEC,EAAS,YAAEC,GAAgBL,EAC9Ca,EAAsBV,EAAkB,KAAMC,EAAYD,EAAmB,KAAKW,QAAQ,OAAS,GAYzG,OAVAC,EAAAA,EAAAA,YAAU,KACN,IAAKnB,IAAeC,GAAqBa,EAAc,CACnD,MAAMP,EAAkBO,EAAaM,OAC/BZ,GAAYa,EAAAA,EAAAA,IAAYnB,EAAaC,IAAuB,EAAID,EAAaC,GAAoBiB,OAGvGf,EAAe,CAAEE,kBAAiBC,YAAWC,YAFzBF,EAAkBC,GAG1C,IACD,CAACL,EAAoBH,EAAYC,EAAmBC,EAAcY,KAEhEA,GAAgBd,GAAcC,EACxB,MAIPqB,EAAAA,EAAAA,MAAA,QAAAC,SAAA,CACyB,OAApBhB,GAA4B,UAAUA,IACxB,OAAdC,GAAsB,UAAUA,KAAaS,IAC7B,OAAhBR,GAAwB,YAAYA,MAGjD,C","sources":["components/organisms/analysis/unread-counter/unread-counter.js"],"sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { useSelector } from 'react-redux'\nimport { getPhilosopherQuotes } from '../../../../common/static/utils/utils'\nimport { isUndefined } from '../../../../common/utils/commonUtils'\n\nfunction UnreadCounter({ isFetching, isFetchingOptions, markedQuotes, currentPhilosopher }) {\n    const [quoteCounts, setQuoteCounts] = useState({ totalQuoteCount: null, readCount: null, unreadCount: null })\n    const options = useSelector((state) => state.philosophersData.options)\n    const originalData = getPhilosopherQuotes({ philosopher: currentPhilosopher, options })\n    const { totalQuoteCount, readCount, unreadCount } = quoteCounts\n    const percentageCompleted = totalQuoteCount ? `(${((readCount / totalQuoteCount) * 100).toFixed(2)}%)` : ''\n\n    useEffect(() => {\n        if (!isFetching && !isFetchingOptions && originalData) {\n            const totalQuoteCount = originalData.length\n            const readCount = isUndefined(markedQuotes[currentPhilosopher]) ? 0 : markedQuotes[currentPhilosopher].length\n            const unreadCount = totalQuoteCount - readCount\n\n            setQuoteCounts({ totalQuoteCount, readCount, unreadCount })\n        }\n    }, [currentPhilosopher, isFetching, isFetchingOptions, markedQuotes, originalData])\n\n    if (!originalData || isFetching || isFetchingOptions) {\n        return null // Render nothing while fetching data\n    }\n\n    return (\n        <span>\n            {totalQuoteCount !== null && `Total: ${totalQuoteCount}`}\n            {readCount !== null && ` Read: ${readCount} ${percentageCompleted}`}\n            {unreadCount !== null && ` Unread: ${unreadCount}`}\n        </span>\n    )\n}\n\nexport default UnreadCounter\n"],"names":["_ref","isFetching","isFetchingOptions","markedQuotes","currentPhilosopher","quoteCounts","setQuoteCounts","useState","totalQuoteCount","readCount","unreadCount","options","useSelector","state","philosophersData","originalData","getPhilosopherQuotes","philosopher","percentageCompleted","toFixed","useEffect","length","isUndefined","_jsxs","children"],"sourceRoot":""}