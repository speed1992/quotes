{"version":3,"file":"static/js/Logs.6776eeb7.chunk.js","mappings":"wKACA,QAA6B,yB,aCK7B,MA+BA,EA/BaA,KACT,MAAMC,GAAOC,EAAAA,EAAAA,KAAaC,GAAUA,EAAMC,iBAAiBH,QACpDI,EAAQC,IAAaC,EAAAA,EAAAA,UAAS,IAWrC,OATAC,EAAAA,EAAAA,YAAU,MACNC,iBAA8B,IAADC,EACzB,IAAIC,QAAiBC,EAAAA,EAAAA,KAAc,IAAMC,MAAMC,EAAAA,EAAcC,MAAMC,OACnEL,QAAiBA,EAASM,OAC1BX,EAAkB,QAATI,EAACC,SAAQ,IAAAD,OAAA,EAARA,EAAUQ,UACxB,CACAC,EAAa,GACd,IAEClB,EAAKmB,OAAS,GAAKf,EAAOe,OAAS,GAAUC,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,SAAE,mBAG/CC,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAkBH,SAAA,CACzB,OAAJtB,QAAI,IAAJA,OAAI,EAAJA,EAAM0B,KAAI,CAACC,EAAKC,KACbR,EAAAA,EAAAA,KAAA,OAAAE,SAAkBK,GAARC,KAEP,OAANxB,QAAM,IAANA,OAAM,EAANA,EAAQsB,KAAI,CAACG,EAAOD,KACjBL,EAAAA,EAAAA,MAAAF,EAAAA,SAAA,CAAAC,SAAA,EACIF,EAAAA,EAAAA,KAAA,OAAAE,SAAkBQ,KAAKC,UAAUF,IAAvBD,IACVR,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,gBAGN,C","sources":["webpack://quotes/./src/components/organisms/analysis/logs/logs.module.css?61a8","components/organisms/analysis/logs/logs.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"addPadding\":\"logs_addPadding__ROi6e\"};","import { useEffect, useState } from 'react'\nimport { useSelector } from 'react-redux'\nimport { API_ENDPOINTS } from '../../../../common/apis/apiEndpoints'\nimport { retryTenTimes } from '../../../../common/utils/apiUtils'\nimport styles from './logs.module.css'\n\nconst Logs = () => {\n    const logs = useSelector((state) => state.philosophersData.logs)\n    const [errors, setErrors] = useState([])\n\n    useEffect(() => {\n        async function fetchErrors() {\n            let response = await retryTenTimes(() => fetch(API_ENDPOINTS.ERROR.GET))\n            response = await response.json()\n            setErrors(response?.errorList)\n        }\n        fetchErrors()\n    }, [])\n\n    if (logs.length < 1 && errors.length < 1) return <>No logs found</>\n\n    return (\n        <div className={styles.addPadding}>\n            {logs?.map((log, index) => (\n                <div key={index}>{log}</div>\n            ))}\n            {errors?.map((error, index) => (\n                <>\n                    <div key={index}>{JSON.stringify(error)}</div>\n                    <br />\n                    <br />\n                </>\n            ))}\n        </div>\n    )\n}\n\nexport default Logs\n"],"names":["Logs","logs","useSelector","state","philosophersData","errors","setErrors","useState","useEffect","async","_response","response","retryTenTimes","fetch","API_ENDPOINTS","ERROR","GET","json","errorList","fetchErrors","length","_jsx","_Fragment","children","_jsxs","className","styles","map","log","index","error","JSON","stringify"],"sourceRoot":""}