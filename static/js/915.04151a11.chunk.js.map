{"version":3,"file":"static/js/915.04151a11.chunk.js","mappings":"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","sources":["common/components/snackbar/useSnackbar.js","common/utils/commonUtils.js","common/utils/dateUtils.js","common/utils/localStorageUtils.js","common/utils/staticDataUtils.js","common/utils/urlUtils.js","common/utils/utils.js","common/web-workers/worker.js","common/settings/constants.js","common/utils/objectUtils.js","common/utils/lazyLoadUtils.js","components/organisms/home/desktop/desktop-header/utils/utils.js","components/organisms/home/home-page/constants/constants.js","components/organisms/home/lazy-load-quote-list/lazy-load-quote-list.jsx","components/organisms/home/lazy-load-quote-list/utils/utils.js","webpack://quotes/./src/components/organisms/home/home-page/home-page.module.css?86c4","components/organisms/home/home-page/home-page.js","components/organisms/home/home-page/utils/sortingHook.js","components/organisms/home/home-page/utils/hooks.js","common/utils/searchUtils.js","components/organisms/home/home-page/utils/utils.js","components/organisms/home/mobile/mobile-menu/utils/utils.js","components/organisms/home/quotes-list/utils/utils.js"],"sourcesContent":["// dispatch(setSnackabrMessage('Are you an idiot?'))\r\n\r\nimport { useDispatch } from 'react-redux'\r\nimport { setSnackabrMessage } from './snackbarRedux'\r\n\r\nconst useSnackbar = () => {\r\n    const dispatch = useDispatch()\r\n    const openSnackbar = (text, timeout = 1400) => {\r\n        dispatch(setSnackabrMessage(text))\r\n        setTimeout(() => dispatch(setSnackabrMessage('')), timeout)\r\n    }\r\n    return [openSnackbar]\r\n}\r\n\r\nexport default useSnackbar\r\n","export const isUndefined = (value) => typeof value === 'undefined'\r\nexport const isObjEmpty = (obj) => Object.values(obj).length === 0 && obj.constructor === Object\r\n\r\nexport function uuidv4() {\r\n    return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, (c) => (c ^ (crypto.getRandomValues(new Uint8Array(1))[0] & (15 >> (c / 4)))).toString(16))\r\n}\r\n","import { checkQueryParams } from './urlUtils'\r\n\r\nexport const isCacheExpired = (startDate, cacheTime, setLogs = null) => {\r\n    startDate = new Date(startDate)\r\n    const endDate = new Date()\r\n    const dateDifferenceInMilliSeconds = endDate.getTime() - startDate.getTime()\r\n    const dateDifferenceInDays = Math.floor(dateDifferenceInMilliSeconds / (1000 * 60 * 60 * 24))\r\n    if (setLogs && checkQueryParams('dev')) {\r\n        setLogs('inside isCacheExpired ' + endDate)\r\n        setLogs('startDate ' + startDate)\r\n        setLogs('endDate ' + endDate)\r\n        setLogs('dateDifferenceInMilliSeconds endDate.getTime() - startDate.getTime() ' + dateDifferenceInMilliSeconds)\r\n        setLogs('dateDifference In hours ' + Math.floor((dateDifferenceInMilliSeconds / (1000 * 60 * 60)) % 24))\r\n        setLogs('dateDifferenceInDays ' + dateDifferenceInDays)\r\n        setLogs('dateDifferenceInDays >= cacheTime ' + dateDifferenceInDays >= cacheTime)\r\n        setLogs('cacheTime ' + cacheTime)\r\n    }\r\n    return dateDifferenceInDays >= cacheTime\r\n}\r\n\r\nexport const getDifferenceFromCurrentDate = (date2) => {\r\n    const date1 = new Date()\r\n    return date2.getTime() - date1.getTime()\r\n}\r\n","import { useEffect, useState } from 'react'\r\n\r\nexport function getStorageValue(key, defaultValue) {\r\n    const saved = localStorage.getItem(key)\r\n    const initial = JSON.parse(saved)\r\n    if (initial === undefined || initial === 'undefined' || initial === 'null' || initial === null) {\r\n        return defaultValue\r\n    } else return initial\r\n}\r\n\r\nexport function setStorageValue(key, value) {\r\n    localStorage.setItem(key, JSON.stringify(value))\r\n}\r\n\r\nexport const useLocalStorage = (key, defaultValue) => {\r\n    const [value, setValue] = useState(() => {\r\n        return getStorageValue(key, defaultValue)\r\n    })\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem(key, JSON.stringify(value))\r\n    }, [key, value])\r\n\r\n    return [value, setValue]\r\n}\r\n","import { getStorageValue } from './localStorageUtils'\r\n\r\nexport const removeReadData = ({ index, currentPhilosopher, markedMode, markedQuotes = {}, setMarkedQuotes, currentData, setCurrentData }) => {\r\n    let newMarkedQuotes = JSON.parse(JSON.stringify(markedQuotes))\r\n    let readQuotesArray = []\r\n\r\n    const READ_ARRAY_LOCALSTORAGE_KEY = `${currentPhilosopher}-MARKED_AS_READ`\r\n    readQuotesArray = getStorageValue(READ_ARRAY_LOCALSTORAGE_KEY, [])\r\n\r\n    if (markedQuotes && markedQuotes[currentPhilosopher] !== undefined) {\r\n        readQuotesArray = [...readQuotesArray, ...markedQuotes[currentPhilosopher]]\r\n    }\r\n\r\n    readQuotesArray = [...new Set(readQuotesArray)]\r\n\r\n    if (index) {\r\n        readQuotesArray.push(index)\r\n    }\r\n\r\n    newMarkedQuotes[currentPhilosopher] = readQuotesArray\r\n    setMarkedQuotes(newMarkedQuotes)\r\n\r\n    const newData = currentData.filter(({ id }, _) => readQuotesArray.indexOf(id) === -1)\r\n    setCurrentData(JSON.parse(JSON.stringify(newData)))\r\n}\r\n","export function getQueryParams(qs) {\r\n    qs = qs.split('+').join(' ')\r\n\r\n    var params = {},\r\n        tokens,\r\n        re = /[?&]?([^=]+)=([^&]*)/g\r\n    while ((tokens = re.exec(qs))) {\r\n        params[decodeURIComponent(tokens[1])] = decodeURIComponent(tokens[2])\r\n    }\r\n\r\n    return params\r\n}\r\n\r\nexport function checkQueryParams(param) {\r\n    let query = getQueryParams(document.location.search)\r\n    let val = query[param] ? query[param].toLowerCase() : null\r\n    if (val === 'false' || val) return true\r\n    else return false\r\n}\r\n","import { worker } from '../web-workers/worker'\r\n\r\nexport const scrollToFirstRow = (listRef) => {\r\n    if (listRef.current) {\r\n        listRef.current.scrollToRow(0)\r\n    }\r\n}\r\n\r\nexport const scrollToMemorizedRow = (listRef, scrollPosition, currentData) => {\r\n    if (currentData?.length > 0 && listRef.current) {\r\n        if (scrollPosition !== undefined && scrollPosition !== 'undefined' && scrollPosition && scrollPosition > 0) {\r\n            listRef.current.scrollToRow(scrollPosition)\r\n        } else {\r\n            scrollToFirstRow(listRef)\r\n        }\r\n    }\r\n}\r\n\r\nexport const scrollToQuoteId = (listRef, scrollObject, currentData, currentPhilosopher) => {\r\n    const quoteId = scrollObject[currentPhilosopher]\r\n    if (currentData?.length > 0 && listRef.current) {\r\n        if (quoteId !== undefined && quoteId !== 'undefined' && quoteId && quoteId > 0) {\r\n            const index = currentData.findIndex(({ id }) => {\r\n                return id === quoteId\r\n            })\r\n            if (index > -1) listRef.current.scrollToRow(index)\r\n        } else {\r\n            scrollToFirstRow(listRef)\r\n        }\r\n    }\r\n}\r\n\r\nexport const search = ({ searchText, currentData, setCurrentData }) => {\r\n    return new Promise((resolve) => {\r\n        if (currentData !== undefined) {\r\n            worker.postMessage({ currentData, searchText, filterName: 'searchTermFilter' })\r\n            worker.onmessage = (event) => {\r\n                const filteredQuotesFromWorker = JSON.parse(eval(`(${JSON.stringify(event.data)})`))\r\n                resolve(filteredQuotesFromWorker)\r\n            }\r\n        }\r\n    })\r\n}\r\n\r\nexport const isMobile = () => window.innerWidth <= 600\r\n\r\nexport const isDesktop = () => window.innerWidth >= 600\r\n","export let worker\r\nif (window.Worker) {\r\n    worker = new Worker(new URL('./filter-worker.js', import.meta.url))\r\n} else {\r\n    alert(\"Your browser doesn't support web workers.\")\r\n}\r\n","export const MAX_RECENT_PHILOSOPHERS = 8\r\n","import { getPhilosopherObjectIndex } from '../static/utils/utils'\r\n\r\nexport const merge = (oldOptions, newOptions) => {\r\n    let newOptionsCopy = JSON.parse(JSON.stringify(newOptions))\r\n    newOptionsCopy.forEach((element, newOptionindex) => {\r\n        const oldOptionIndex = getPhilosopherObjectIndex(element.value, oldOptions)\r\n        if (oldOptionIndex !== -1) {\r\n            newOptionsCopy[newOptionindex].quotes = oldOptions[oldOptionIndex].quotes\r\n        }\r\n    })\r\n    return newOptionsCopy\r\n}\r\n","import { ALPHABETICAL, LATEST } from '../../components/organisms/home/home-page/constants/constants'\r\nimport { STATIC_OPTIONS } from '../../components/organisms/home/home-page/homePageRedux/initialState'\r\nimport { bringIntoAlphabeticalOrder, bringIntoOriginalOrder } from '../../components/organisms/home/home-page/utils/utils'\r\nimport { merge } from './objectUtils'\r\n\r\nexport const addOptionsDataIntoRedux = ({ newOptions, oldOptions, oldOriginalOptions, setOptions, setOriginalOptions }) => {\r\n    let resultantOptions\r\n    resultantOptions = [...oldOptions, ...newOptions]\r\n    setOptions(resultantOptions)\r\n    setOriginalOptions([...STATIC_OPTIONS, ...newOptions])\r\n}\r\n\r\nexport const addResponseOptionsDataIntoRedux = ({ newOptions, oldOptions, oldOriginalOptions, setOptions, setOriginalOptions, sorting }) => {\r\n    const originalOptions = [...STATIC_OPTIONS, ...newOptions]\r\n    let resultantOptions = merge(oldOptions, [...originalOptions])\r\n    if (sorting === LATEST) {\r\n        resultantOptions = bringIntoOriginalOrder(originalOptions, resultantOptions)\r\n    } else if (sorting === ALPHABETICAL) {\r\n        resultantOptions = bringIntoAlphabeticalOrder(resultantOptions)\r\n    }\r\n    setOptions([...resultantOptions])\r\n    setOriginalOptions(originalOptions)\r\n}\r\n","import { API_ENDPOINTS } from '../../../../../../common/apis/apiEndpoints'\r\nimport CACHE_IN_DAYS from '../../../../../../common/settings/cache.json'\r\nimport { MAX_RECENT_PHILOSOPHERS } from '../../../../../../common/settings/constants'\r\nimport { getPhilosopherQuotes, lazyLoadAsset } from '../../../../../../common/static/utils/utils'\r\nimport { retryTenTimes } from '../../../../../../common/utils/apiUtils'\r\nimport { isCacheExpired } from '../../../../../../common/utils/dateUtils'\r\nimport { addResponseOptionsDataIntoRedux } from '../../../../../../common/utils/lazyLoadUtils'\r\nimport { checkQueryParams } from '../../../../../../common/utils/urlUtils'\r\nimport { changeQuotesData } from '../../../quotes-list/utils/utils'\r\nexport function onPhilosopherSelectChange({ philosopher, listRef, setIsFetching, setStart, setEnd, setSearchText, setCurrentPhilosopher, currentData, setCurrentData, options, setOptions, markedMode, markedQuotes, setMarkedQuotes, scrollPosition, setRowsRendered, recentPhilosophers, setRecentPhilosophers }) {\r\n    function callback() {\r\n        if (recentPhilosophers) setRecentPhilosophers([...new Set([philosopher, ...recentPhilosophers.slice(0, MAX_RECENT_PHILOSOPHERS - 1)])])\r\n        setCurrentPhilosopher(philosopher)\r\n        changeQuotesData({ philosopher, currentData, setCurrentData, options }, { markedMode, markedQuotes, setMarkedQuotes })\r\n        setIsFetching(false)\r\n    }\r\n    setStart(1)\r\n    setEnd('')\r\n    setSearchText('')\r\n    setIsFetching(true)\r\n\r\n    if (!getPhilosopherQuotes({ philosopher, options })) {\r\n        lazyLoadAsset(philosopher, { options, setOptions }, []).then(callback)\r\n    } else {\r\n        callback()\r\n    }\r\n}\r\n\r\nexport const onFocusHandler = async ({ options, setOptions, isLoggedIn, setSyncDate, isFetchingOptions, setIsFetchingOptions, originalOptions, setOriginalOptions, sorting, syncDate, setLogs }) => {\r\n    if (checkQueryParams('dev')) {\r\n        const today = new Date()\r\n        setLogs('inside onFocusHandler')\r\n        setLogs('isCacheExpired(syncDate, CACHE_IN_DAYS.ASSET_GRAPH, setLogs) || options.length === 1 ' + isCacheExpired(syncDate, CACHE_IN_DAYS.ASSET_GRAPH, setLogs) || options.length === 1)\r\n        setLogs('options.length ' + options.length)\r\n        setLogs('current time ' + today)\r\n        setLogs('syncDate ' + new Date(syncDate))\r\n    }\r\n    if (isCacheExpired(syncDate, CACHE_IN_DAYS.ASSET_GRAPH, setLogs) || options.length === 1) {\r\n        setIsFetchingOptions?.(true)\r\n        let response = await retryTenTimes(() => fetch(API_ENDPOINTS.STATIC_DATA.STATIC_ASSET_GRAPH))\r\n        response = await response.json()\r\n        if (checkQueryParams('dev')) setLogs('api response ' + response)\r\n        addResponseOptionsDataIntoRedux({ newOptions: response, oldOptions: options, oldOriginalOptions: originalOptions, setOptions, setOriginalOptions, sorting })\r\n        setIsFetchingOptions?.(false)\r\n        setSyncDate?.(Date.now())\r\n    }\r\n}\r\n","export const LATEST = 'latest'\r\nexport const ALPHABETICAL = 'alphabetical'\r\n","import React, { useEffect } from 'react'\r\nimport { retryTenTimes } from '../../../../common/utils/apiUtils'\r\nimport { lazyInit } from './utils/utils'\r\nconst QuotesList = React.lazy(() => retryTenTimes(() => import('../quotes-list/quotes-list')))\r\n\r\nexport function LazyLoadQuoteList(props) {\r\n    const { currentPhilosopher, setCurrentData, options, setOptions, setIsFetching, isFetching } = props\r\n\r\n    useEffect(() => {\r\n        setIsFetching(true)\r\n        lazyInit(currentPhilosopher, options, setOptions, setCurrentData, setIsFetching)\r\n    }, [currentPhilosopher])\r\n\r\n    return !isFetching && <QuotesList {...props} />\r\n}\r\n","import { getPhilosopherQuotes, lazyLoadAsset } from '../../../../../common/static/utils/utils'\r\n\r\nexport function lazyInit(currentPhilosopher, options, setOptions, setCurrentData, setIsFetching) {\r\n    try {\r\n        if (currentPhilosopher !== undefined) {\r\n            const currentPhilosopherQuotes = getPhilosopherQuotes({ philosopher: currentPhilosopher, options })\r\n            if (!currentPhilosopherQuotes) {\r\n                lazyLoadAsset(currentPhilosopher, { options, setOptions }, [setCurrentData])\r\n            }\r\n        }\r\n\r\n        setIsFetching(false)\r\n    } catch (e) {\r\n        console.log(e)\r\n    }\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"home-page_content__Jkn8g\",\"contentMinMode\":\"home-page_contentMinMode__qSHsr\",\"homepage\":\"home-page_homepage__vHOIY\",\"minMode\":\"home-page_minMode__QYZpn\"};","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React from 'react'\r\nimport { doesPhilosopherDataExist } from '../../../../common/static/utils/utils'\r\nimport { retryTenTimes } from '../../../../common/utils/apiUtils'\r\nimport { isDesktop } from '../../../../common/utils/utils'\r\nimport { LazyLoadQuoteList } from '../lazy-load-quote-list/lazy-load-quote-list'\r\nimport styles from './home-page.module.css'\r\nimport { useHomePageHooks } from './utils/hooks'\r\nimport { useSortingHooks } from './utils/sortingHook'\r\nconst Loader = React.lazy(() => retryTenTimes(() => import('../../../../common/components/loader/loader')))\r\nconst Header = React.lazy(() => retryTenTimes(() => import('../header-layout/header-layout')))\r\n\r\nconst HomePage = () => {\r\n    const { options, sorting, setSorting } = useSortingHooks()\r\n    let propsToSend = useHomePageHooks()\r\n    const { currentPhilosopher, isFetching, minMode, setMinMode } = propsToSend\r\n    propsToSend = { ...propsToSend, setSorting, sorting }\r\n\r\n    if (!doesPhilosopherDataExist(currentPhilosopher, options)) return <></>\r\n\r\n    return (\r\n        <div className={styles.homepage}>\r\n            {isFetching ? (\r\n                <Loader />\r\n            ) : (\r\n                <>\r\n                    {!minMode && <Header {...propsToSend} />}\r\n                    {!isDesktop() && (\r\n                        <button className={styles.minMode} onClick={() => setMinMode(!minMode)}>\r\n                            Toggle Min Mode\r\n                        </button>\r\n                    )}\r\n                    <div className={!minMode ? styles.content : styles.contentMinMode}>\r\n                        <LazyLoadQuoteList {...propsToSend} width={screen.width - 20} height={screen.height} />\r\n                    </div>\r\n                </>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HomePage\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport { useCallback, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { ALPHABETICAL, LATEST } from '../constants/constants'\r\nimport { setOptionsRedux, setSortingRedux } from '../homePageRedux/homePageRedux'\r\nimport { bringIntoAlphabeticalOrder, bringIntoOriginalOrder } from './utils'\r\n\r\nexport function useSortingHooks() {\r\n    const dispatch = useDispatch()\r\n    const originalOptions = useSelector((state) => state.philosophersData.originalOptions)\r\n    const options = useSelector((state) => state.philosophersData.options)\r\n    const sorting = useSelector((state) => state.philosophersData.sorting)\r\n    const setSorting = useCallback((value) => dispatch(setSortingRedux(value)), [])\r\n\r\n    useEffect(() => {\r\n        const setOptions = (value) => dispatch(setOptionsRedux(value))\r\n        let resultOptions = []\r\n\r\n        if (originalOptions.length > 1) {\r\n            if (sorting === LATEST) {\r\n                resultOptions = bringIntoOriginalOrder(originalOptions, options)\r\n                setOptions(resultOptions)\r\n            } else if (sorting === ALPHABETICAL) {\r\n                resultOptions = bringIntoAlphabeticalOrder(options)\r\n                setOptions(resultOptions)\r\n            }\r\n        }\r\n    }, [sorting])\r\n\r\n    return { sorting, setSorting, options, originalOptions }\r\n}\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport { useCallback, useEffect, useRef, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport useSnackbar from '../../../../../common/components/snackbar/useSnackbar'\r\nimport CACHE_IN_DAYS from '../../../../../common/settings/cache.json'\r\nimport { doesPhilosopherDataExist, getPhilosopherQuotes } from '../../../../../common/static/utils/utils'\r\nimport { isCacheExpired } from '../../../../../common/utils/dateUtils'\r\nimport { applyFilters } from '../../../../../common/utils/searchUtils'\r\nimport { isDesktop } from '../../../../../common/utils/utils'\r\nimport { onFocusHandler } from '../../desktop/desktop-header/utils/utils'\r\nimport { getPhilosopherFullName } from '../../quotes-list/utils/utils'\r\nimport { setCurrentDataRedux, setCurrentPhilosopherRedux, setDarkModeRedux, setEndRedux, setIsLoggedInRedux, setLogsRedux, setMarkedModeRedux, setMarkedQuotesRedux, setMinModeRedux, setOptionsRedux, setOriginalOptionsRedux, setPasswordRedux, setRecentPhilosophersRedux, setRestoreQuotesFromServerCachedDateRedux, setScheduledPostsRedux, setScrollPositionRedux, setSearchTextRedux, setStartRedux, setSyncDateRedux, setUserNameRedux } from '../homePageRedux/homePageRedux'\r\nimport { compareWithServerSyncDatesAndMakeAnAPICall, setThemeClassNameOnHTMLTag } from './utils'\r\n\r\nexport function useHomePageHooks() {\r\n    const [openSnackbar] = useSnackbar()\r\n    const listRef = useRef()\r\n    const dispatch = useDispatch()\r\n    const { start, end, searchText, currentPhilosopher, currentData, markedMode, options, markedQuotes, scheduledPosts, darkMode, scrollPosition, originalData = getPhilosopherQuotes({ philosopher: currentPhilosopher, options }), originalOptions, userName, isLoggedIn, password, syncDate, restoreQuotesFromServerCachedDate, sorting, voiceSpeed, recentPhilosophers, minMode } = useSelector((state) => state.philosophersData)\r\n\r\n    const [isFetching, setIsFetching] = useState(false)\r\n    const [isFetchingOptions, setIsFetchingOptions] = useState(false)\r\n    const [rowsRendered, setRowsRendered] = useState(false)\r\n\r\n    const setStart = useCallback((value) => dispatch(setStartRedux(value)), [])\r\n    const setEnd = useCallback((value) => dispatch(setEndRedux(value)), [])\r\n    const setSearchText = useCallback((value) => dispatch(setSearchTextRedux(value)), [])\r\n    const setMarkedMode = useCallback((value) => dispatch(setMarkedModeRedux(value)), [])\r\n    const setCurrentPhilosopher = useCallback((name) => dispatch(setCurrentPhilosopherRedux(name)), [])\r\n    const setCurrentData = useCallback((data) => dispatch(setCurrentDataRedux(data)), [])\r\n    const setOptions = useCallback((value) => dispatch(setOptionsRedux(value)), [])\r\n    const setMarkedQuotes = useCallback((value) => dispatch(setMarkedQuotesRedux(value)), [])\r\n    const setScheduledQuotes = useCallback((value) => dispatch(setScheduledPostsRedux(value)), [])\r\n    const setDarkMode = useCallback((value) => dispatch(setDarkModeRedux(value)), [])\r\n    const setScrollPosition = useCallback((value) => dispatch(setScrollPositionRedux(value)), [])\r\n    const setOriginalOptions = useCallback((value) => dispatch(setOriginalOptionsRedux(value)), [])\r\n    const setUserName = useCallback((value) => dispatch(setUserNameRedux(value)), [])\r\n    const setIsLoggedIn = useCallback((value) => dispatch(setIsLoggedInRedux(value)), [])\r\n    const setPassword = useCallback((value) => dispatch(setPasswordRedux(value)), [])\r\n    const setSyncDate = useCallback((value) => dispatch(setSyncDateRedux(value)), [])\r\n    const setRestoreQuotesFromServerCachedDate = useCallback((value) => dispatch(setRestoreQuotesFromServerCachedDateRedux(value)), [])\r\n    const setRecentPhilosophers = useCallback((value) => dispatch(setRecentPhilosophersRedux(value)), [])\r\n    const setMinMode = useCallback((value) => dispatch(setMinModeRedux(value)), [])\r\n    const setLogs = useCallback((value) => dispatch(setLogsRedux(value)), [])\r\n\r\n    // const debouncedApplyFilters = debounce(applyFilters, 1000)\r\n\r\n    useEffect(() => {\r\n        if (isLoggedIn) {\r\n            ;(async () => {\r\n                const markedQuoteClientCount = Object.values(markedQuotes).flat().length\r\n\r\n                if (isCacheExpired(restoreQuotesFromServerCachedDate, CACHE_IN_DAYS.QUOTES_SYNC)) {\r\n                    await compareWithServerSyncDatesAndMakeAnAPICall(userName, markedQuotes, openSnackbar, setMarkedQuotes, setRestoreQuotesFromServerCachedDate, markedQuoteClientCount)\r\n                }\r\n            })()\r\n        }\r\n    }, [isLoggedIn])\r\n\r\n    useEffect(() => {\r\n        if (!doesPhilosopherDataExist(currentPhilosopher, options)) {\r\n            onFocusHandler({ options, setOptions, isLoggedIn, setSyncDate, isFetchingOptions, setIsFetchingOptions, originalOptions, setOriginalOptions, sorting })\r\n        }\r\n    }, [currentPhilosopher])\r\n\r\n    useEffect(() => {\r\n        if (originalData) {\r\n            applyFilters({ searchText, start, end, currentPhilosopher, currentData, originalData, setCurrentData, options }, { markedMode, markedQuotes, setMarkedQuotes })\r\n        }\r\n    }, [start, end, searchText, markedMode, currentPhilosopher, markedQuotes[currentPhilosopher]?.quotes?.length])\r\n\r\n    useEffect(() => {\r\n        setThemeClassNameOnHTMLTag(darkMode)\r\n    }, [darkMode])\r\n\r\n    useEffect(() => {\r\n        if (isDesktop()) {\r\n            setDarkMode(false)\r\n            setThemeClassNameOnHTMLTag(false)\r\n        }\r\n    }, [darkMode])\r\n\r\n    useEffect(() => {\r\n        document.title = `${getPhilosopherFullName({ currentPhilosopher, options })} Quotes`\r\n    }, [currentPhilosopher])\r\n\r\n    return { listRef, dispatch, start, end, searchText, currentPhilosopher, currentData, markedMode, options, markedQuotes, scheduledPosts, darkMode, scrollPosition, originalData, isFetching, setIsFetching, setStart, setEnd, setSearchText, setMarkedMode, setCurrentPhilosopher, setCurrentData, setOptions, setMarkedQuotes, setScheduledQuotes, setDarkMode, setScrollPosition, originalOptions, setOriginalOptions, userName, setUserName, isLoggedIn, setIsLoggedIn, password, setPassword, isFetchingOptions, setIsFetchingOptions, rowsRendered, setRowsRendered, syncDate, setSyncDate, voiceSpeed, recentPhilosophers, setRecentPhilosophers, minMode, setMinMode, setLogs, restoreQuotesFromServerCachedDate, setRestoreQuotesFromServerCachedDate }\r\n}\r\n","import { changeQuotesData, searchByWordLength } from '../../components/organisms/home/quotes-list/utils/utils.js'\r\nimport { search } from './utils.js'\r\n\r\nexport async function applyFilters({ searchText, start, end, currentPhilosopher, currentData, originalData, setCurrentData, options }, { markedMode = false, markedQuotes, setMarkedQuotes }) {\r\n    let dataForSearch = []\r\n    if (searchText === '' && start == 1 && end == '') changeQuotesData({ currentPhilosopher, currentData: originalData, setCurrentData, options }, { markedMode, markedQuotes, setMarkedQuotes })\r\n    else {\r\n        dataForSearch = await search({ searchText, currentData: originalData, setCurrentData, currentPhilosopher, options })\r\n        if (dataForSearch) await searchByWordLength(start, end, dataForSearch, { markedMode, markedQuotes, setMarkedQuotes }, { currentData, setCurrentData, originalData, currentPhilosopher })\r\n    }\r\n}\r\n","import { getPhilosopherData } from '../../../../../common/static/utils/utils'\r\nimport { getUserDetails, getUserMarkedQuotesCount, sendUserDetails } from '../../mobile/mobile-menu/utils/utils'\r\n\r\nexport const setThemeClassNameOnHTMLTag = (value) => {\r\n    let root = document.getElementsByTagName('html')[0]\r\n    root.className = ''\r\n    if (value) {\r\n        root.classList.add('darkTheme')\r\n    } else {\r\n        root.classList.add('lightTheme')\r\n    }\r\n}\r\n\r\nexport const bringIntoOriginalOrder = (originalOptions, newOptions) => originalOptions.map((item) => getPhilosopherData({ philosopher: item.value, options: newOptions })).reverse()\r\n\r\nexport const bringIntoAlphabeticalOrder = (options) => [...options].sort((a, b) => a.fullName.localeCompare(b.fullName))\r\n\r\nexport async function compareWithServerSyncDatesAndMakeAnAPICall(userName, markedQuotes, openSnackbar, setMarkedQuotes, setRestoreQuotesFromServerCachedDate, markedQuoteClientCount) {\r\n    const markedQuotesFromServerCount = await getUserMarkedQuotesCount({ userName })\r\n    if (markedQuotesFromServerCount) {\r\n        if (markedQuotesFromServerCount > markedQuoteClientCount) {\r\n            let { markedQuotesFromServer } = await getUserDetails({ userName, openSnackbar })\r\n            setMarkedQuotes(markedQuotesFromServer)\r\n            openSnackbar('Auto-Sync : Restored all marked quotes!', 4000)\r\n        } else if (markedQuoteClientCount > markedQuotesFromServerCount) {\r\n            await sendUserDetails({ userName, markedQuotes, openSnackbar })\r\n            // openSnackbar('Auto-Sync : Synced marked quotes with server database!', 4000)\r\n        }\r\n        setRestoreQuotesFromServerCachedDate(Date.now())\r\n    }\r\n}\r\n","import { API_ENDPOINTS } from '../../../../../../common/apis/apiEndpoints'\r\nimport { retryTenTimes } from '../../../../../../common/utils/apiUtils'\r\n\r\nexport const sendUserDetails = async ({ userName, markedQuotes, openSnackbar, setSyncDate }) => {\r\n    await retryTenTimes(async () => {\r\n        return await fetch(API_ENDPOINTS.MARKED_QUOTES.BACKUP, {\r\n            method: 'post',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({\r\n                userName,\r\n                markedQuotes,\r\n                dateSynced: Date.now(),\r\n            }),\r\n        })\r\n    })\r\n}\r\n\r\nexport const getUserDetails = async ({ userName, openSnackbar }) => {\r\n    let response = await retryTenTimes(\r\n        async () =>\r\n            await fetch(API_ENDPOINTS.MARKED_QUOTES.RESTORE, {\r\n                method: 'post',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({\r\n                    userName,\r\n                }),\r\n            })\r\n    )\r\n\r\n    response = await response.json()\r\n    if (response?.ok) {\r\n        try {\r\n            const markedQuotesFromServer = response?.results?.[0]?.markedQuotes\r\n            const markedQuotesFromServerCount = Object.values(markedQuotesFromServer).flat().length\r\n            if (markedQuotesFromServer && markedQuotesFromServerCount > 0) {\r\n                return { markedQuotesFromServer, dateFromServer: response?.results?.[0]?.dateSynced }\r\n                // setMarkedQuotes(response?.results?.[0]?.markedQuotes)\r\n            }\r\n        } catch (error) {\r\n            openSnackbar(JSON.stringify(error))\r\n        }\r\n    } else {\r\n        openSnackbar(JSON.stringify(response.error))\r\n    }\r\n}\r\n\r\nexport const getUserMarkedQuotesCount = async ({ userName }) => {\r\n    let response = await retryTenTimes(\r\n        async () =>\r\n            await fetch(API_ENDPOINTS.MARKED_QUOTES.GET_COUNT, {\r\n                method: 'post',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({\r\n                    userName,\r\n                }),\r\n            })\r\n    )\r\n\r\n    response = await response.json()\r\n    if (response?.ok) {\r\n        return response?.count\r\n    } else {\r\n        return null\r\n    }\r\n}\r\n\r\nexport const loginRegister = async ({ apiCallType, userName, password, setIsLoggedIn, openSnackbar, setIsFetching }) => {\r\n    const capitalizedUserName = userName.charAt(0).toUpperCase() + userName.slice(1)\r\n    let response\r\n    setIsFetching(true)\r\n    if (apiCallType === 'login') {\r\n        response = await retryTenTimes(\r\n            async () =>\r\n                await fetch(API_ENDPOINTS.USER.LOGIN, {\r\n                    method: 'post',\r\n                    headers: { 'Content-Type': 'application/json' },\r\n                    body: JSON.stringify({\r\n                        userName,\r\n                        password,\r\n                    }),\r\n                })\r\n        )\r\n    } else {\r\n        response = await retryTenTimes(\r\n            async () =>\r\n                await fetch(API_ENDPOINTS.USER.CREATE, {\r\n                    method: 'post',\r\n                    headers: { 'Content-Type': 'application/json' },\r\n                    body: JSON.stringify({\r\n                        userName,\r\n                        password,\r\n                    }),\r\n                })\r\n        )\r\n    }\r\n\r\n    response = await response.json()\r\n    setIsFetching(false)\r\n\r\n    if (response?.ok) {\r\n        setIsLoggedIn(true)\r\n        openSnackbar(capitalizedUserName + ' ' + JSON.stringify(response.serverResponse))\r\n    } else {\r\n        openSnackbar(JSON.stringify(response.error))\r\n    }\r\n}\r\n","import { isObjEmpty } from '../../../../../common/utils/commonUtils'\r\nimport { removeReadData } from '../../../../../common/utils/staticDataUtils'\r\nimport { worker } from '../../../../../common/web-workers/worker'\r\n\r\nexport const changeQuotesData = ({ currentPhilosopher, currentData, setCurrentData, options }, { markedMode = null, markedQuotes, setMarkedQuotes }) => {\r\n    if (currentData) setCurrentData(currentData)\r\n    if (markedMode !== undefined && markedMode) removeReadData({ currentPhilosopher, markedMode, markedQuotes, setMarkedQuotes, currentData, setCurrentData })\r\n}\r\n\r\nexport const getPhilosopherFullName = ({ currentPhilosopher, options }) => {\r\n    const currentIndex = options.filter(({ value }) => currentPhilosopher === value)\r\n    if (!isObjEmpty(currentIndex)) return currentIndex && currentIndex[0].fullName\r\n}\r\n\r\nexport const getPhilosopherFullName_i10n = ({ currentPhilosopher, options }) => {\r\n    const currentIndex = options.filter(({ value }) => currentPhilosopher === value)\r\n    if (!isObjEmpty(currentIndex)) return currentIndex && currentIndex[0].fullNameInOtherLanguages\r\n}\r\n\r\nexport const searchByWordLength = async (start, end, quotes, { markedMode, markedQuotes, setMarkedQuotes }, { setCurrentData, currentPhilosopher }) => {\r\n    return new Promise((resolve) => {\r\n        if (quotes !== undefined) {\r\n            if (typeof start === 'string' && start.trim() === '') start = 0\r\n            worker.postMessage({ quotes, end, start, filterName: 'wordCountFilter' })\r\n            worker.onmessage = (event) => {\r\n                const newData = JSON.parse(eval(`(${JSON.stringify(event.data)})`))\r\n                changeQuotesData({ currentData: newData, setCurrentData, currentPhilosopher }, { markedMode, markedQuotes, setMarkedQuotes })\r\n                resolve()\r\n            }\r\n        }\r\n    })\r\n}\r\n\r\nexport function getWordCount(str) {\r\n    return str.split(' ').filter(function (n) {\r\n        return n !== ''\r\n    }).length\r\n}\r\n"],"names":["useSnackbar","dispatch","useDispatch","text","timeout","arguments","length","undefined","setSnackabrMessage","setTimeout","isUndefined","value","isObjEmpty","obj","Object","values","constructor","uuidv4","replace","c","crypto","getRandomValues","Uint8Array","toString","isCacheExpired","startDate","cacheTime","setLogs","Date","endDate","dateDifferenceInMilliSeconds","getTime","dateDifferenceInDays","Math","floor","checkQueryParams","getStorageValue","key","defaultValue","saved","localStorage","getItem","initial","JSON","parse","removeReadData","_ref","index","currentPhilosopher","markedMode","markedQuotes","setMarkedQuotes","currentData","setCurrentData","newMarkedQuotes","stringify","readQuotesArray","READ_ARRAY_LOCALSTORAGE_KEY","concat","Set","push","newData","filter","_ref2","_","id","indexOf","param","query","qs","split","join","tokens","params","re","exec","decodeURIComponent","getQueryParams","document","location","search","val","toLowerCase","scrollToFirstRow","listRef","current","scrollToRow","scrollToMemorizedRow","scrollPosition","scrollToQuoteId","scrollObject","quoteId","findIndex","searchText","Promise","resolve","worker","postMessage","filterName","onmessage","event","filteredQuotesFromWorker","eval","data","isMobile","window","innerWidth","isDesktop","Worker","URL","alert","MAX_RECENT_PHILOSOPHERS","addResponseOptionsDataIntoRedux","newOptions","oldOptions","oldOriginalOptions","setOptions","setOriginalOptions","sorting","originalOptions","STATIC_OPTIONS","resultantOptions","merge","newOptionsCopy","forEach","element","newOptionindex","oldOptionIndex","getPhilosopherObjectIndex","quotes","LATEST","bringIntoOriginalOrder","ALPHABETICAL","bringIntoAlphabeticalOrder","onPhilosopherSelectChange","philosopher","setIsFetching","setStart","setEnd","setSearchText","setCurrentPhilosopher","options","setRowsRendered","recentPhilosophers","setRecentPhilosophers","callback","slice","changeQuotesData","getPhilosopherQuotes","lazyLoadAsset","then","onFocusHandler","async","isLoggedIn","setSyncDate","isFetchingOptions","setIsFetchingOptions","syncDate","today","CACHE_IN_DAYS","response","retryTenTimes","fetch","API_ENDPOINTS","STATIC_DATA","STATIC_ASSET_GRAPH","json","now","QuotesList","React","LazyLoadQuoteList","props","isFetching","useEffect","e","console","log","lazyInit","_jsx","Loader","Header","HomePage","setSorting","useSelector","state","philosophersData","useCallback","setSortingRedux","setOptionsRedux","resultOptions","useSortingHooks","propsToSend","useHomePageHooks","minMode","setMinMode","doesPhilosopherDataExist","className","styles","children","_jsxs","_Fragment","onClick","width","screen","height","_markedQuotes$current","_markedQuotes$current2","openSnackbar","useRef","start","end","scheduledPosts","darkMode","originalData","userName","password","restoreQuotesFromServerCachedDate","voiceSpeed","useState","rowsRendered","setStartRedux","setEndRedux","setSearchTextRedux","setMarkedMode","setMarkedModeRedux","name","setCurrentPhilosopherRedux","setCurrentDataRedux","setMarkedQuotesRedux","setScheduledQuotes","setScheduledPostsRedux","setDarkMode","setDarkModeRedux","setScrollPosition","setScrollPositionRedux","setOriginalOptionsRedux","setUserName","setUserNameRedux","setIsLoggedIn","setIsLoggedInRedux","setPassword","setPasswordRedux","setSyncDateRedux","setRestoreQuotesFromServerCachedDate","setRestoreQuotesFromServerCachedDateRedux","setRecentPhilosophersRedux","setMinModeRedux","setLogsRedux","markedQuoteClientCount","flat","compareWithServerSyncDatesAndMakeAnAPICall","dataForSearch","searchByWordLength","applyFilters","setThemeClassNameOnHTMLTag","title","getPhilosopherFullName","root","getElementsByTagName","classList","add","map","item","getPhilosopherData","reverse","sort","a","b","fullName","localeCompare","markedQuotesFromServerCount","getUserMarkedQuotesCount","markedQuotesFromServer","getUserDetails","sendUserDetails","MARKED_QUOTES","BACKUP","method","headers","body","dateSynced","_response","RESTORE","ok","_response2","_response2$results","_response2$results$","results","_response3","_response3$results","_response3$results$","dateFromServer","error","_response4","_ref3","GET_COUNT","_response5","count","loginRegister","_response6","apiCallType","_ref4","capitalizedUserName","charAt","toUpperCase","USER","LOGIN","CREATE","serverResponse","currentIndex","getPhilosopherFullName_i10n","_ref5","_ref6","fullNameInOtherLanguages","_ref7","_ref8","trim","getWordCount","str","n"],"sourceRoot":""}