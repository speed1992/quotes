{"version":3,"file":"static/js/389.0022786d.chunk.js","mappings":"2LAGMA,EAAiBC,EAAAA,MAAW,kBAAMC,EAAAA,EAAAA,KAAc,kBAAM,oCAE7C,SAASC,EAAT,GAAwI,IAAhHC,EAA+G,EAA/GA,QAASC,EAAsG,EAAtGA,mBAAoBC,EAAkF,EAAlFA,gBAAiBC,EAAiE,EAAjEA,uBAAwBC,EAAyC,EAAzCA,YAAaC,EAA4B,EAA5BA,MAAOC,EAAqB,EAArBA,kBAC7H,GAAsCC,EAAAA,EAAAA,UAAS,IAA/C,eAAOC,EAAP,KAAoBC,EAApB,KACA,GAAoCF,EAAAA,EAAAA,UAAS,IAA7C,eAAOG,EAAP,KAAmBC,EAAnB,KACA,GAAkCJ,EAAAA,EAAAA,WAAS,GAA3C,eAAOK,EAAP,KAAkBC,EAAlB,MACAC,EAAAA,EAAAA,YAAU,kBAAMH,EAAcN,KAAQ,CAACA,IACvC,IAAMU,GAAaC,EAAAA,EAAAA,WAEnBF,EAAAA,EAAAA,YAAU,WACFF,GAAaZ,EAAQiB,OAAS,IAC9BN,EAAc,IACdF,EAAeT,GACfa,GAAa,MAElB,CAACb,EAAQiB,OAAQL,IAkDpB,OACI,SAAChB,EAAD,CAAgBsB,SAAU,kBAAMT,EAAe,KAA/C,UACI,iBAAKU,UAAU,oBAAf,WACI,kBAAOC,KAAK,OAAOC,QAnDR,SAACC,GACpBnB,IACAU,GAAa,IAiDuCU,SA9CnC,SAACD,GAClB,IAAMjB,EAAQiB,EAAEE,OAAOnB,MACvB,GAAc,KAAVA,EAAcI,EAAeT,OAC5B,CACD,IAAIQ,EAAc,GAClB,GAAIH,EAAMY,OAAS,EAAG,CAClB,IAAMQ,EAAQ,IAAIC,OAAJ,UAAcrB,GAAd,KACdG,EAAcR,EAAQ2B,QAAO,gBAAGC,EAAH,EAAGA,SAAH,OAAkBH,EAAMI,KAAKD,MAG9DnB,EAAeD,GAEnBG,EAAcN,IAkC8DD,YAAaA,EAAaC,MAAOK,EAAYoB,OA/BvG,WAClBnB,EAAcN,MA+BLC,GACG,eAAIa,UAAU,eAAd,UACI,yCArBW,IAAvBX,EAAYS,OACL,MAGP,eAAIc,IAAKhB,EAAYI,UAAU,eAA/B,SACKX,GACGA,EAAYwB,KAAI,gBAAGJ,EAAH,EAAGA,SAAUvB,EAAb,EAAaA,MAAb,OACZ,eAAI4B,GAAIhC,IAAuBI,EAAQ,SAAW,GAAgBA,MAAOA,EAAO6B,QAAS,SAACZ,GAAD,OAhBlF,SAACM,EAAUvB,QACpB8B,IAAV9B,IACAI,EAAe,IACfE,EAAciB,GACd1B,EAAgB,CAAEsB,OAAQ,CAAEnB,MAAAA,MAYgF+B,CAAmBR,EAAUvB,IAA7H,SACKuB,GADsDvB","sources":["components/organisms/home/mobile/mobile-select/mobile-select.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react'\r\nimport { retryTenTimes } from '../../../../../common/utils/apiUtils'\r\nimport './mobile-select.css'\r\nconst OutsideAlerter = React.lazy(() => retryTenTimes(() => import('../../../../../common/components/outside-alerter/outside-alerter')))\r\n\r\nexport default function MobileSelect({ options, currentPhilosopher, onChangeHandler, onFocusHandlerCallback, placeholder, value, isFetchingOptions }) {\r\n    const [suggestions, setSuggestions] = useState([])\r\n    const [searchText, setSearchText] = useState([])\r\n    const [isFocused, setIsFocused] = useState(false)\r\n    useEffect(() => setSearchText(value), [value])\r\n    const scollToRef = useRef()\r\n\r\n    useEffect(() => {\r\n        if (isFocused && options.length > 1) {\r\n            setSearchText('')\r\n            setSuggestions(options)\r\n            setIsFocused(false)\r\n        }\r\n    }, [options.length, isFocused])\r\n\r\n    const onFocusHandler = (e) => {\r\n        onFocusHandlerCallback()\r\n        setIsFocused(true)\r\n    }\r\n\r\n    const onTextChange = (e) => {\r\n        const value = e.target.value\r\n        if (value === '') setSuggestions(options)\r\n        else {\r\n            let suggestions = []\r\n            if (value.length > 0) {\r\n                const regex = new RegExp(`${value}`, `i`)\r\n                suggestions = options.filter(({ fullName }) => regex.test(fullName))\r\n            }\r\n\r\n            setSuggestions(suggestions)\r\n        }\r\n        setSearchText(value)\r\n    }\r\n\r\n    const onBlurHandler = () => {\r\n        setSearchText(value)\r\n    }\r\n\r\n    const suggestionSelected = (fullName, value) => {\r\n        if (value !== undefined) {\r\n            setSuggestions([])\r\n            setSearchText(fullName)\r\n            onChangeHandler({ target: { value } })\r\n        }\r\n    }\r\n\r\n    const renderSuggestions = () => {\r\n        if (suggestions.length === 0) {\r\n            return null\r\n        }\r\n        return (\r\n            <ul ref={scollToRef} className=\"dropDownList\">\r\n                {suggestions &&\r\n                    suggestions.map(({ fullName, value }) => (\r\n                        <li id={currentPhilosopher === value ? 'active' : ''} key={value} value={value} onClick={(e) => suggestionSelected(fullName, value)}>\r\n                            {fullName}\r\n                        </li>\r\n                    ))}\r\n            </ul>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <OutsideAlerter callback={() => setSuggestions([])}>\r\n            <div className=\"typeAheadDropDown\">\r\n                <input type=\"text\" onFocus={onFocusHandler} onChange={onTextChange} placeholder={placeholder} value={searchText} onBlur={onBlurHandler} />\r\n                {isFetchingOptions ? (\r\n                    <ul className=\"dropDownList\">\r\n                        <li>Loading...</li>\r\n                    </ul>\r\n                ) : (\r\n                    renderSuggestions()\r\n                )}\r\n            </div>\r\n        </OutsideAlerter>\r\n    )\r\n}\r\n"],"names":["OutsideAlerter","React","retryTenTimes","MobileSelect","options","currentPhilosopher","onChangeHandler","onFocusHandlerCallback","placeholder","value","isFetchingOptions","useState","suggestions","setSuggestions","searchText","setSearchText","isFocused","setIsFocused","useEffect","scollToRef","useRef","length","callback","className","type","onFocus","e","onChange","target","regex","RegExp","filter","fullName","test","onBlur","ref","map","id","onClick","undefined","suggestionSelected"],"sourceRoot":""}