{"version":3,"file":"static/js/551.86de9f1d.chunk.js","mappings":"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","sources":["common/static/utils/utils.js","common/utils/commonUtils.js","components/organisms/analysis/generate-quote-image/utils/utils.js","components/organisms/analysis/generate-quote-image/utils/hooks.js","components/organisms/analysis/generate-quote-image/generateQuoteImage.js","components/organisms/home/home-page/utils/utils.js","components/organisms/home/mobile/mobile-menu/utils/utils.js","common/static/assets/images/philosophers|sync|/^/.*$"],"sourcesContent":["import { API_ENDPOINTS } from '../../apis/apiEndpoints'\r\nimport { retryTenTimes } from '../../utils/apiUtils'\r\n\r\nexport const addPhilosopherNameToQuote = (quote, philosopherFullName) => `${quote} â€• ${philosopherFullName}`\r\n\r\nexport const convertQuoteArray = (quoteArr, philosopherFullName) => quoteArr.map((quote) => addPhilosopherNameToQuote(quote, philosopherFullName))\r\n\r\nexport const allocateIdsToData = (data) =>\r\n    data.forEach((element, index) => {\r\n        element.id = index\r\n    })\r\n\r\nexport const doOperationsOnData = ({ data, setData }, sortingMethod) => {\r\n    data = data.slice()\r\n\r\n    if (sortingMethod === 'alphabetical') data.sort((a, b) => a.fullName.localeCompare(b.fullName))\r\n    else data.sort((a, b) => b.id - a.id)\r\n\r\n    setData(data)\r\n}\r\n\r\nexport const addPhilosopherInGlobalData = (philosopherName, { options, setOptions }, quotes) => {\r\n    const newOptions = JSON.parse(JSON.stringify(options))\r\n    if (philosopherName.trim().toLowerCase() === 'all') {\r\n        const index = getPhilosopherObjectIndex(philosopherName, options)\r\n        let existingQuotes\r\n        if (newOptions[index].quotes === undefined) existingQuotes = []\r\n        else {\r\n            existingQuotes = newOptions[index].quotes\r\n        }\r\n        newOptions[index].quotes = [...existingQuotes, ...quotes]\r\n    } else {\r\n        const index = getPhilosopherObjectIndex(philosopherName, options)\r\n        newOptions[index].quotes = quotes\r\n    }\r\n    setOptions(newOptions)\r\n}\r\n\r\nexport const lazyLoadAsset = (philosopherName, { options, setOptions }, callbacks) => {\r\n    return new Promise((resolve, reject) => {\r\n        const fileName = philosopherName.toLowerCase()\r\n        retryTenTimes(() => fetch(API_ENDPOINTS.STATIC_DATA.STATIC_QUOTES + fileName + '.json'))\r\n            .then((response) => response.json())\r\n            .then((data) => {\r\n                callbacks?.map((callback) => callback(data))\r\n                addPhilosopherInGlobalData(philosopherName, { options, setOptions }, data)\r\n                resolve()\r\n            })\r\n            .catch((e) => reject(e))\r\n    })\r\n}\r\n\r\nexport const getPhilosopherObjectIndex = (philosopher, options) => options.findIndex(({ value }) => value === philosopher)\r\n\r\nexport const getPhilosopherData = ({ philosopher, options }) => options.filter(({ value }) => value === philosopher)[0]\r\n\r\nexport const getPhilosopherQuotes = ({ philosopher, options }) => options.filter(({ value }) => value === philosopher)[0]?.quotes\r\n\r\nexport const getCurrentPhilosopherFullname = (currentPhilosopher, options) => {\r\n    const currentPhilosopherData = options[getPhilosopherObjectIndex(currentPhilosopher, options)]\r\n    return currentPhilosopherData.fullName\r\n}\r\n\r\nexport const doesPhilosopherDataExist = (philosopher, options) => {\r\n    if (options[getPhilosopherObjectIndex(philosopher, options)]) return true\r\n    else return false\r\n}\r\n","export const isUndefined = (value) => typeof value === 'undefined'\r\nexport const isObjEmpty = (obj) => Object.values(obj).length === 0 && obj.constructor === Object\r\n\r\nexport function uuidv4() {\r\n    return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, (c) => (c ^ (crypto.getRandomValues(new Uint8Array(1))[0] & (15 >> (c / 4)))).toString(16))\r\n}\r\n","import html2canvas from 'html2canvas'\r\n\r\nconst downloadImage = (blob, fileName) => {\r\n    const fakeLink = window.document.createElement('a')\r\n    fakeLink.style = 'display:none;'\r\n    fakeLink.download = fileName\r\n\r\n    fakeLink.href = blob\r\n\r\n    document.body.appendChild(fakeLink)\r\n    fakeLink.click()\r\n    document.body.removeChild(fakeLink)\r\n\r\n    fakeLink.remove()\r\n}\r\n\r\nexport const exportAsImage = async (element, imageFileName) => {\r\n    const html = document.getElementsByTagName('html')[0]\r\n    const body = document.getElementsByTagName('body')[0]\r\n    let htmlWidth = html.clientWidth\r\n    let bodyWidth = body.clientWidth\r\n    const newWidth = element.scrollWidth - element.clientWidth\r\n    if (newWidth > element.clientWidth) {\r\n        htmlWidth += newWidth\r\n        bodyWidth += newWidth\r\n    }\r\n    html.style.width = htmlWidth + 'px'\r\n    body.style.width = bodyWidth + 'px'\r\n    const canvas = await html2canvas(element, { scale: 3 })\r\n    const image = canvas.toDataURL('image/png', 1.0)\r\n    downloadImage(image, imageFileName)\r\n    html.style.width = null\r\n    body.style.width = null\r\n}\r\n\r\nexport const shareQuote = async (element, imageFileName) => {\r\n    ;(async () => {\r\n        if (!('share' in navigator)) {\r\n            return\r\n        }\r\n        const canvas = await html2canvas(element, { scale: 3 })\r\n        canvas.toBlob(async (blob) => {\r\n            const files = [new File([blob], imageFileName, { type: blob.type })]\r\n            const shareData = {\r\n                files,\r\n            }\r\n            if (navigator.canShare(shareData)) {\r\n                try {\r\n                    await navigator.share(shareData)\r\n                } catch (err) {\r\n                    if (err.name !== 'AbortError') {\r\n                        console.error(err.name, err.message)\r\n                    }\r\n                }\r\n            } else {\r\n                console.warn('Sharing not supported', shareData)\r\n            }\r\n        })\r\n    })()\r\n}\r\n","import { useEffect } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { setCurrentModalName } from '../../../../../common/components/modal/modalRedux'\r\nimport { uuidv4 } from '../../../../../common/utils/commonUtils'\r\nimport { setThemeClassNameOnHTMLTag } from '../../../home/home-page/utils/utils'\r\nimport { exportAsImage, shareQuote } from './utils'\r\n\r\nexport function useCreateQuoteImage(philosopherFullName, share, exportRef, darkMode) {\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        setThemeClassNameOnHTMLTag(true)\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        ;(async function () {\r\n            const filename = `${philosopherFullName}-quote-${uuidv4()}.png`\r\n            if (share !== undefined && share === true) {\r\n                await shareQuote(exportRef.current, filename)\r\n            } else {\r\n                await exportAsImage(exportRef.current, filename)\r\n            }\r\n            if (!darkMode) setThemeClassNameOnHTMLTag(false)\r\n            dispatch(setCurrentModalName(''))\r\n        })()\r\n    }, [exportRef, philosopherFullName, share])\r\n}\r\n","import React, { useRef } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { retryTenTimes } from '../../../../common/utils/apiUtils'\r\nimport { useCreateQuoteImage } from './utils/hooks'\r\nconst QuoteWithImage = React.lazy(() => retryTenTimes(() => import('../quote-with-image/quote-with-image')))\r\nconst QuoteWithoutImage = React.lazy(() => retryTenTimes(() => import('../quote-without-image/quote-without-image')))\r\n\r\nconst GenerateQuoteImage = () => {\r\n    let { quotationText, philosopherFullName, signature, share = false } = useSelector((state) => state.quoteImage)\r\n    const exportRef = useRef()\r\n    const currentPhilosopher = useSelector((state) => state.philosophersData.currentPhilosopher)\r\n    const darkMode = useSelector((state) => state.philosophersData.darkMode)\r\n\r\n    const propsToSend = { exportRef, quotationText, philosopherFullName, signature }\r\n\r\n    useCreateQuoteImage(philosopherFullName, share, exportRef, darkMode)\r\n\r\n    try {\r\n        const imageName = `${currentPhilosopher}.jpg`\r\n        require('../../../../common/static/assets/images/philosophers/' + imageName)\r\n        return <QuoteWithImage {...propsToSend} imageName={imageName} />\r\n    } catch (error) {\r\n        return <QuoteWithoutImage {...propsToSend} />\r\n    }\r\n}\r\n\r\nexport default GenerateQuoteImage\r\n","import { getPhilosopherData } from '../../../../../common/static/utils/utils'\r\nimport { getUserDetails, sendUserDetails } from '../../mobile/mobile-menu/utils/utils'\r\n\r\nexport const setThemeClassNameOnHTMLTag = (value) => {\r\n    let root = document.getElementsByTagName('html')[0]\r\n    root.className = ''\r\n    if (value) {\r\n        root.classList.add('darkTheme')\r\n    } else {\r\n        root.classList.add('lightTheme')\r\n    }\r\n}\r\n\r\nexport const bringIntoOriginalOrder = (originalOptions, newOptions) => originalOptions.map((item) => getPhilosopherData({ philosopher: item.value, options: newOptions })).reverse()\r\n\r\nexport const bringIntoAlphabeticalOrder = (options) => [...options].sort((a, b) => a.fullName.localeCompare(b.fullName))\r\n\r\nexport async function compareWithServerSyncDatesAndMakeAnAPICall(userName, markedQuotes, openSnackbar, setMarkedQuotes, setSyncDate, markedQuoteClientCount) {\r\n    const markedQuotesFromServerCount = await getUserMarkedQuotesCount({ userName })\r\n    if (markedQuotesFromServerCount) {\r\n        if (markedQuotesFromServerCount > markedQuoteClientCount) {\r\n            let { markedQuotesFromServer, dateFromServer } = await getUserDetails({ userName, markedQuotes, openSnackbar, setMarkedQuotes })\r\n            setMarkedQuotes(markedQuotesFromServer)\r\n            openSnackbar('Auto-Sync : Restored all marked quotes!', 4000)\r\n        } else if (markedQuoteClientCount > markedQuotesFromServerCount) {\r\n            await sendUserDetails({ userName, markedQuotes, openSnackbar })\r\n            openSnackbar('Synced marked quotes with server!', 4000)\r\n        }\r\n        setSyncDate(Date.now())\r\n    }\r\n}\r\n","import { API_ENDPOINTS } from '../../../../../../common/apis/apiEndpoints'\r\nimport { retryTenTimes } from '../../../../../../common/utils/apiUtils'\r\n\r\nexport const sendUserDetails = async ({ userName, markedQuotes, openSnackbar, setSyncDate }) => {\r\n    await retryTenTimes(async () => {\r\n        return await fetch(API_ENDPOINTS.MARKED_QUOTES.BACKUP, {\r\n            method: 'post',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({\r\n                userName,\r\n                markedQuotes,\r\n                dateSynced: Date.now(),\r\n            }),\r\n        })\r\n    })\r\n}\r\n\r\nexport const getUserDetails = async ({ userName, markedQuotes, openSnackbar, setMarkedQuotes }) => {\r\n    let response = await retryTenTimes(\r\n        async () =>\r\n            await fetch(API_ENDPOINTS.MARKED_QUOTES.RESTORE, {\r\n                method: 'post',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({\r\n                    userName,\r\n                }),\r\n            })\r\n    )\r\n\r\n    response = await response.json()\r\n    if (response?.ok) {\r\n        try {\r\n            const markedQuotesFromServer = response?.results?.[0]?.markedQuotes\r\n            const markedQuotesFromServerCount = Object.values(markedQuotesFromServer).flat().length\r\n            if (markedQuotesFromServer && markedQuotesFromServerCount > 0) {\r\n                return { markedQuotesFromServer, dateFromServer: response?.results?.[0]?.dateSynced }\r\n                // setMarkedQuotes(response?.results?.[0]?.markedQuotes)\r\n            }\r\n        } catch (error) {\r\n            openSnackbar(JSON.stringify(error))\r\n        }\r\n    } else {\r\n        openSnackbar(JSON.stringify(response.error))\r\n    }\r\n}\r\n\r\nexport const getUserMarkedQuotesCount = async ({ userName }) => {\r\n    let response = await retryTenTimes(\r\n        async () =>\r\n            await fetch(API_ENDPOINTS.MARKED_QUOTES.GET_COUNT, {\r\n                method: 'post',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({\r\n                    userName,\r\n                }),\r\n            })\r\n    )\r\n\r\n    response = await response.json()\r\n    if (response?.ok) {\r\n        return response.count\r\n    } else {\r\n        return null\r\n    }\r\n}\r\n\r\nexport const loginRegister = async ({ apiCallType, userName, password, setIsLoggedIn, openSnackbar, setIsFetching }) => {\r\n    const capitalizedUserName = userName.charAt(0).toUpperCase() + userName.slice(1)\r\n    let response\r\n    setIsFetching(true)\r\n    if (apiCallType === 'login') {\r\n        response = await retryTenTimes(\r\n            async () =>\r\n                await fetch(API_ENDPOINTS.USER.LOGIN, {\r\n                    method: 'post',\r\n                    headers: { 'Content-Type': 'application/json' },\r\n                    body: JSON.stringify({\r\n                        userName,\r\n                        password,\r\n                    }),\r\n                })\r\n        )\r\n    } else {\r\n        response = await retryTenTimes(\r\n            async () =>\r\n                await fetch(API_ENDPOINTS.USER.CREATE, {\r\n                    method: 'post',\r\n                    headers: { 'Content-Type': 'application/json' },\r\n                    body: JSON.stringify({\r\n                        userName,\r\n                        password,\r\n                    }),\r\n                })\r\n        )\r\n    }\r\n\r\n    response = await response.json()\r\n    setIsFetching(false)\r\n\r\n    if (response?.ok) {\r\n        setIsLoggedIn(true)\r\n        openSnackbar(capitalizedUserName + ' ' + JSON.stringify(response.serverResponse))\r\n    } else {\r\n        openSnackbar(JSON.stringify(response.error))\r\n    }\r\n}\r\n","var map = {\n\t\"./BEAUVOIR.jpg\": 9073,\n\t\"./BUKOWSKI.jpg\": 3792,\n\t\"./CARL_JUNG.jpg\": 2063,\n\t\"./FREUD.jpg\": 7393,\n\t\"./MARK_TWAIN.jpg\": 5244,\n\t\"./OSHO.jpg\": 6530,\n\t\"./PETERSON.jpg\": 4500,\n\t\"./RICKY_GERVAIS.png\": 8101,\n\t\"./ROUSSEAU.jpg\": 6961\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 2892;"],"names":["lazyLoadAsset","philosopherName","_ref3","callbacks","options","setOptions","Promise","resolve","reject","fileName","toLowerCase","retryTenTimes","fetch","API_ENDPOINTS","STATIC_DATA","STATIC_QUOTES","then","response","json","data","map","callback","addPhilosopherInGlobalData","_ref2","quotes","newOptions","JSON","parse","stringify","trim","index","getPhilosopherObjectIndex","existingQuotes","undefined","catch","e","philosopher","findIndex","_ref4","value","getPhilosopherData","_ref5","filter","_ref6","getPhilosopherQuotes","_ref7","_options$filter$","_ref8","getCurrentPhilosopherFullname","currentPhilosopher","fullName","doesPhilosopherDataExist","isUndefined","isObjEmpty","obj","Object","values","length","constructor","uuidv4","replace","c","crypto","getRandomValues","Uint8Array","toString","exportAsImage","async","element","imageFileName","html","document","getElementsByTagName","body","htmlWidth","clientWidth","bodyWidth","newWidth","scrollWidth","style","width","downloadImage","blob","fakeLink","window","createElement","download","href","appendChild","click","removeChild","remove","html2canvas","scale","toDataURL","useCreateQuoteImage","philosopherFullName","share","exportRef","darkMode","dispatch","useDispatch","useEffect","setThemeClassNameOnHTMLTag","filename","concat","navigator","toBlob","shareData","files","File","type","canShare","err","name","console","error","message","warn","shareQuote","current","setCurrentModalName","QuoteWithImage","React","QuoteWithoutImage","GenerateQuoteImage","quotationText","signature","useSelector","state","quoteImage","useRef","philosophersData","propsToSend","imageName","require","_jsx","root","className","classList","add","bringIntoOriginalOrder","originalOptions","item","reverse","bringIntoAlphabeticalOrder","sort","a","b","localeCompare","compareWithServerSyncDatesAndMakeAnAPICall","userName","markedQuotes","openSnackbar","setMarkedQuotes","setSyncDate","markedQuoteClientCount","markedQuotesFromServerCount","getUserMarkedQuotesCount","markedQuotesFromServer","dateFromServer","getUserDetails","sendUserDetails","Date","now","_ref","MARKED_QUOTES","BACKUP","method","headers","dateSynced","_response","RESTORE","ok","_response2","_response2$results","_response2$results$","results","flat","_response3","_response3$results","_response3$results$","loginRegister","_response5","apiCallType","password","setIsLoggedIn","setIsFetching","capitalizedUserName","charAt","toUpperCase","slice","USER","LOGIN","CREATE","serverResponse","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","Error","code","keys","module","exports"],"sourceRoot":""}