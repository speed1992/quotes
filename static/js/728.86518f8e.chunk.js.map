{"version":3,"file":"static/js/728.86518f8e.chunk.js","mappings":"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","sources":["common/utils/commonUtils.js","common/utils/localStorageUtils.js","common/utils/staticDataUtils.js","components/organisms/analysis/table/TableBody.js","components/organisms/analysis/table/TableHead.js","components/organisms/analysis/table/useSortableTable.js","components/organisms/analysis/table/table.jsx","components/organisms/analysis/report/report.js","components/organisms/analysis/report/utils/utils.js","components/organisms/home/home-page/utils/utils.js","components/organisms/home/quotes-list/utils/utils.js"],"sourcesContent":["export const isUndefined = (value) => typeof value === 'undefined'\r\nexport const isObjEmpty = (obj) => Object.values(obj).length === 0 && obj.constructor === Object\r\n\r\nexport function uuidv4() {\r\n    return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, (c) => (c ^ (crypto.getRandomValues(new Uint8Array(1))[0] & (15 >> (c / 4)))).toString(16))\r\n}\r\n","import { useEffect, useState } from 'react'\r\n\r\nexport function getStorageValue(key, defaultValue) {\r\n    const saved = localStorage.getItem(key)\r\n    const initial = JSON.parse(saved)\r\n    if (initial === undefined || initial === 'undefined' || initial === 'null' || initial === null) {\r\n        return defaultValue\r\n    } else return initial\r\n}\r\n\r\nexport function setStorageValue(key, value) {\r\n    localStorage.setItem(key, JSON.stringify(value))\r\n}\r\n\r\nexport const useLocalStorage = (key, defaultValue) => {\r\n    const [value, setValue] = useState(() => {\r\n        return getStorageValue(key, defaultValue)\r\n    })\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem(key, JSON.stringify(value))\r\n    }, [key, value])\r\n\r\n    return [value, setValue]\r\n}\r\n","import { getStorageValue } from './localStorageUtils'\r\n\r\nexport const removeReadData = ({ index, currentPhilosopher, markedMode, markedQuotes = {}, setMarkedQuotes, currentData, setCurrentData }) => {\r\n    let newMarkedQuotes = JSON.parse(JSON.stringify(markedQuotes))\r\n    let readQuotesArray = []\r\n\r\n    const READ_ARRAY_LOCALSTORAGE_KEY = `${currentPhilosopher}-MARKED_AS_READ`\r\n    readQuotesArray = getStorageValue(READ_ARRAY_LOCALSTORAGE_KEY, [])\r\n\r\n    if (markedQuotes && markedQuotes[currentPhilosopher] !== undefined) {\r\n        readQuotesArray = [...readQuotesArray, ...markedQuotes[currentPhilosopher]]\r\n    }\r\n\r\n    readQuotesArray = [...new Set(readQuotesArray)]\r\n\r\n    if (index) {\r\n        readQuotesArray.push(index)\r\n    }\r\n\r\n    newMarkedQuotes[currentPhilosopher] = readQuotesArray\r\n    setMarkedQuotes(newMarkedQuotes)\r\n\r\n    const newData = currentData.filter(({ id }, _) => readQuotesArray.indexOf(id) === -1)\r\n    setCurrentData(JSON.parse(JSON.stringify(newData)))\r\n}\r\n","const TableBody = ({ tableData, columns }) => {\r\n    return (\r\n        <tbody>\r\n            {tableData.map((data) => {\r\n                return (\r\n                    <tr key={data.id}>\r\n                        {columns.map(({ accessor }) => {\r\n                            const tData = data[accessor] ? data[accessor] : '——'\r\n                            return <td key={accessor}>{tData}</td>\r\n                        })}\r\n                    </tr>\r\n                )\r\n            })}\r\n        </tbody>\r\n    )\r\n}\r\n\r\nexport default TableBody\r\n","import { useState } from 'react'\r\n\r\nconst TableHead = ({ columns, handleSorting }) => {\r\n    const [sortField, setSortField] = useState('')\r\n    const [order, setOrder] = useState('asc')\r\n\r\n    const handleSortingChange = (accessor) => {\r\n        const sortOrder = accessor === sortField && order === 'asc' ? 'desc' : 'asc'\r\n        setSortField(accessor)\r\n        setOrder(sortOrder)\r\n        handleSorting(accessor, sortOrder)\r\n    }\r\n\r\n    return (\r\n        <thead>\r\n            <tr>\r\n                {columns.map(({ label, accessor, sortable }) => {\r\n                    const cl = sortable ? (sortField === accessor && order === 'asc' ? 'up' : sortField === accessor && order === 'desc' ? 'down' : 'default') : ''\r\n                    return (\r\n                        <th key={accessor} onClick={sortable ? () => handleSortingChange(accessor) : null} className={cl}>\r\n                            {label}\r\n                        </th>\r\n                    )\r\n                })}\r\n            </tr>\r\n        </thead>\r\n    )\r\n}\r\n\r\nexport default TableHead\r\n","import { useState } from 'react'\r\n\r\nfunction getDefaultSorting(defaultTableData, columns) {\r\n    const sorted = [...defaultTableData].sort((a, b) => {\r\n        const filterColumn = columns.filter((column) => column.sortbyOrder)\r\n\r\n        let { accessor = 'id', sortbyOrder = 'asc' } = Object.assign({}, ...filterColumn)\r\n\r\n        if (a[accessor] === null) return 1\r\n        if (b[accessor] === null) return -1\r\n        if (a[accessor] === null && b[accessor] === null) return 0\r\n\r\n        const ascending = a[accessor].toString().localeCompare(b[accessor].toString(), 'en', {\r\n            numeric: true,\r\n        })\r\n\r\n        return sortbyOrder === 'asc' ? ascending : -ascending\r\n    })\r\n    return sorted\r\n}\r\n\r\nexport const useSortableTable = (data, columns) => {\r\n    const [tableData, setTableData] = useState(getDefaultSorting(data, columns))\r\n\r\n    const handleSorting = (sortField, sortOrder) => {\r\n        if (sortField) {\r\n            const sorted = [...tableData].sort((a, b) => {\r\n                if (a[sortField] === null) return 1\r\n                if (b[sortField] === null) return -1\r\n                if (a[sortField] === null && b[sortField] === null) return 0\r\n                return (\r\n                    a[sortField].toString().localeCompare(b[sortField].toString(), 'en', {\r\n                        numeric: true,\r\n                    }) * (sortOrder === 'asc' ? 1 : -1)\r\n                )\r\n            })\r\n            setTableData(sorted)\r\n        }\r\n    }\r\n\r\n    return [tableData, handleSorting]\r\n}\r\n","import './table.css'\r\nimport TableBody from './TableBody'\r\nimport TableHead from './TableHead'\r\nimport { useSortableTable } from './useSortableTable'\r\n\r\nconst Table = ({ caption, data, columns }) => {\r\n    const [tableData, handleSorting] = useSortableTable(data, columns)\r\n\r\n    return (\r\n        <>\r\n            <table className=\"table\">\r\n                {caption && <caption>{caption}</caption>}\r\n                <TableHead {...{ columns, handleSorting }} />\r\n                <TableBody {...{ columns, tableData }} />\r\n            </table>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Table\r\n","import { useEffect, useState } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { setDarkModeClassOnHTMLTag } from '../../home/home-page/utils/utils'\r\nimport Table from '../table/table'\r\nimport columns from './columns.json'\r\nimport { createData } from './utils/utils'\r\n\r\nconst Report = () => {\r\n    const [data, setData] = useState([])\r\n    const markedQuotes = useSelector((state) => state.philosophersData.markedQuotes)\r\n    const options = useSelector((state) => state.philosophersData.options)\r\n    const darkMode = useSelector((state) => state.philosophersData.darkMode)\r\n\r\n    useEffect(() => {\r\n        createData({ markedQuotes, options, setData })\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        setDarkModeClassOnHTMLTag(darkMode)\r\n    }, [darkMode])\r\n\r\n    return data.length > 0 ? (\r\n        <Table data={data} columns={columns} />\r\n    ) : (\r\n        <>\r\n            <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', height: '100vh', fontSize: '2rem', margin: '3rem' }}>No records found!</div>\r\n            <div style={{ fontSize: '2rem', margin: '3rem' }}>Please use, marked mode feature, mark quotes as read and come back.</div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Report\r\n","import { getPhilosopherData } from '../../../../../common/static/utils/utils'\r\nimport { isUndefined, uuidv4 } from '../../../../../common/utils/commonUtils'\r\nimport { getPhilosopherFullName } from '../../../home/quotes-list/utils/utils'\r\n\r\nexport const createData = ({ markedQuotes, options, setData }) => {\r\n    const data = []\r\n    let sum = 0\r\n    for (const key in markedQuotes) {\r\n        if (markedQuotes.hasOwnProperty(key) && getPhilosopherData({ philosopher: key, options })) {\r\n            let readCount = 0\r\n            if (!isUndefined(markedQuotes[key])) {\r\n                readCount = markedQuotes[key].length\r\n                sum += readCount\r\n            }\r\n            const obj = { philosopher: getPhilosopherFullName({ currentPhilosopher: key, options }), readCount: readCount, id: uuidv4() }\r\n            data.push(obj)\r\n        }\r\n    }\r\n    const obj = { philosopher: 'Total Read', readCount: sum, id: uuidv4() }\r\n    data.push(obj)\r\n    setData(data)\r\n}\r\n","import { getPhilosopherData } from '../../../../../common/static/utils/utils'\r\n\r\nexport const setDarkModeClassOnHTMLTag = (value, className = 'darkTheme') => {\r\n    var root = document.getElementsByTagName('html')[0]\r\n    if (value) {\r\n        root.classList.add(className)\r\n    } else {\r\n        root.classList.remove(className)\r\n    }\r\n}\r\n\r\nexport const bringIntoOriginalOrder = (originalOptions, newOptions) => originalOptions.map((item) => getPhilosopherData({ philosopher: item.value, options: newOptions })).reverse()\r\n\r\nexport const bringIntoAlphabeticalOrder = (options) => [...options].sort((a, b) => a.fullName.localeCompare(b.fullName))\r\n","import { isObjEmpty } from '../../../../../common/utils/commonUtils'\r\nimport { removeReadData } from '../../../../../common/utils/staticDataUtils'\r\n\r\nexport const changeQuotesData = ({ currentPhilosopher, currentData, setCurrentData, options }, { markedMode = null, markedQuotes, setMarkedQuotes }) => {\r\n    if (currentData) setCurrentData(currentData)\r\n    if (markedMode !== undefined && markedMode) removeReadData({ currentPhilosopher, markedMode, markedQuotes, setMarkedQuotes, currentData, setCurrentData })\r\n}\r\n\r\nexport const getPhilosopherFullName = ({ currentPhilosopher, options }) => {\r\n    const currentIndex = options.filter(({ value }) => currentPhilosopher === value)\r\n    if (!isObjEmpty(currentIndex)) return currentIndex && currentIndex[0].fullName\r\n}\r\n\r\nexport const getPhilosopherFullName_i10n = ({ currentPhilosopher, options }) => {\r\n    const currentIndex = options.filter(({ value }) => currentPhilosopher === value)\r\n    if (!isObjEmpty(currentIndex)) return currentIndex && currentIndex[0].fullNameInOtherLanguages\r\n}\r\n\r\nexport const searchByWordLength = (start, end, quotes, { markedMode, markedQuotes, setMarkedQuotes }, { setCurrentData, currentPhilosopher }) => {\r\n    if (quotes !== undefined) {\r\n        if (typeof start === 'string' && start.trim() === '') start = 0\r\n\r\n        const newData = quotes.filter(({ quote }) => {\r\n            const wordCount = getWordCount(quote)\r\n\r\n            if (end && end !== '') {\r\n                if (wordCount >= start && wordCount <= end) {\r\n                    return true\r\n                }\r\n            }\r\n            if (end === '') {\r\n                if (wordCount >= start) {\r\n                    return true\r\n                }\r\n            }\r\n\r\n            return false\r\n        })\r\n        changeQuotesData({ currentData: newData, setCurrentData, currentPhilosopher }, { markedMode, markedQuotes, setMarkedQuotes })\r\n    }\r\n}\r\n\r\nexport function getWordCount(str) {\r\n    return str.split(' ').filter(function (n) {\r\n        return n !== ''\r\n    }).length\r\n}\r\n"],"names":["isUndefined","value","isObjEmpty","obj","Object","values","length","constructor","uuidv4","replace","c","crypto","getRandomValues","Uint8Array","toString","getStorageValue","key","defaultValue","saved","localStorage","getItem","initial","JSON","parse","undefined","removeReadData","index","currentPhilosopher","markedMode","markedQuotes","setMarkedQuotes","currentData","setCurrentData","newMarkedQuotes","stringify","readQuotesArray","READ_ARRAY_LOCALSTORAGE_KEY","Set","push","newData","filter","_","id","indexOf","tableData","columns","map","data","accessor","tData","handleSorting","useState","sortField","setSortField","order","setOrder","label","sortable","cl","onClick","sortOrder","handleSortingChange","className","useSortableTable","defaultTableData","sort","a","b","filterColumn","column","sortbyOrder","assign","ascending","localeCompare","numeric","getDefaultSorting","setTableData","sorted","caption","setData","useSelector","state","philosophersData","options","darkMode","useEffect","sum","hasOwnProperty","getPhilosopherData","philosopher","readCount","getPhilosopherFullName","createData","setDarkModeClassOnHTMLTag","style","display","alignItems","justifyContent","height","fontSize","margin","root","document","getElementsByTagName","classList","add","remove","bringIntoOriginalOrder","originalOptions","newOptions","item","reverse","bringIntoAlphabeticalOrder","fullName","changeQuotesData","currentIndex","getPhilosopherFullName_i10n","fullNameInOtherLanguages","searchByWordLength","start","end","quotes","trim","quote","wordCount","split","n"],"sourceRoot":""}