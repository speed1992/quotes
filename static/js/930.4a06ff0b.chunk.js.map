{"version":3,"file":"static/js/930.4a06ff0b.chunk.js","mappings":"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","sources":["webpack://quotes/./src/components/organisms/home/mobile/mobile-select/mobile-select.module.css?ae0e","components/organisms/home/mobile/mobile-select/mobile-select.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"typeAheadDropDown\":\"mobile-select_typeAheadDropDown__M8PaJ\",\"darkTheme\":\"mobile-select_darkTheme__ZRirJ\",\"dropDownList\":\"mobile-select_dropDownList__EyTz8\",\"active\":\"mobile-select_active__Xic62\"};","import React, { useEffect, useRef, useState } from 'react'\r\nimport { retryTenTimes } from '../../../../../common/utils/apiUtils'\r\nimport styles from './mobile-select.module.css'\r\nconst OutsideAlerter = React.lazy(() => retryTenTimes(() => import('../../../../../common/components/outside-alerter/outside-alerter')))\r\n\r\nexport default function MobileSelect({ options, currentPhilosopher, onChangeHandler, onFocusHandlerCallback, placeholder, value, isFetchingOptions, recentPhilosophers, darkMode }) {\r\n    const [suggestions, setSuggestions] = useState([])\r\n    const [searchText, setSearchText] = useState([])\r\n    const [isFocused, setIsFocused] = useState(false)\r\n    useEffect(() => setSearchText(value), [value])\r\n    const scollToRef = useRef()\r\n\r\n    useEffect(() => {\r\n        if (isFocused && options.length > 1) {\r\n            setSearchText('')\r\n            setSuggestions(options)\r\n            setIsFocused(false)\r\n        }\r\n    }, [options.length, isFocused])\r\n\r\n    const onFocusHandler = (e) => {\r\n        onFocusHandlerCallback()\r\n        setIsFocused(true)\r\n    }\r\n\r\n    const onTextChange = (e) => {\r\n        const value = e.target.value\r\n        if (value === '') setSuggestions(options)\r\n        else {\r\n            let suggestions = []\r\n            if (value.length > 0) {\r\n                const regex = new RegExp(`${value}`, `i`)\r\n                suggestions = options.filter(({ fullName }) => regex.test(fullName))\r\n            }\r\n\r\n            setSuggestions(suggestions)\r\n        }\r\n        setSearchText(value)\r\n    }\r\n\r\n    const onBlurHandler = () => {\r\n        setSearchText(value)\r\n    }\r\n\r\n    const suggestionSelected = (fullName, value) => {\r\n        if (value !== undefined) {\r\n            setSuggestions([])\r\n            setSearchText(fullName)\r\n            onChangeHandler({ target: { value } })\r\n        }\r\n    }\r\n\r\n    const renderSuggestions = () => {\r\n        if (suggestions.length === 0) {\r\n            return null\r\n        }\r\n        return (\r\n            <ul ref={scollToRef} className={`${styles.dropDownList} ${darkMode && styles.darkTheme}`}>\r\n                {suggestions?.map(({ fullName, value }, index) => (\r\n                    <li style={searchText === '' && index < recentPhilosophers?.length ? { color: '#FF00FF' } : {}} id={currentPhilosopher === value ? 'active' : ''} key={value} value={value} onClick={(e) => suggestionSelected(fullName, value)}>\r\n                        {fullName}\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <OutsideAlerter callback={() => setSuggestions([])}>\r\n            <div className={`${styles.typeAheadDropDown} ${darkMode ? styles.darkTheme : ''}`}>\r\n                <input name=\"search-philosopher\" type=\"text\" onFocus={onFocusHandler} onChange={onTextChange} placeholder={placeholder} value={searchText} onBlur={onBlurHandler} />\r\n                {isFetchingOptions ? (\r\n                    <ul className={styles.dropDownList}>\r\n                        <li>Loading...</li>\r\n                    </ul>\r\n                ) : (\r\n                    renderSuggestions()\r\n                )}\r\n            </div>\r\n        </OutsideAlerter>\r\n    )\r\n}\r\n"],"names":["OutsideAlerter","React","retryTenTimes","MobileSelect","_ref","options","currentPhilosopher","onChangeHandler","onFocusHandlerCallback","placeholder","value","isFetchingOptions","recentPhilosophers","darkMode","_useState","useState","_useState2","_slicedToArray","suggestions","setSuggestions","_useState3","_useState4","searchText","setSearchText","_useState5","_useState6","isFocused","setIsFocused","useEffect","scollToRef","useRef","length","_jsx","callback","children","_jsxs","className","concat","styles","typeAheadDropDown","darkTheme","name","type","onFocus","e","onChange","target","regex","RegExp","filter","_ref2","fullName","test","onBlur","dropDownList","ref","map","_ref3","index","style","color","id","onClick","undefined","suggestionSelected"],"sourceRoot":""}