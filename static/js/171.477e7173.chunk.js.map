{"version":3,"file":"static/js/171.477e7173.chunk.js","mappings":"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","sources":["common/utils/utils.js","common/utils/searchUtils.js","components/organisms/home/header-layout/header-layout.jsx","components/organisms/home/lazy-load-quote-list/lazy-load-quote-list.jsx","webpack://quotes/./src/components/organisms/home/home-page/home-page.module.css?86c4","components/organisms/home/home-page/home-page.js","components/organisms/home/home-page/utils/hooks.js","components/organisms/home/home-page/utils/sortingHook.js"],"sourcesContent":["import { worker } from '../web-workers/worker'\r\n\r\nexport const scrollToFirstRow = (listRef) => {\r\n    if (listRef.current) {\r\n        listRef.current.scrollToRow(0)\r\n    }\r\n}\r\n\r\nexport const scrollToMemorizedRow = (listRef, scrollPosition, currentData) => {\r\n    if (currentData.length > 0 && listRef.current) {\r\n        if (scrollPosition !== undefined && scrollPosition !== 'undefined' && scrollPosition && scrollPosition > 0) {\r\n            listRef.current.scrollToRow(scrollPosition)\r\n        } else {\r\n            scrollToFirstRow(listRef)\r\n        }\r\n    }\r\n}\r\n\r\nexport const scrollToQuoteId = (listRef, scrollObject, currentData, currentPhilosopher) => {\r\n    const quoteId = scrollObject[currentPhilosopher]\r\n    if (currentData?.length > 0 && listRef.current) {\r\n        if (quoteId !== undefined && quoteId !== 'undefined' && quoteId && quoteId > 0) {\r\n            const index = currentData.findIndex(({ id }) => {\r\n                return id === quoteId\r\n            })\r\n            if (index > -1) listRef.current.scrollToRow(index)\r\n        } else {\r\n            scrollToFirstRow(listRef)\r\n        }\r\n    }\r\n}\r\n\r\nexport const search = ({ searchText, currentData, setCurrentData }) => {\r\n    return new Promise((resolve) => {\r\n        if (currentData !== undefined) {\r\n            worker.postMessage({ currentData, searchText, filterName: 'searchTermFilter' })\r\n            worker.onmessage = (event) => {\r\n                const filteredQuotesFromWorker = JSON.parse(eval(`(${JSON.stringify(event.data)})`))\r\n                resolve(filteredQuotesFromWorker)\r\n            }\r\n        }\r\n    })\r\n}\r\n\r\nexport const isMobile = () => window.innerWidth <= 600\r\n\r\nexport const isDesktop = () => window.innerWidth >= 600\r\n","import { changeQuotesData, searchByWordLength } from '../../components/organisms/home/quotes-list/utils/utils.js'\r\nimport { search } from './utils.js'\r\n\r\nexport async function applyFilters({ searchText, start, end, currentPhilosopher, currentData, originalData, setCurrentData, options }, { markedMode = false, markedQuotes, setMarkedQuotes }) {\r\n    let dataForSearch = []\r\n    if (searchText === '' && start == 1 && end == '') changeQuotesData({ currentPhilosopher, currentData: originalData, setCurrentData, options }, { markedMode, markedQuotes, setMarkedQuotes })\r\n    else {\r\n        dataForSearch = await search({ searchText, currentData: originalData, setCurrentData, currentPhilosopher, options })\r\n        if (dataForSearch) await searchByWordLength(start, end, dataForSearch, { markedMode, markedQuotes, setMarkedQuotes }, { currentData, setCurrentData, originalData, currentPhilosopher })\r\n    }\r\n}\r\n","import React, { Suspense } from 'react'\r\nimport { retryTenTimes } from '../../../../common/utils/apiUtils'\r\nimport { isMobile } from '../../../../common/utils/utils'\r\nimport './header-layout.css'\r\nconst MobileHeader = React.lazy(() => retryTenTimes(() => import('../mobile/mobile-header/mobile-header')))\r\nconst DesktopHeader = React.lazy(() => retryTenTimes(() => import('../desktop/desktop-header/desktop-header')))\r\n\r\nexport const Header = (props) => {\r\n    return (\r\n        <Suspense fallback={''}>\r\n            {isMobile() ? (\r\n                <div className=\"mobile\">\r\n                    <MobileHeader {...props} />\r\n                </div>\r\n            ) : (\r\n                <div className=\"desktop\">\r\n                    <DesktopHeader {...props} />\r\n                </div>\r\n            )}\r\n        </Suspense>\r\n    )\r\n}\r\n","import React, { useEffect } from 'react'\r\nimport { getPhilosopherQuotes, lazyLoadAsset } from '../../../../common/static/utils/utils'\r\nimport { retryTenTimes } from '../../../../common/utils/apiUtils'\r\nconst Loader = React.lazy(() => retryTenTimes(() => import('../../../../common/components/loader/loader')))\r\nconst QuotesList = React.lazy(() => retryTenTimes(() => import('../quotes-list/quotes-list')))\r\n\r\nexport function LazyLoadQuoteList(props) {\r\n    const { currentPhilosopher, setCurrentData, options, setOptions, setQuotesLoaded, isFetching, setIsFetching } = props\r\n\r\n    async function lazyInit() {\r\n        try {\r\n            if (currentPhilosopher !== undefined) {\r\n                const currentPhilosopherQuotes = getPhilosopherQuotes({ philosopher: currentPhilosopher, options })\r\n                if (!currentPhilosopherQuotes) {\r\n                    setIsFetching(true)\r\n                    await lazyLoadAsset(currentPhilosopher, { options, setOptions }, setQuotesLoaded, [setCurrentData])\r\n                }\r\n            }\r\n\r\n            setIsFetching(false)\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        lazyInit()\r\n    }, [currentPhilosopher])\r\n\r\n    return isFetching ? <Loader /> : <QuotesList {...props} />\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"home-page_content__X9oEf\",\"homepage\":\"home-page_homepage__Bl4LI\"};","import React, { useEffect } from 'react'\r\nimport { Helmet } from 'react-helmet'\r\nimport AutoSizer from 'react-virtualized/dist/commonjs/AutoSizer'\r\nimport { doesPhilosopherDataExist } from '../../../../common/static/utils/utils'\r\nimport { retryTenTimes } from '../../../../common/utils/apiUtils'\r\nimport { applyFilters } from '../../../../common/utils/searchUtils'\r\nimport { isDesktop } from '../../../../common/utils/utils'\r\nimport { Header } from '../header-layout/header-layout'\r\nimport { LazyLoadQuoteList } from '../lazy-load-quote-list/lazy-load-quote-list'\r\nimport { getPhilosopherFullName } from '../quotes-list/utils/utils'\r\nimport styles from './home-page.module.css'\r\nimport { useHomePageHooks } from './utils/hooks'\r\nimport { useSortingHooks } from './utils/sortingHook'\r\nimport { setThemeClassNameOnHTMLTag } from './utils/utils'\r\nconst Loader = React.lazy(() => retryTenTimes(() => import('../../../../common/components/loader/loader')))\r\n\r\nconst HomePage = () => {\r\n    let propsToSend = useHomePageHooks()\r\n    const { options, sorting, setSorting } = useSortingHooks()\r\n\r\n    const { start, end, searchText, currentPhilosopher, currentData, markedMode, quotesLoaded, markedQuotes, darkMode, setDarkMode, originalData, isFetching, setCurrentData, setMarkedQuotes, isFetchingOptions, setIsFetchingOptions } = propsToSend\r\n\r\n    propsToSend = { ...propsToSend, setSorting, sorting, isFetchingOptions, setIsFetchingOptions }\r\n\r\n    useEffect(() => {\r\n        if (originalData) {\r\n            applyFilters({ searchText, start, end, currentPhilosopher, currentData, originalData, setCurrentData, options }, { markedMode, markedQuotes, setMarkedQuotes })\r\n        }\r\n    }, [start, end, searchText, markedMode, quotesLoaded, currentPhilosopher, currentData.length, markedQuotes[currentPhilosopher]?.quotes?.length])\r\n\r\n    useEffect(() => {\r\n        setThemeClassNameOnHTMLTag(darkMode)\r\n    }, [darkMode])\r\n\r\n    useEffect(() => {\r\n        if (isDesktop()) {\r\n            setDarkMode(false)\r\n            setThemeClassNameOnHTMLTag(false)\r\n        }\r\n    }, [darkMode])\r\n\r\n    if (!doesPhilosopherDataExist(currentPhilosopher, options)) return <></>\r\n    return (\r\n        <div className={styles.homepage}>\r\n            <Helmet>\r\n                <meta charSet=\"utf-8\" />\r\n                <title>{getPhilosopherFullName({ currentPhilosopher, options })} Quotes</title>\r\n                <meta name=\"description\" content=\"Life changing quotations by greatest philosophers\" />\r\n                <link rel=\"canonical\" href=\"https://speed1992.github.io/quotes/\" />\r\n            </Helmet>\r\n            {isFetching ? (\r\n                <Loader />\r\n            ) : (\r\n                <>\r\n                    <Header {...propsToSend} />\r\n                    <div className={styles.content}>\r\n                        <AutoSizer>{({ height, width }) => <LazyLoadQuoteList {...propsToSend} width={width} height={height} />}</AutoSizer>\r\n                    </div>\r\n                </>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HomePage\r\n","import { useEffect, useRef, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { useSnackbar } from 'react-simple-snackbar'\r\nimport { doesPhilosopherDataExist, getPhilosopherQuotes } from '../../../../../common/static/utils/utils'\r\nimport { onFocusHandler } from '../../desktop/desktop-header/utils/utils'\r\nimport { setCurrentDataRedux, setCurrentPhilosopherRedux, setDarkModeRedux, setEndRedux, setIsLoggedInRedux, setMarkedModeRedux, setMarkedQuotesRedux, setOptionsRedux, setOriginalOptionsRedux, setPasswordRedux, setQuotesLoadedRedux, setScheduledPostsRedux, setScrollPositionRedux, setSearchTextRedux, setStartRedux, setSyncDateRedux, setUserNameRedux } from '../homePageRedux/homePageRedux'\r\nimport { compareWithServerSyncDatesAndMakeAnAPICall, getClientSyncDates } from './utils'\r\n\r\nexport function useHomePageHooks() {\r\n    const [openSnackbar] = useSnackbar()\r\n    const listRef = useRef()\r\n    const dispatch = useDispatch()\r\n    const start = useSelector((state) => state?.philosophersData?.start)\r\n    const end = useSelector((state) => state?.philosophersData?.end)\r\n    const searchText = useSelector((state) => state?.philosophersData?.searchText)\r\n    const currentPhilosopher = useSelector((state) => state?.philosophersData?.currentPhilosopher)\r\n    const currentData = useSelector((state) => state?.philosophersData?.currentData)\r\n    const markedMode = useSelector((state) => state?.philosophersData?.markedMode)\r\n    const options = useSelector((state) => state?.philosophersData?.options)\r\n    const quotesLoaded = useSelector((state) => state?.philosophersData?.quotesLoaded)\r\n    const markedQuotes = useSelector((state) => state?.philosophersData?.markedQuotes)\r\n    const scheduledPosts = useSelector((state) => state?.philosophersData?.scheduledPosts)\r\n    const darkMode = useSelector((state) => state?.philosophersData?.darkMode)\r\n    const scrollPosition = useSelector((state) => state?.philosophersData?.scrollPosition)\r\n    const originalData = getPhilosopherQuotes({ philosopher: currentPhilosopher, options })\r\n    const originalOptions = useSelector((state) => state?.philosophersData?.originalOptions)\r\n    const userName = useSelector((state) => state?.philosophersData?.userName)\r\n    const isLoggedIn = useSelector((state) => state?.philosophersData?.isLoggedIn)\r\n    const password = useSelector((state) => state?.philosophersData?.password)\r\n    const syncDate = useSelector((state) => state?.philosophersData?.syncDate)\r\n    const sorting = useSelector((state) => state.philosophersData.sorting)\r\n    const voiceSpeed = useSelector((state) => state.philosophersData.voiceSpeed)\r\n    const [isFetching, setIsFetching] = useState(false)\r\n    const [isFetchingOptions, setIsFetchingOptions] = useState(false)\r\n    const [rowsRendered, setRowsRendered] = useState(false)\r\n\r\n    const setStart = (value) => dispatch(setStartRedux(value))\r\n    const setEnd = (value) => dispatch(setEndRedux(value))\r\n    const setSearchText = (value) => dispatch(setSearchTextRedux(value))\r\n    const setMarkedMode = (value) => dispatch(setMarkedModeRedux(value))\r\n    const setCurrentPhilosopher = (name) => dispatch(setCurrentPhilosopherRedux(name))\r\n    const setCurrentData = (data) => dispatch(setCurrentDataRedux(data))\r\n    const setOptions = (value) => dispatch(setOptionsRedux(value))\r\n    const setQuotesLoaded = (value) => dispatch(setQuotesLoadedRedux(value))\r\n    const setMarkedQuotes = (value) => dispatch(setMarkedQuotesRedux(value))\r\n    const setScheduledQuotes = (value) => dispatch(setScheduledPostsRedux(value))\r\n    const setDarkMode = (value) => dispatch(setDarkModeRedux(value))\r\n    const setScrollPosition = (value) => dispatch(setScrollPositionRedux(value))\r\n    const setOriginalOptions = (value) => dispatch(setOriginalOptionsRedux(value))\r\n    const setUserName = (value) => dispatch(setUserNameRedux(value))\r\n    const setIsLoggedIn = (value) => dispatch(setIsLoggedInRedux(value))\r\n    const setPassword = (value) => dispatch(setPasswordRedux(value))\r\n    const setSyncDate = (value) => dispatch(setSyncDateRedux(value))\r\n\r\n    useEffect(() => {\r\n        if (isLoggedIn) {\r\n            ;(async () => {\r\n                const markedQuoteClientCount = Object.values(markedQuotes).flat().length\r\n                let { currentClientDate, lastSyncClientDate } = getClientSyncDates(syncDate)\r\n\r\n                if (currentClientDate > lastSyncClientDate) {\r\n                    await compareWithServerSyncDatesAndMakeAnAPICall(userName, markedQuotes, openSnackbar, setMarkedQuotes, setSyncDate, markedQuoteClientCount, currentClientDate)\r\n                }\r\n            })()\r\n        }\r\n    }, [isLoggedIn])\r\n\r\n    useEffect(() => {\r\n        if (!doesPhilosopherDataExist(currentPhilosopher, options)) {\r\n            onFocusHandler({ options, setOptions, isLoggedIn, setSyncDate, isFetchingOptions, setIsFetchingOptions, originalOptions, setOriginalOptions, sorting })\r\n        }\r\n    }, [currentPhilosopher])\r\n\r\n    return { listRef, dispatch, start, end, searchText, currentPhilosopher, currentData, markedMode, options, quotesLoaded, markedQuotes, scheduledPosts, darkMode, scrollPosition, originalData, isFetching, setIsFetching, setStart, setEnd, setSearchText, setMarkedMode, setCurrentPhilosopher, setCurrentData, setOptions, setQuotesLoaded, setMarkedQuotes, setScheduledQuotes, setDarkMode, setScrollPosition, originalOptions, setOriginalOptions, userName, setUserName, isLoggedIn, setIsLoggedIn, password, setPassword, isFetchingOptions, setIsFetchingOptions, rowsRendered, setRowsRendered, syncDate, setSyncDate, voiceSpeed }\r\n}\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { ALPHABETICAL, LATEST } from '../constants/constants'\r\nimport { setOptionsRedux, setSortingRedux } from '../homePageRedux/homePageRedux'\r\nimport { bringIntoAlphabeticalOrder, bringIntoOriginalOrder } from './utils'\r\n\r\nexport function useSortingHooks() {\r\n    const dispatch = useDispatch()\r\n    const originalOptions = useSelector((state) => state.philosophersData.originalOptions)\r\n    const options = useSelector((state) => state.philosophersData.options)\r\n    const sorting = useSelector((state) => state.philosophersData.sorting)\r\n    const setSorting = (value) => dispatch(setSortingRedux(value))\r\n\r\n    useEffect(() => {\r\n        const setOptions = (value) => dispatch(setOptionsRedux(value))\r\n        let resultOptions = []\r\n\r\n        if (originalOptions.length > 1) {\r\n            if (sorting === LATEST) {\r\n                resultOptions = bringIntoOriginalOrder(originalOptions, options)\r\n                setOptions(resultOptions)\r\n            } else if (sorting === ALPHABETICAL) {\r\n                resultOptions = bringIntoAlphabeticalOrder(options)\r\n                setOptions(resultOptions)\r\n            }\r\n        }\r\n    }, [sorting])\r\n\r\n    return { sorting, setSorting, options, originalOptions }\r\n}\r\n"],"names":["scrollToFirstRow","listRef","current","scrollToRow","scrollToMemorizedRow","scrollPosition","currentData","length","undefined","scrollToQuoteId","scrollObject","currentPhilosopher","quoteId","index","findIndex","_ref","id","search","_ref2","searchText","setCurrentData","Promise","resolve","worker","postMessage","filterName","onmessage","event","filteredQuotesFromWorker","JSON","parse","eval","concat","stringify","data","isMobile","window","innerWidth","isDesktop","_applyFilters","_asyncToGenerator","_regeneratorRuntime","mark","_callee","start","end","originalData","options","_ref2$markedMode","markedMode","markedQuotes","setMarkedQuotes","dataForSearch","wrap","_context","prev","next","changeQuotesData","sent","searchByWordLength","stop","apply","arguments","MobileHeader","React","retryTenTimes","DesktopHeader","Header","props","_jsx","Suspense","fallback","children","className","_objectSpread","Loader","QuotesList","LazyLoadQuoteList","setOptions","setQuotesLoaded","isFetching","setIsFetching","_lazyInit","getPhilosopherQuotes","philosopher","lazyLoadAsset","t0","console","log","useEffect","lazyInit","_markedQuotes$current","_markedQuotes$current2","propsToSend","_useSnackbar","useSnackbar","openSnackbar","_slicedToArray","useRef","dispatch","useDispatch","useSelector","state","_state$philosophersDa","philosophersData","_state$philosophersDa2","_state$philosophersDa3","_state$philosophersDa4","_state$philosophersDa5","_state$philosophersDa6","_state$philosophersDa7","quotesLoaded","_state$philosophersDa8","_state$philosophersDa9","scheduledPosts","_state$philosophersDa10","darkMode","_state$philosophersDa11","_state$philosophersDa12","originalOptions","_state$philosophersDa13","userName","_state$philosophersDa14","isLoggedIn","_state$philosophersDa15","password","_state$philosophersDa16","syncDate","_state$philosophersDa17","sorting","voiceSpeed","_useState","useState","_useState2","_useState3","_useState4","isFetchingOptions","setIsFetchingOptions","_useState5","_useState6","rowsRendered","setRowsRendered","value","setOptionsRedux","setMarkedQuotesRedux","setOriginalOptions","setOriginalOptionsRedux","setSyncDate","setSyncDateRedux","markedQuoteClientCount","_getClientSyncDates","currentClientDate","lastSyncClientDate","Object","values","flat","getClientSyncDates","compareWithServerSyncDatesAndMakeAnAPICall","doesPhilosopherDataExist","onFocusHandler","setStart","setStartRedux","setEnd","setEndRedux","setSearchText","setSearchTextRedux","setMarkedMode","setMarkedModeRedux","setCurrentPhilosopher","name","setCurrentPhilosopherRedux","setCurrentDataRedux","setQuotesLoadedRedux","setScheduledQuotes","setScheduledPostsRedux","setDarkMode","setDarkModeRedux","setScrollPosition","setScrollPositionRedux","setUserName","setUserNameRedux","setIsLoggedIn","setIsLoggedInRedux","setPassword","setPasswordRedux","useHomePageHooks","_useSortingHooks","LATEST","bringIntoOriginalOrder","ALPHABETICAL","bringIntoAlphabeticalOrder","setSorting","setSortingRedux","useSortingHooks","_propsToSend","_x","_x2","applyFilters","quotes","setThemeClassNameOnHTMLTag","_jsxs","styles","Helmet","charSet","getPhilosopherFullName","content","rel","href","_Fragment","AutoSizer","height","width"],"sourceRoot":""}