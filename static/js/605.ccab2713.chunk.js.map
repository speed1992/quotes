{"version":3,"file":"static/js/605.ccab2713.chunk.js","mappings":"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","sources":["webpack://quotes/./src/common/small-loader/small-loader.module.css?1d92","common/small-loader/small-loader.js","common/utils/ruleEngine.js","webpack://quotes/./src/components/organisms/home/row/styles/row.module.css?d653","components/organisms/home/row/row.js","common/utils/debounce.js","webpack://quotes/./src/components/organisms/home/quotes-list/quote-list.module.css?eaaf","components/organisms/analysis/no-search-results/no-search-results.jsx","components/organisms/home/quotes-list/utils/listUtils.js","components/organisms/home/quotes-list/utils/ruleEngine/rules.js","components/organisms/home/quotes-list/quotes-list.jsx","components/organisms/home/row/utils/utils.js","common/utils/stringUtils.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"loader\":\"small-loader_loader__ulY5G\",\"spin\":\"small-loader_spin__SOsfI\",\"darkTheme\":\"small-loader_darkTheme__z-xia\"};","import React from 'react'\r\nimport styles from './small-loader.module.css'\r\n\r\nconst SmallLoader = ({ darkMode }) => <span className={`${styles.loader} ${darkMode ? styles.darkTheme : ''}`}> </span>\r\n\r\nexport default SmallLoader\r\n","export const ruleEngine = {\r\n    makeDecision: function (rules, { value, params }) {\r\n        for (let i = 0; i <= rules.length; i++) {\r\n            const returnValue = rules[i](value, params)\r\n            if (returnValue) return returnValue\r\n        }\r\n    },\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"actionItems\":\"row_actionItems__Y-npM\",\"row\":\"row_row__G696K\",\"quoteDescription\":\"row_quoteDescription__tvqXE\"};","import React, { Suspense, useCallback, useState } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport useSnackbar from '../../../../common/components/snackbar/useSnackbar'\r\nimport ROUTES from '../../../../common/routes/routes'\r\nimport SmallLoader from '../../../../common/small-loader/small-loader'\r\nimport { retryTenTimes } from '../../../../common/utils/apiUtils'\r\nimport { isUndefined } from '../../../../common/utils/commonUtils'\r\nimport { debounce } from '../../../../common/utils/debounce'\r\nimport styles from './styles/row.module.css'\r\nimport { rowClickHandler } from './utils/utils'\r\nconst MarkAsRead = React.lazy(() => retryTenTimes(() => import('../../tools/mark-as-read/mark-as-read')))\r\nconst Translate = React.lazy(() => retryTenTimes(() => import('../../tools/translate/translate')))\r\nconst Audio = React.lazy(() => retryTenTimes(() => import('../../tools/audio/audio')))\r\n\r\nconst Row = ({ data: { searchText, start, end, philosopherFullName, philosopherFullName_i10n, markedMode, currentQuote, currentPhilosopher, markedQuotes, setMarkedQuotes, currentData, setCurrentData, index, scrollPosition, setScrollPosition, listRef, darkMode, voiceSpeed, minMode }, style }) => {\r\n    const [isLocalFetching, setIsLocalFetching] = useState({ button: '', status: false })\r\n    const [AIResponse, setAIResponse] = useState(null)\r\n    const [openSnackbar] = useSnackbar()\r\n    const { quote: quotationText, id: quotationId } = currentQuote\r\n    const propsToSend = { openSnackbar, searchText, start, end, philosopherFullName, index, philosopherFullName_i10n, darkMode, setIsLocalFetching }\r\n    const [localTranslateKey, setLocalTranslateKey] = useState(false)\r\n    const debouncedHandler = useCallback(\r\n        debounce(() => setScrollPosition(parseInt(quotationId)), 500),\r\n        [quotationId, setScrollPosition]\r\n    )\r\n    const rowHandler = useCallback(() => rowClickHandler({ quote: quotationText, openSnackbar, philosopherFullName }), [openSnackbar, philosopherFullName, quotationText])\r\n\r\n    if (!isUndefined(currentQuote))\r\n        return (\r\n            <div role=\"row\" className={styles.row} key={index} style={style} onMouseMove={debouncedHandler} onTouchStart={debouncedHandler}>\r\n                {AIResponse ? (\r\n                    <>\r\n                        <div>{AIResponse}</div>\r\n                        <div className={styles.quoteDescription}>\r\n                            <button onClick={() => setAIResponse(null)}>Close Description</button>\r\n                        </div>\r\n                    </>\r\n                ) : (\r\n                    <>\r\n                        <div role=\"columnheader\" className=\"row\">\r\n                            <span onClick={rowHandler}>{`${index + 1}. \"${quotationText}\" ― ${philosopherFullName}`}</span>\r\n                        </div>\r\n                        <div role=\"columnheader\" className=\"row\">\r\n                            {localTranslateKey ? <Translate inputText={quotationText} {...propsToSend} /> : null}\r\n                        </div>\r\n\r\n                        <div role=\"columnheader\" className={styles.actionItems}>\r\n                            <button>\r\n                                <Link to={ROUTES.image.route} state={{ quotationText, philosopherFullName, signature: 'Instagram: @philosophizetruth' }} style={{ textDecoration: 'none', color: darkMode ? '#fff' : '#000' }}>\r\n                                    Download\r\n                                </Link>\r\n                            </button>\r\n                            {!minMode && <Audio index={index} currentData={currentData} scrollPosition={scrollPosition} setScrollPosition={setScrollPosition} listRef={listRef} voiceSpeed={voiceSpeed} />}\r\n                            {markedMode && (\r\n                                <Suspense fallback={''}>\r\n                                    <MarkAsRead index={quotationId} currentPhilosopher={currentPhilosopher} markedQuotes={markedQuotes} setMarkedQuotes={setMarkedQuotes} currentData={currentData} setCurrentData={setCurrentData} setLocalTranslateKey={setLocalTranslateKey} />\r\n                                </Suspense>\r\n                            )}\r\n                            {!minMode && (\r\n                                <>\r\n                                    <button onClick={() => setLocalTranslateKey(true)}>Translate {isLocalFetching.button === 'translate' && isLocalFetching.status && <SmallLoader darkMode />}</button>\r\n                                    <button>\r\n                                        <Link to={ROUTES.image.route} state={{ quotationText, philosopherFullName, signature: 'Instagram: @philosophizetruth', share: true }} style={{ textDecoration: 'none', color: darkMode ? '#fff' : '#000' }}>\r\n                                            Share\r\n                                        </Link>\r\n                                    </button>\r\n                                </>\r\n                            )}\r\n                            <button\r\n                                onClick={async () => {\r\n                                    setIsLocalFetching({ button: 'describe_quote', status: true })\r\n                                    const options = {\r\n                                        method: 'POST',\r\n                                        url: 'https://api.edenai.run/v2/text/topic_extraction',\r\n                                        headers: {\r\n                                            authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNGM1ZWJjMTktMGZlMi00NmU0LWJjM2QtOThkOTdiNTcyYWYxIiwidHlwZSI6ImFwaV90b2tlbiJ9.fQIkRStyHmpBofuqfieRHCnB5y0hhtSeLRh689nWHSs',\r\n                                            'Content-Type': 'application/json',\r\n                                        },\r\n                                        data: {\r\n                                            show_original_response: false,\r\n                                            fallback_providers: '',\r\n                                            providers: 'google, ibm, openai',\r\n                                            text: `${quotationText} ${philosopherFullName}\r\n                                            What is the meaning of this quote`,\r\n                                            language: 'en',\r\n                                        },\r\n                                    }\r\n\r\n                                    let str = ''\r\n                                    let response = await retryTenTimes(() =>\r\n                                        fetch(options.url, {\r\n                                            method: options.method,\r\n                                            headers: {\r\n                                                'Content-Type': 'application/json',\r\n                                                authorization: options.headers.authorization,\r\n                                            },\r\n                                            body: JSON.stringify(options.data),\r\n                                        })\r\n                                    )\r\n                                    response = await response.json()\r\n\r\n                                    const reponsesInArray = Object.values(response)\r\n                                    reponsesInArray.forEach((val) => {\r\n                                        if (val.items[0]?.category) str += `${val.items[0]?.category}`\r\n                                    })\r\n\r\n                                    setIsLocalFetching({ button: '', status: false })\r\n                                    setAIResponse(JSON.stringify(str.replace(/\\n/g, '')))\r\n                                }}\r\n                            >\r\n                                Describe {isLocalFetching?.button === 'describe_quote' && isLocalFetching?.status && <SmallLoader darkMode />}\r\n                            </button>\r\n                        </div>\r\n                    </>\r\n                )}\r\n            </div>\r\n        )\r\n}\r\n\r\nexport default Row\r\n","export function debounce(func, delay) {\r\n    let timer\r\n    return function () {\r\n        const context = this\r\n        const args = arguments\r\n        clearTimeout(timer)\r\n        timer = setTimeout(function () {\r\n            func.apply(context, args)\r\n        }, delay)\r\n    }\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"textCenter\":\"quote-list_textCenter__qcfwr\"};","import React from 'react'\r\n\r\nconst NoSearchResults = () => (\r\n    <>\r\n        <h4>No search results found!</h4>\r\n\r\n        <div>Guidlines:</div>\r\n\r\n        <div>1. Please check spelling of your search text.</div>\r\n\r\n        <div> 2. Try searching a smaller and a more generic word.</div>\r\n    </>\r\n)\r\nexport default NoSearchResults\r\n","import React from 'react'\r\nimport NoSearchResults from '../../../analysis/no-search-results/no-search-results'\r\n\r\nexport function NoRowsRenderer() {\r\n    return <NoSearchResults />\r\n}\r\n","export const rules = [\r\n    function (value, { start }) {\r\n        if (start <= 20) return 500\r\n    },\r\n    function (value, { start }) {\r\n        if (start > 20 && start <= 40) return 600\r\n    },\r\n    function (value, { start }) {\r\n        if (start > 40 && start <= 60) return 1000\r\n    },\r\n    function (value, { start }) {\r\n        if (start > 60 && start <= 100) return 1400\r\n    },\r\n    function (value, { start }) {\r\n        if (start > 100) return 2000\r\n    },\r\n    function () {\r\n        return 800\r\n    },\r\n]\r\n","import React, { useEffect } from 'react'\r\nimport List from 'react-virtualized/dist/commonjs/List'\r\nimport { ruleEngine } from '../../../../common/utils/ruleEngine'\r\nimport { isDesktop, scrollToQuoteId } from '../../../../common/utils/utils'\r\nimport Row from '../row/row'\r\nimport styles from './quote-list.module.css'\r\nimport { NoRowsRenderer } from './utils/listUtils'\r\nimport { rules } from './utils/ruleEngine/rules'\r\nimport { getPhilosopherFullName, getPhilosopherFullName_i10n } from './utils/utils'\r\n\r\nfunction QuotesList({ listRef, width, height, searchText, start, end, markedMode, currentData, setCurrentData, options, currentPhilosopher, markedQuotes, setMarkedQuotes, scrollPosition, setScrollPosition, darkMode, scheduledPosts, setScheduledQuotes, rowsRendered, setRowsRendered, voiceSpeed, minMode }) {\r\n    const philosopherFullName = getPhilosopherFullName({ currentPhilosopher, options })\r\n    const philosopherFullName_i10n = getPhilosopherFullName_i10n({ currentPhilosopher, options })\r\n\r\n    useEffect(() => {\r\n        if (rowsRendered) {\r\n            scrollToQuoteId(listRef, scrollPosition, currentData, currentPhilosopher)\r\n        }\r\n    }, [rowsRendered, currentPhilosopher])\r\n\r\n    useEffect(() => {\r\n        if (listRef.current) {\r\n            scrollToQuoteId(listRef, scrollPosition, currentData, currentPhilosopher)\r\n        }\r\n    }, [listRef?.current])\r\n\r\n    const onRowsRendered = () => {\r\n        if (rowsRendered === false) setRowsRendered(true)\r\n    }\r\n\r\n    function rowRenderer({ index, ...others }) {\r\n        return <Row data={{ searchText, start, end, philosopherFullName, philosopherFullName_i10n, markedMode, currentData, setCurrentData, currentQuote: currentData[index], index, currentPhilosopher, markedQuotes, setMarkedQuotes, scrollPosition, setScrollPosition, darkMode, listRef, scheduledPosts, setScheduledQuotes, rowsRendered, setRowsRendered, voiceSpeed, minMode }} {...others} />\r\n    }\r\n\r\n    return currentPhilosopher && currentData ? <List className={isDesktop() && styles.textCenter} height={height} rowCount={currentData.length} rowHeight={ruleEngine.makeDecision(rules, { params: { start } })} width={width} ref={listRef} rowRenderer={rowRenderer} onRowsRendered={onRowsRendered} noRowsRenderer={NoRowsRenderer} style={{ padding: '1rem' }} /> : <></>\r\n}\r\n\r\nexport default QuotesList\r\n","import { insert, setCharAt } from '../../../../../common/utils/stringUtils'\r\n\r\nexport function copyQuoteText(quoteText, philosopherFullName) {\r\n    if (philosopherFullName.toLowerCase().trim() === 'all') {\r\n        let splittingIndex = quoteText.lastIndexOf('― ')\r\n        let updatedQuoteText = setCharAt(quoteText, splittingIndex - 1, '')\r\n        updatedQuoteText = '\"' + updatedQuoteText\r\n        updatedQuoteText = insert(updatedQuoteText, splittingIndex, '\"\\n\\n')\r\n        navigator.clipboard.writeText(updatedQuoteText)\r\n    } else navigator.clipboard.writeText(`\"${quoteText}\"\\n\\n${philosopherFullName}`)\r\n}\r\n\r\nexport function rowClickHandler({ openSnackbar, philosopherFullName, quote }) {\r\n    copyQuoteText(quote, philosopherFullName)\r\n    openSnackbar('Quote Text Copied!')\r\n}\r\n\r\nexport function devModeSignature() {\r\n    return isAppInDevMode() ? <>dev-mode</> : null\r\n}\r\n\r\nexport function isAppInDevMode() {\r\n    return process.env.NODE_ENV !== 'production'\r\n}\r\n\r\nexport function rowClickHandlerFoBothQuotes({ openSnackbar, quote: { hindi, english }, philosopherNames: { englishFullname, hindiFullname }, index }, event) {\r\n    event.stopPropagation()\r\n    copyBothQuotesText({ hindiQuote: hindi, englishQuote: english }, { englishFullname, hindiFullname })\r\n    openSnackbar('Quote Text Copied!')\r\n}\r\n\r\nexport const copyBothQuotesText = ({ englishQuote, hindiQuote }, { englishFullname, hindiFullname }) => navigator.clipboard.writeText(`\"${hindiQuote}\"\\n\\n― ${hindiFullname}\\n\\n\\n\"${englishQuote}\"\\n\\n― ${englishFullname}`)\r\n\r\nexport function copyURL(openSnackbar, callback) {\r\n    callback()\r\n    navigator.clipboard.writeText(window.location.href.toString())\r\n    openSnackbar('Quote Link Copied. You can now share!')\r\n}\r\n","export function insert(str, index, value) {\r\n    return str.substr(0, index) + value + str.substr(index);\r\n}\r\n\r\nexport function setCharAt(str, index, chr) {\r\n    if (index > str.length - 1) return str;\r\n    return str.substring(0, index) + chr + str.substring(index + 1);\r\n}"],"names":["_ref","darkMode","_jsx","className","concat","styles","children","ruleEngine","makeDecision","rules","value","params","i","length","returnValue","MarkAsRead","React","retryTenTimes","Translate","Audio","_ref$data","data","searchText","start","end","philosopherFullName","philosopherFullName_i10n","markedMode","currentQuote","currentPhilosopher","markedQuotes","setMarkedQuotes","currentData","setCurrentData","index","scrollPosition","setScrollPosition","listRef","voiceSpeed","minMode","style","_useState","useState","button","status","_useState2","_slicedToArray","isLocalFetching","setIsLocalFetching","_useState3","_useState4","AIResponse","setAIResponse","_useSnackbar","useSnackbar","openSnackbar","quotationText","quote","quotationId","id","propsToSend","_useState5","_useState6","localTranslateKey","setLocalTranslateKey","debouncedHandler","useCallback","func","delay","timer","context","this","args","arguments","clearTimeout","setTimeout","apply","debounce","parseInt","rowHandler","rowClickHandler","isUndefined","role","onMouseMove","onTouchStart","_jsxs","_Fragment","onClick","_objectSpread","inputText","Link","to","ROUTES","image","route","state","signature","textDecoration","color","Suspense","fallback","SmallLoader","share","_asyncToGenerator","_regeneratorRuntime","mark","_callee","options","str","response","wrap","_context","prev","next","method","url","headers","authorization","show_original_response","fallback_providers","providers","text","language","fetch","body","JSON","stringify","sent","json","Object","values","forEach","val","_val$items$","_val$items$2","items","category","replace","stop","NoRowsRenderer","NoSearchResults","_ref2","_ref3","_ref4","_ref5","width","height","scheduledPosts","setScheduledQuotes","rowsRendered","setRowsRendered","getPhilosopherFullName","getPhilosopherFullName_i10n","useEffect","scrollToQuoteId","current","List","isDesktop","rowCount","rowHeight","ref","rowRenderer","others","_objectWithoutProperties","_excluded","Row","onRowsRendered","noRowsRenderer","padding","quoteText","toLowerCase","trim","splittingIndex","lastIndexOf","updatedQuoteText","chr","substring","substr","insert","navigator","clipboard","writeText","copyQuoteText"],"sourceRoot":""}