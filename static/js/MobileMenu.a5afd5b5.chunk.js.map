{"version":3,"file":"static/js/MobileMenu.a5afd5b5.chunk.js","mappings":"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","sources":["webpack://quotes/./src/common/small-loader/small-loader.module.css?1d92","common/small-loader/small-loader.js","webpack://quotes/./src/components/organisms/home/mobile/mobile-menu/mobile-menu.module.css?6dff","components/organisms/home/mobile/mobile-menu/mobile-menu.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"loader\":\"small-loader_loader__dEsE3\",\"spin\":\"small-loader_spin__2quVX\",\"darkTheme\":\"small-loader_darkTheme__qKAC3\"};","import React from 'react'\r\nimport styles from './small-loader.module.css'\r\n\r\nconst SmallLoader = ({ darkMode }) => <span className={`${styles.loader} ${darkMode ? styles.darkTheme : ''}`}> </span>\r\n\r\nexport default SmallLoader\r\n","// extracted by mini-css-extract-plugin\nexport default {\"darkTheme\":\"mobile-menu_darkTheme__w-0Bx\",\"lightTheme\":\"mobile-menu_lightTheme__Y8RxO\",\"slide_menu\":\"mobile-menu_slide_menu__F0PTx\",\"voiceSpeed\":\"mobile-menu_voiceSpeed__Bal+K\",\"userName\":\"mobile-menu_userName__UR9E8\",\"userInput\":\"mobile-menu_userInput__d+gCJ\",\"voices\":\"mobile-menu_voices__xpPK9\",\"backupNote\":\"mobile-menu_backupNote__4RMur\",\"textCenter\":\"mobile-menu_textCenter__l8Kfi\",\"paddingTop\":\"mobile-menu_paddingTop__6S6yS\",\"leftMargin\":\"mobile-menu_leftMargin__WTUHN\"};","import React, { useCallback, useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { setCurrentModalName } from '../../../../../common/components/modal/modalRedux'\r\nimport useSnackbar from '../../../../../common/components/snackbar/useSnackbar'\r\nimport SmallLoader from '../../../../../common/small-loader/small-loader'\r\nimport { retryTenTimes } from '../../../../../common/utils/apiUtils'\r\nimport { checkQueryParams } from '../../../../../common/utils/urlUtils'\r\nimport { WordLengthSearch } from '../../../tools/wordLengthSearch/wordLengthSearch'\r\nimport { ALPHABETICAL, LATEST } from '../../home-page/constants/constants'\r\nimport { setAutoPopulateWordCountRedux, setEndRedux, setStartRedux, setVoiceSpeedRedux, setVoiceTypeRedux } from '../../home-page/homePageRedux/homePageRedux'\r\nimport styles from './mobile-menu.module.css'\r\nconst BuildInfo = React.lazy(() => retryTenTimes(() => import(/* webpackChunkName: \"BuildInfo\" */ '../../../tools/build-info/build-info')))\r\nconst LoginRegister = React.lazy(() => retryTenTimes(() => import(/* webpackChunkName: \"LoginRegister\" */ '../login-register/login-register')))\r\nconst OutsideAlerter = React.lazy(() => retryTenTimes(() => import(/* webpackChunkName: \"OutsideAlerter\" */ '../../../../../common/components/outside-alerter/outside-alerter')))\r\n\r\nfunction MobileMenu({ markedMode, setMarkedMode, visible, toggleVisible, darkMode, setDarkMode, setSorting, sorting, userName, setUserName, setMarkedQuotes, isLoggedIn, setIsLoggedIn, password, setPassword, setIsFetching }) {\r\n    const voiceSpeed = useSelector(({ philosophersData: { voiceSpeed } }) => voiceSpeed)\r\n    const voiceType = useSelector(({ philosophersData: { voiceType } }) => voiceType)\r\n    const populateWordCount = useSelector(({ philosophersData: { populateWordCount } }) => populateWordCount)\r\n    const markedQuotes = useSelector(({ philosophersData: { markedQuotes } }) => markedQuotes)\r\n    const [voices, setVoices] = useState([])\r\n    const [openSnackbar] = useSnackbar()\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const onClickSortButtonHandler = (event) => {\r\n        const id = event.target.id\r\n\r\n        if (id === LATEST) setSorting(LATEST)\r\n        else setSorting(ALPHABETICAL)\r\n    }\r\n\r\n    useEffect(() => {\r\n        function setSpeech() {\r\n            return new Promise(function (resolve) {\r\n                let synth = window.speechSynthesis\r\n                let id\r\n\r\n                id = setInterval(() => {\r\n                    if (synth.getVoices().length !== 0) {\r\n                        resolve(synth.getVoices())\r\n                        clearInterval(id)\r\n                    }\r\n                }, 10)\r\n            })\r\n        }\r\n\r\n        let s = setSpeech()\r\n        s.then((voices) => setVoices(voices))\r\n    }, [])\r\n\r\n    return (\r\n        <OutsideAlerter callback={useCallback(() => toggleVisible(false), [toggleVisible])}>\r\n            <ul className={`${styles.slide_menu} ${darkMode ? styles.darkTheme : styles.lightTheme}`} id=\"slide_menu\" style={{ display: visible ? 'block' : 'none' }}>\r\n                <li>\r\n                    <div>Words Count</div> <div>Start & End</div>\r\n                    <WordLengthSearch isStartFeatureEnabled={true} />\r\n                    <button\r\n                        className={styles.leftMargin}\r\n                        onClick={() => {\r\n                            if (!populateWordCount) {\r\n                                dispatch(setStartRedux(1))\r\n                                dispatch(setEndRedux(''))\r\n                            }\r\n                        }}\r\n                    >\r\n                        Reset\r\n                    </button>\r\n                </li>\r\n                <li key=\"6\">\r\n                    <button onClick={useCallback(() => dispatch(setCurrentModalName('Report')), [])}>Open Report</button>\r\n                </li>\r\n                <li key=\"2\">\r\n                    <label htmlFor=\"marked-mode\">Marked Mode</label>\r\n                    <input\r\n                        id=\"marked-mode\"\r\n                        type=\"checkbox\"\r\n                        checked={markedMode}\r\n                        onChange={({ target: { checked } }) => {\r\n                            setMarkedMode(checked)\r\n                            dispatch(setAutoPopulateWordCountRedux(false))\r\n                            if (!checked) {\r\n                                dispatch(setStartRedux(1))\r\n                                dispatch(setEndRedux(''))\r\n                            }\r\n                        }}\r\n                    />\r\n                </li>\r\n                {markedMode && (\r\n                    <li key=\"16\">\r\n                        Set Minimum Word Count\r\n                        <input\r\n                            type=\"checkbox\"\r\n                            checked={populateWordCount}\r\n                            onChange={({ target: { checked } }) => {\r\n                                dispatch(setAutoPopulateWordCountRedux(checked))\r\n                                if (!checked) {\r\n                                    dispatch(setStartRedux(1))\r\n                                    dispatch(setEndRedux(''))\r\n                                }\r\n                            }}\r\n                        />\r\n                    </li>\r\n                )}\r\n                <li key=\"3\">\r\n                    <label htmlFor=\"dark-mode\">Dark Mode</label>\r\n                    <input id=\"dark-mode\" type=\"checkbox\" checked={darkMode} onChange={({ target: { checked } }) => setDarkMode(checked)} />\r\n                </li>\r\n                <li key=\"17\">\r\n                    <button onClick={useCallback(() => dispatch(setCurrentModalName('Exclusions')), [])}>Manage Filters</button>\r\n                </li>\r\n                <li key=\"4\">\r\n                    Voice Speed[1-20]\r\n                    <input onChange={(event) => dispatch(setVoiceSpeedRedux(event.target.value / 10))} className={styles.voiceSpeed} type=\"number\" value={voiceSpeed ? voiceSpeed * 10 : ''} />\r\n                </li>\r\n                <li key=\"5\">\r\n                    <div>Available Voices</div>\r\n                    {voices?.length !== 0 ? (\r\n                        <select\r\n                            onChange={(event) => {\r\n                                dispatch(setVoiceTypeRedux(event?.target?.value))\r\n                                speechSynthesis.cancel()\r\n                            }}\r\n                            className={styles.voices}\r\n                            value={voiceType}\r\n                        >\r\n                            {voices?.map((voice, index) => (\r\n                                <option value={index} key={voice?.name}>\r\n                                    {voice?.name}\r\n                                </option>\r\n                            ))}\r\n                        </select>\r\n                    ) : (\r\n                        <div className={`${styles.textCenter} ${styles.paddingTop}`}>\r\n                            <SmallLoader darkMode />\r\n                        </div>\r\n                    )}\r\n                </li>\r\n\r\n                <li key=\"1\">\r\n                    Sort philosophers\r\n                    <div>\r\n                        <input type=\"radio\" id={LATEST} name=\"sortType\" onClick={onClickSortButtonHandler} defaultChecked={sorting === LATEST} />\r\n                        <label htmlFor={LATEST}>Latest</label>\r\n                    </div>\r\n                    <div>\r\n                        <input type=\"radio\" id={ALPHABETICAL} name=\"sortType\" onClick={onClickSortButtonHandler} defaultChecked={sorting === ALPHABETICAL} />\r\n                        <label htmlFor={ALPHABETICAL}>Alphabetical</label>\r\n                    </div>\r\n                </li>\r\n\r\n                <li key=\"7\">\r\n                    <LoginRegister {...{ setUserName, userName, openSnackbar, isLoggedIn, setIsLoggedIn, setMarkedQuotes, markedQuotes, password, setPassword, setIsFetching }} />\r\n                    {!isLoggedIn && <div className={styles.backupNote}>You can login to backup your marked quotes in database in case browser data gets deleted.</div>}\r\n                </li>\r\n\r\n                <li key=\"8\">\r\n                    <BuildInfo />\r\n                </li>\r\n                {checkQueryParams('dev') && (\r\n                    <li key=\"9\">\r\n                        <button onClick={useCallback(() => dispatch(setCurrentModalName('Logs')), [])}>Open Dev Logs</button>\r\n                    </li>\r\n                )}\r\n            </ul>\r\n        </OutsideAlerter>\r\n    )\r\n}\r\n\r\nexport default MobileMenu\r\n"],"names":["_ref","darkMode","_jsx","className","concat","styles","children","BuildInfo","React","retryTenTimes","LoginRegister","OutsideAlerter","markedMode","setMarkedMode","visible","toggleVisible","setDarkMode","setSorting","sorting","userName","setUserName","setMarkedQuotes","isLoggedIn","setIsLoggedIn","password","setPassword","setIsFetching","voiceSpeed","useSelector","_ref2","philosophersData","voiceType","_ref3","populateWordCount","_ref4","markedQuotes","_ref5","voices","setVoices","useState","openSnackbar","useSnackbar","dispatch","useDispatch","onClickSortButtonHandler","event","target","id","LATEST","ALPHABETICAL","useEffect","Promise","resolve","synth","window","speechSynthesis","setInterval","getVoices","length","clearInterval","then","callback","useCallback","_jsxs","style","display","WordLengthSearch","isStartFeatureEnabled","onClick","setStartRedux","setEndRedux","setCurrentModalName","htmlFor","type","checked","onChange","_ref6","setAutoPopulateWordCountRedux","_ref7","_ref8","setVoiceSpeedRedux","value","_event$target","setVoiceTypeRedux","cancel","map","voice","index","name","SmallLoader","defaultChecked","checkQueryParams"],"sourceRoot":""}