{"version":3,"file":"static/js/438.a3aeef13.chunk.js","mappings":"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","sources":["components/organisms/home/mobile/mobile-header/mobile-header.jsx","components/organisms/tools/select/select.js","components/organisms/tools/wordLengthSearch/wordLengthSearch.js","webpack://quotes/./src/components/organisms/tools/wordLengthSearch/wordLengthSearch.module.css?7b27"],"sourcesContent":["import React, { Suspense, useState } from 'react'\nimport ErrorBoundary from '../../../../../common/components/error-boundary/error-boundary'\nimport { retryTenTimes } from '../../../../../common/utils/apiUtils'\nimport Select from '../../../tools/select/select'\nimport { WordLengthSearch } from '../../../tools/wordLengthSearch/wordLengthSearch'\nimport { onFocusHandler, onPhilosopherSelectChange } from '../../desktop/desktop-header/utils/utils'\nimport styles from '../../header-layout/header-layout.module.css'\nconst MobileMenu = React.lazy(() => retryTenTimes(() => import(/* webpackChunkName: \"menu\" */ '../mobile-menu/mobile-menu')))\nconst Breadcrumb = React.lazy(() => retryTenTimes(() => import('../../../analysis/breadcrumb/breadcrumb')))\nconst UnreadCounter = React.lazy(() => retryTenTimes(() => import('../../../analysis/unread-counter/unread-counter')))\nconst QuotesFound = React.lazy(() => retryTenTimes(() => import('../../../analysis/quotes-found/quotes-found')))\n\nfunction MobileHeader({ listRef, setSearchText, searchText, start, end, setStart, setEnd, isFetching, setIsFetching, markedMode, setMarkedMode, markedQuotes, currentData, setCurrentData, currentPhilosopher, originalData, setCurrentPhilosopher, options, setOptions, darkMode, setDarkMode, setSorting, sorting, isFetchingOptions, setIsFetchingOptions, originalOptions, setOriginalOptions, userName, setUserName, setMarkedQuotes, isLoggedIn, setIsLoggedIn, password, setPassword, scrollPosition, setRowsRendered, syncDate, setSyncDate, recentPhilosophers, setRecentPhilosophers }) {\n    const propsToSend = { start, end, setStart, setEnd, setSearchText, setCurrentData }\n    const [visible, toggleVisible] = useState(false)\n\n    return (\n        <div className={styles.header}>\n            <div className={styles.mobileColumn}>\n                {visible && (\n                    <Suspense>\n                        <ErrorBoundary>\n                            <MobileMenu markedMode={markedMode} setMarkedMode={setMarkedMode} visible={visible} options={options} setOptions={setOptions} toggleVisible={toggleVisible} darkMode={darkMode} setDarkMode={setDarkMode} setSorting={setSorting} sorting={sorting} userName={userName} setUserName={setUserName} setMarkedQuotes={setMarkedQuotes} {...{ isLoggedIn, setIsLoggedIn, password, setPassword, setIsFetching }} />\n                        </ErrorBoundary>\n                    </Suspense>\n                )}\n                <div style={{ paddingLeft: '0.5rem', paddingRight: '0.5rem' }} onClick={() => toggleVisible(!visible)}>\n                    â˜°\n                </div>\n            </div>\n            <div className={styles.mobileColumn}>\n                <WordLengthSearch isMobile={true} listRef={listRef} {...propsToSend} />\n            </div>\n            <div className={styles.mobileColumn}>\n                <input name=\"search-text\" data-testid=\"search-text\" className={styles.wordSearch} type=\"text\" placeholder=\"Search word\" value={searchText} onChange={({ target: { value } }) => setSearchText(value)} />\n            </div>\n            <div className={styles.mobileColumn}>\n                <Select recentPhilosophers={recentPhilosophers} isMobile={true} isFetchingOptions={isFetchingOptions} options={options} currentPhilosopher={currentPhilosopher} onFocusHandlerCallback={() => onFocusHandler({ options, setOptions, isLoggedIn, setSyncDate, isFetchingOptions, setIsFetchingOptions, originalOptions, setOriginalOptions, sorting, syncDate })} onChangeHandler={({ target: { value: philosopher } }) => onPhilosopherSelectChange({ philosopher, listRef, setIsFetching, setStart, setEnd, setSearchText, setCurrentPhilosopher, setCurrentData, options, setOptions, scrollPosition, setRowsRendered, recentPhilosophers, setRecentPhilosophers })} darkMode={darkMode} />\n            </div>\n            <Suspense fallback={''}>\n                <Breadcrumb>\n                    <QuotesFound markedMode={markedMode} found={currentData?.length} />\n                    {markedMode && <UnreadCounter isFetching={isFetching} currentData={currentData} originalData={originalData} markedQuotes={markedQuotes} currentPhilosopher={currentPhilosopher} isFetchingOptions={isFetchingOptions} />}\n                </Breadcrumb>\n            </Suspense>\n        </div>\n    )\n}\n\nexport default MobileHeader\n","import React, { Suspense } from 'react'\nimport { getCurrentPhilosopherFullname } from '../../../../common/static/utils/utils'\nimport { retryTenTimes } from '../../../../common/utils/apiUtils'\nconst DesktopSelect = React.lazy(() => retryTenTimes(() => import('../../home/desktop/desktop-select/desktop-select')))\nconst MobileSelect = React.lazy(() => retryTenTimes(() => import('../../home/mobile/mobile-select/mobile-select')))\n\nconst Select = ({ options, currentPhilosopher, onChangeHandler, onFocusHandlerCallback, isMobile, isFetchingOptions, recentPhilosophers, darkMode }) => {\n    const optionsWithRecentPhilosophersOnTop = [...options]\n\n    recentPhilosophers\n        ?.slice()\n        ?.reverse()\n        ?.forEach((recentItem, index) => {\n            const foundIdx = optionsWithRecentPhilosophersOnTop.findIndex((el) => el.value === recentItem) // -> foundIdx = 3\n            const removedItem = optionsWithRecentPhilosophersOnTop.splice(foundIdx, 1)\n            optionsWithRecentPhilosophersOnTop.unshift(removedItem[0])\n        })\n\n    const renderSelect = () => {\n        if (isMobile) {\n            return <Suspense fallback={''}>{currentPhilosopher && <MobileSelect recentPhilosophers={recentPhilosophers} onFocusHandlerCallback={onFocusHandlerCallback} onChangeHandler={onChangeHandler} currentPhilosopher={currentPhilosopher} value={getCurrentPhilosopherFullname(currentPhilosopher, optionsWithRecentPhilosophersOnTop)} placeholder={'Search philosopher'} options={optionsWithRecentPhilosophersOnTop} isFetchingOptions={isFetchingOptions} darkMode={darkMode} />}</Suspense>\n        } else {\n            return (\n                <Suspense fallback={''}>\n                    <DesktopSelect onFocusHandler={onFocusHandlerCallback} onChangeHandler={onChangeHandler} options={optionsWithRecentPhilosophersOnTop} currentPhilosopher={currentPhilosopher} isFetchingOptions={isFetchingOptions} />\n                </Suspense>\n            )\n        }\n    }\n\n    return currentPhilosopher && options?.length > 0 && renderSelect()\n}\n\nexport default Select\n","import React from 'react'\nimport { retryTenTimes } from '../../../../common/utils/apiUtils'\nimport styles from './wordLengthSearch.module.css'\nconst DesktopWordLengthSearch = React.lazy(() => retryTenTimes(() => import('../../home/desktop/desktop-word-length-search/desktop-word-length-search')))\n\nexport function WordLengthSearch({ start, end, setStart, setEnd, setSearchText, isMobile }) {\n    const renderComponent = () => {\n        if (isMobile) {\n            return (\n                <>\n                    <label id=\"labelEnd\" className={styles.labelEnd} htmlFor=\"end\">\n                        Words{' '}\n                    </label>\n                    <input id=\"end\" className={styles.smallInput} key=\"end\" name=\"end\" type=\"number\" min=\"0\" value={end} onChange={({ target: { value } }) => setEnd(value)} />\n                </>\n            )\n        } else {\n            return <DesktopWordLengthSearch start={start} setStart={setStart} end={end} setEnd={setEnd} />\n        }\n    }\n    return renderComponent()\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"smallInput\":\"wordLengthSearch_smallInput__K7gFd\",\"labelEnd\":\"wordLengthSearch_labelEnd__nHyVM\"};"],"names":["MobileMenu","React","retryTenTimes","Breadcrumb","UnreadCounter","QuotesFound","listRef","setSearchText","searchText","start","end","setStart","setEnd","isFetching","setIsFetching","markedMode","setMarkedMode","markedQuotes","currentData","setCurrentData","currentPhilosopher","originalData","setCurrentPhilosopher","options","setOptions","darkMode","setDarkMode","setSorting","sorting","isFetchingOptions","setIsFetchingOptions","originalOptions","setOriginalOptions","userName","setUserName","setMarkedQuotes","isLoggedIn","setIsLoggedIn","password","setPassword","scrollPosition","setRowsRendered","syncDate","setSyncDate","recentPhilosophers","setRecentPhilosophers","propsToSend","useState","visible","toggleVisible","className","styles","Suspense","style","paddingLeft","paddingRight","onClick","isMobile","name","type","placeholder","value","onChange","target","onFocusHandlerCallback","onFocusHandler","onChangeHandler","philosopher","onPhilosopherSelectChange","fallback","found","length","DesktopSelect","MobileSelect","optionsWithRecentPhilosophersOnTop","slice","reverse","forEach","recentItem","index","foundIdx","findIndex","el","removedItem","splice","unshift","getCurrentPhilosopherFullname","DesktopWordLengthSearch","WordLengthSearch","id","htmlFor","min"],"sourceRoot":""}