{"version":3,"file":"static/js/UnreadCounter.c5b96bc3.chunk.js","mappings":"kLAmCA,QA9BA,SAAsBA,GAAuE,IAAtE,WAAEC,EAAU,kBAAEC,EAAiB,aAAEC,EAAY,mBAAEC,GAAoBJ,EACtF,MAAOK,EAAaC,IAAkBC,EAAAA,EAAAA,UAAS,CAAEC,gBAAiB,KAAMC,UAAW,KAAMC,YAAa,OAChGC,GAAUC,EAAAA,EAAAA,KAAaC,GAAUA,EAAMC,iBAAiBH,UACxDI,GAAeC,EAAAA,EAAAA,GAAqB,CAAEC,YAAab,EAAoBO,aACvE,gBAAEH,EAAe,UAAEC,EAAS,YAAEC,GAAgBL,EAC9Ca,EAAsBV,EAAe,IAAAW,QAASV,EAAYD,EAAmB,KAAKY,QAAQ,GAAE,MAAO,GAYzG,OAVAC,EAAAA,EAAAA,YAAU,KACN,IAAKpB,IAAeC,GAAqBa,EAAc,CACnD,MAAMP,EAAkBO,EAAaO,OAC/Bb,GAAYc,EAAAA,EAAAA,IAAYpB,EAAaC,IAAuB,EAAID,EAAaC,GAAoBkB,OAGvGhB,EAAe,CAAEE,kBAAiBC,YAAWC,YAFzBF,EAAkBC,GAG1C,IACD,CAACL,EAAoBH,EAAYC,EAAmBC,EAAcY,KAEhEA,GAAgBd,GAAcC,EACxB,MAIPsB,EAAAA,EAAAA,MAAA,QAAAC,SAAA,CACyB,OAApBjB,GAAwB,UAAAW,OAAcX,GACxB,OAAdC,GAAkB,UAAAU,OAAcV,EAAS,KAAAU,OAAID,GAC7B,OAAhBR,GAAoB,YAAAS,OAAgBT,KAGjD,C","sources":["components/organisms/analysis/unread-counter/unread-counter.js"],"sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { getPhilosopherQuotes } from '../../../../common/static/utils/utils'\r\nimport { isUndefined } from '../../../../common/utils/commonUtils'\r\n\r\nfunction UnreadCounter({ isFetching, isFetchingOptions, markedQuotes, currentPhilosopher }) {\r\n    const [quoteCounts, setQuoteCounts] = useState({ totalQuoteCount: null, readCount: null, unreadCount: null })\r\n    const options = useSelector((state) => state.philosophersData.options)\r\n    const originalData = getPhilosopherQuotes({ philosopher: currentPhilosopher, options })\r\n    const { totalQuoteCount, readCount, unreadCount } = quoteCounts\r\n    const percentageCompleted = totalQuoteCount ? `(${((readCount / totalQuoteCount) * 100).toFixed(2)}%)` : ''\r\n\r\n    useEffect(() => {\r\n        if (!isFetching && !isFetchingOptions && originalData) {\r\n            const totalQuoteCount = originalData.length\r\n            const readCount = isUndefined(markedQuotes[currentPhilosopher]) ? 0 : markedQuotes[currentPhilosopher].length\r\n            const unreadCount = totalQuoteCount - readCount\r\n\r\n            setQuoteCounts({ totalQuoteCount, readCount, unreadCount })\r\n        }\r\n    }, [currentPhilosopher, isFetching, isFetchingOptions, markedQuotes, originalData])\r\n\r\n    if (!originalData || isFetching || isFetchingOptions) {\r\n        return null // Render nothing while fetching data\r\n    }\r\n\r\n    return (\r\n        <span>\r\n            {totalQuoteCount !== null && `Total: ${totalQuoteCount}`}\r\n            {readCount !== null && ` Read: ${readCount} ${percentageCompleted}`}\r\n            {unreadCount !== null && ` Unread: ${unreadCount}`}\r\n        </span>\r\n    )\r\n}\r\n\r\nexport default UnreadCounter\r\n"],"names":["_ref","isFetching","isFetchingOptions","markedQuotes","currentPhilosopher","quoteCounts","setQuoteCounts","useState","totalQuoteCount","readCount","unreadCount","options","useSelector","state","philosophersData","originalData","getPhilosopherQuotes","philosopher","percentageCompleted","concat","toFixed","useEffect","length","isUndefined","_jsxs","children"],"sourceRoot":""}