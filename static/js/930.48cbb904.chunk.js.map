{"version":3,"file":"static/js/930.48cbb904.chunk.js","mappings":"kLACA,EAAoC,yCAApC,EAAyF,iCAAzF,EAAyI,oC,SCEnIA,EAAiBC,EAAAA,MAAW,kBAAMC,EAAAA,EAAAA,KAAc,kBAAM,oCAE7C,SAASC,EAAT,GAAsK,IAA9IC,EAA6I,EAA7IA,QAASC,EAAoI,EAApIA,mBAAoBC,EAAgH,EAAhHA,gBAAiBC,EAA+F,EAA/FA,uBAAwBC,EAAuE,EAAvEA,YAAaC,EAA0D,EAA1DA,MAAOC,EAAmD,EAAnDA,kBAAmBC,EAAgC,EAAhCA,mBAAoBC,EAAY,EAAZA,SACpK,GAAsCC,EAAAA,EAAAA,UAAS,IAA/C,eAAOC,EAAP,KAAoBC,EAApB,KACA,GAAoCF,EAAAA,EAAAA,UAAS,IAA7C,eAAOG,EAAP,KAAmBC,EAAnB,KACA,GAAkCJ,EAAAA,EAAAA,WAAS,GAA3C,eAAOK,EAAP,KAAkBC,EAAlB,MACAC,EAAAA,EAAAA,YAAU,kBAAMH,EAAcR,KAAQ,CAACA,IACvC,IAAMY,GAAaC,EAAAA,EAAAA,WAEnBF,EAAAA,EAAAA,YAAU,WACFF,GAAad,EAAQmB,OAAS,IAC9BN,EAAc,IACdF,EAAeX,GACfe,GAAa,MAElB,CAACf,EAAQmB,OAAQL,IAiDpB,OACI,SAAClB,EAAD,CAAgBwB,SAAU,kBAAMT,EAAe,KAA/C,UACI,iBAAKU,UAAS,UAAKC,EAAL,YAAiCd,EAAWc,EAAmB,IAA7E,WACI,kBAAOC,KAAK,qBAAqBC,KAAK,OAAOC,QAlDlC,SAACC,GACpBvB,IACAY,GAAa,IAgDiEY,SA7C7D,SAACD,GAClB,IAAMrB,EAAQqB,EAAEE,OAAOvB,MACvB,GAAc,KAAVA,EAAcM,EAAeX,OAC5B,CACD,IAAIU,EAAc,GAClB,GAAIL,EAAMc,OAAS,EAAG,CAClB,IAAMU,EAAQ,IAAIC,OAAJ,UAAczB,GAAd,KACdK,EAAcV,EAAQ+B,QAAO,gBAAGC,EAAH,EAAGA,SAAH,OAAkBH,EAAMI,KAAKD,MAG9DrB,EAAeD,GAEnBG,EAAcR,IAiCwFD,YAAaA,EAAaC,MAAOO,EAAYsB,OA9BjI,WAClBrB,EAAcR,MA8BLC,GACG,eAAIe,UAAWC,EAAf,UACI,wBAAI,iBApBO,IAAvBZ,EAAYS,OACL,MAGP,eAAIgB,IAAKlB,EAAYI,UAAS,UAAKC,EAAL,YAA4Bd,GAAYc,GAAtE,gBACKZ,QADL,IACKA,OADL,EACKA,EAAa0B,KAAI,WAAsBC,GAAtB,IAAGL,EAAH,EAAGA,SAAU3B,EAAb,EAAaA,MAAb,OACd,eAAIiC,MAAsB,KAAf1B,GAAqByB,GAAK,OAAG9B,QAAH,IAAGA,OAAH,EAAGA,EAAoBY,QAAS,CAAEoB,MAAO,WAAc,GAAIC,GAAIvC,IAAuBI,EAAQ,SAAW,GAAgBA,MAAOA,EAAOoC,QAAS,SAACf,GAAD,OAf1K,SAACM,EAAU3B,QACpBqC,IAAVrC,IACAM,EAAe,IACfE,EAAcmB,GACd9B,EAAgB,CAAE0B,OAAQ,CAAEvB,MAAAA,MAWwKsC,CAAmBX,EAAU3B,IAAzN,SACK2B,GADkJ3B","sources":["webpack://quotes/./src/components/organisms/home/mobile/mobile-select/mobile-select.module.css?ae0e","components/organisms/home/mobile/mobile-select/mobile-select.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"typeAheadDropDown\":\"mobile-select_typeAheadDropDown__JJA7z\",\"darkTheme\":\"mobile-select_darkTheme__iM4xE\",\"dropDownList\":\"mobile-select_dropDownList__-Kl0K\",\"active\":\"mobile-select_active__bSwvG\"};","import React, { useEffect, useRef, useState } from 'react'\nimport { retryTenTimes } from '../../../../../common/utils/apiUtils'\nimport styles from './mobile-select.module.css'\nconst OutsideAlerter = React.lazy(() => retryTenTimes(() => import('../../../../../common/components/outside-alerter/outside-alerter')))\n\nexport default function MobileSelect({ options, currentPhilosopher, onChangeHandler, onFocusHandlerCallback, placeholder, value, isFetchingOptions, recentPhilosophers, darkMode }) {\n    const [suggestions, setSuggestions] = useState([])\n    const [searchText, setSearchText] = useState([])\n    const [isFocused, setIsFocused] = useState(false)\n    useEffect(() => setSearchText(value), [value])\n    const scollToRef = useRef()\n\n    useEffect(() => {\n        if (isFocused && options.length > 1) {\n            setSearchText('')\n            setSuggestions(options)\n            setIsFocused(false)\n        }\n    }, [options.length, isFocused])\n\n    const onFocusHandler = (e) => {\n        onFocusHandlerCallback()\n        setIsFocused(true)\n    }\n\n    const onTextChange = (e) => {\n        const value = e.target.value\n        if (value === '') setSuggestions(options)\n        else {\n            let suggestions = []\n            if (value.length > 0) {\n                const regex = new RegExp(`${value}`, `i`)\n                suggestions = options.filter(({ fullName }) => regex.test(fullName))\n            }\n\n            setSuggestions(suggestions)\n        }\n        setSearchText(value)\n    }\n\n    const onBlurHandler = () => {\n        setSearchText(value)\n    }\n\n    const suggestionSelected = (fullName, value) => {\n        if (value !== undefined) {\n            setSuggestions([])\n            setSearchText(fullName)\n            onChangeHandler({ target: { value } })\n        }\n    }\n\n    const renderSuggestions = () => {\n        if (suggestions.length === 0) {\n            return null\n        }\n        return (\n            <ul ref={scollToRef} className={`${styles.dropDownList} ${darkMode && styles.darkTheme}`}>\n                {suggestions?.map(({ fullName, value }, index) => (\n                    <li style={searchText === '' && index < recentPhilosophers?.length ? { color: '#FF00FF' } : {}} id={currentPhilosopher === value ? 'active' : ''} key={value} value={value} onClick={(e) => suggestionSelected(fullName, value)}>\n                        {fullName}\n                    </li>\n                ))}\n            </ul>\n        )\n    }\n\n    return (\n        <OutsideAlerter callback={() => setSuggestions([])}>\n            <div className={`${styles.typeAheadDropDown} ${darkMode ? styles.darkTheme : ''}`}>\n                <input name=\"search-philosopher\" type=\"text\" onFocus={onFocusHandler} onChange={onTextChange} placeholder={placeholder} value={searchText} onBlur={onBlurHandler} />\n                {isFetchingOptions ? (\n                    <ul className={styles.dropDownList}>\n                        <li>Loading...</li>\n                    </ul>\n                ) : (\n                    renderSuggestions()\n                )}\n            </div>\n        </OutsideAlerter>\n    )\n}\n"],"names":["OutsideAlerter","React","retryTenTimes","MobileSelect","options","currentPhilosopher","onChangeHandler","onFocusHandlerCallback","placeholder","value","isFetchingOptions","recentPhilosophers","darkMode","useState","suggestions","setSuggestions","searchText","setSearchText","isFocused","setIsFocused","useEffect","scollToRef","useRef","length","callback","className","styles","name","type","onFocus","e","onChange","target","regex","RegExp","filter","fullName","test","onBlur","ref","map","index","style","color","id","onClick","undefined","suggestionSelected"],"sourceRoot":""}