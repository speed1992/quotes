{"version":3,"file":"static/js/890.6bd29f8b.chunk.js","mappings":"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","sources":["common/static/utils/utils.js","common/utils/commonUtils.js","common/utils/dateUtils.js","common/utils/localStorageUtils.js","common/utils/staticDataUtils.js","common/utils/urlUtils.js","common/web-workers/worker.js","webpack://quotes/./src/components/organisms/analysis/table/table.module.css?59c5","components/organisms/analysis/table/TableBody.js","components/organisms/analysis/table/TableHead.js","components/organisms/analysis/table/useSortableTable.js","components/organisms/analysis/table/table.jsx","components/organisms/analysis/report/utils/utils.js","components/organisms/analysis/report/report.js","common/settings/constants.js","common/utils/objectUtils.js","common/utils/lazyLoadUtils.js","components/organisms/home/desktop/desktop-header/utils/utils.js","components/organisms/home/home-page/constants/constants.js","components/organisms/home/home-page/utils/utils.js","components/organisms/home/mobile/mobile-menu/utils/utils.js","components/organisms/home/quotes-list/utils/utils.js"],"sourcesContent":["import { API_ENDPOINTS } from '../../apis/apiEndpoints'\r\nimport { retryTenTimes } from '../../utils/apiUtils'\r\n\r\nexport const addPhilosopherNameToQuote = (quote, philosopherFullName) => `${quote} ― ${philosopherFullName}`\r\n\r\nexport const convertQuoteArray = (quoteArr, philosopherFullName) => quoteArr.map((quote) => addPhilosopherNameToQuote(quote, philosopherFullName))\r\n\r\nexport const allocateIdsToData = (data) =>\r\n    data.forEach((element, index) => {\r\n        element.id = index\r\n    })\r\n\r\nexport const doOperationsOnData = ({ data, setData }, sortingMethod) => {\r\n    data = data.slice()\r\n\r\n    if (sortingMethod === 'alphabetical') data.sort((a, b) => a.fullName.localeCompare(b.fullName))\r\n    else data.sort((a, b) => b.id - a.id)\r\n\r\n    setData(data)\r\n}\r\n\r\nexport const addPhilosopherInGlobalData = (philosopherName, { options, setOptions }, quotes) => {\r\n    const newOptions = JSON.parse(JSON.stringify(options))\r\n    if (philosopherName.trim().toLowerCase() === 'all') {\r\n        const index = getPhilosopherObjectIndex(philosopherName, options)\r\n        let existingQuotes\r\n        if (newOptions[index].quotes === undefined) existingQuotes = []\r\n        else {\r\n            existingQuotes = newOptions[index].quotes\r\n        }\r\n        newOptions[index].quotes = [...existingQuotes, ...quotes]\r\n    } else {\r\n        const index = getPhilosopherObjectIndex(philosopherName, options)\r\n        newOptions[index].quotes = quotes\r\n    }\r\n    setOptions(newOptions)\r\n}\r\n\r\nexport const lazyLoadAsset = (philosopherName, { options, setOptions }, callbacks) => {\r\n    return new Promise((resolve, reject) => {\r\n        const fileName = philosopherName.toLowerCase()\r\n        retryTenTimes(() => fetch(API_ENDPOINTS.STATIC_DATA.STATIC_QUOTES + fileName + '.json'))\r\n            .then((response) => response.json())\r\n            .then((data) => {\r\n                callbacks?.map((callback) => callback(data))\r\n                addPhilosopherInGlobalData(philosopherName, { options, setOptions }, data)\r\n                resolve()\r\n            })\r\n            .catch((e) => reject(e))\r\n    })\r\n}\r\n\r\nexport const getPhilosopherObjectIndex = (philosopher, options) => options.findIndex(({ value }) => value === philosopher)\r\n\r\nexport const getPhilosopherData = ({ philosopher, options }) => options.filter(({ value }) => value === philosopher)[0]\r\n\r\nexport const getPhilosopherQuotes = ({ philosopher, options }) => options.filter(({ value }) => value === philosopher)[0]?.quotes\r\n\r\nexport const getCurrentPhilosopherFullname = (currentPhilosopher, options) => {\r\n    const currentPhilosopherData = options[getPhilosopherObjectIndex(currentPhilosopher, options)]\r\n    return currentPhilosopherData.fullName\r\n}\r\n\r\nexport const doesPhilosopherDataExist = (philosopher, options) => {\r\n    if (options[getPhilosopherObjectIndex(philosopher, options)]) return true\r\n    else return false\r\n}\r\n","export const isUndefined = (value) => typeof value === 'undefined'\r\nexport const isObjEmpty = (obj) => Object.values(obj).length === 0 && obj.constructor === Object\r\n\r\nexport function uuidv4() {\r\n    return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, (c) => (c ^ (crypto.getRandomValues(new Uint8Array(1))[0] & (15 >> (c / 4)))).toString(16))\r\n}\r\n","import { checkQueryParams } from './urlUtils'\r\n\r\nconst CACHE_TIME_IN_DAYS = 1\r\n\r\nexport const isCacheExpired = (startDate, setLogs = null) => {\r\n    startDate = new Date(startDate)\r\n    const endDate = new Date()\r\n    const dateDifferenceInMilliSeconds = endDate.getTime() - startDate.getTime()\r\n    const dateDifferenceInDays = Math.floor(dateDifferenceInMilliSeconds / (1000 * 60 * 60 * 24))\r\n    if (setLogs && checkQueryParams('dev')) {\r\n        setLogs('inside isCacheExpired ' + endDate)\r\n        setLogs('startDate ' + startDate)\r\n        setLogs('endDate ' + endDate)\r\n        setLogs('dateDifferenceInMilliSeconds endDate.getTime() - startDate.getTime() ' + dateDifferenceInMilliSeconds)\r\n        setLogs('dateDifference In hours ' + Math.floor((dateDifferenceInMilliSeconds / (1000 * 60 * 60)) % 24))\r\n        setLogs('dateDifferenceInDays ' + dateDifferenceInDays)\r\n        setLogs('dateDifferenceInDays >= CACHE_TIME_IN_DAYS ' + dateDifferenceInDays >= CACHE_TIME_IN_DAYS)\r\n        setLogs('CACHE_TIME_IN_DAYS ' + CACHE_TIME_IN_DAYS)\r\n    }\r\n    return dateDifferenceInDays >= CACHE_TIME_IN_DAYS\r\n}\r\n\r\nexport const getDifferenceFromCurrentDate = (date2) => {\r\n    const date1 = new Date()\r\n    return date2.getTime() - date1.getTime()\r\n}\r\n","import { useEffect, useState } from 'react'\r\n\r\nexport function getStorageValue(key, defaultValue) {\r\n    const saved = localStorage.getItem(key)\r\n    const initial = JSON.parse(saved)\r\n    if (initial === undefined || initial === 'undefined' || initial === 'null' || initial === null) {\r\n        return defaultValue\r\n    } else return initial\r\n}\r\n\r\nexport function setStorageValue(key, value) {\r\n    localStorage.setItem(key, JSON.stringify(value))\r\n}\r\n\r\nexport const useLocalStorage = (key, defaultValue) => {\r\n    const [value, setValue] = useState(() => {\r\n        return getStorageValue(key, defaultValue)\r\n    })\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem(key, JSON.stringify(value))\r\n    }, [key, value])\r\n\r\n    return [value, setValue]\r\n}\r\n","import { getStorageValue } from './localStorageUtils'\r\n\r\nexport const removeReadData = ({ index, currentPhilosopher, markedMode, markedQuotes = {}, setMarkedQuotes, currentData, setCurrentData }) => {\r\n    let newMarkedQuotes = JSON.parse(JSON.stringify(markedQuotes))\r\n    let readQuotesArray = []\r\n\r\n    const READ_ARRAY_LOCALSTORAGE_KEY = `${currentPhilosopher}-MARKED_AS_READ`\r\n    readQuotesArray = getStorageValue(READ_ARRAY_LOCALSTORAGE_KEY, [])\r\n\r\n    if (markedQuotes && markedQuotes[currentPhilosopher] !== undefined) {\r\n        readQuotesArray = [...readQuotesArray, ...markedQuotes[currentPhilosopher]]\r\n    }\r\n\r\n    readQuotesArray = [...new Set(readQuotesArray)]\r\n\r\n    if (index) {\r\n        readQuotesArray.push(index)\r\n    }\r\n\r\n    newMarkedQuotes[currentPhilosopher] = readQuotesArray\r\n    setMarkedQuotes(newMarkedQuotes)\r\n\r\n    const newData = currentData.filter(({ id }, _) => readQuotesArray.indexOf(id) === -1)\r\n    setCurrentData(JSON.parse(JSON.stringify(newData)))\r\n}\r\n","export function getQueryParams(qs) {\r\n    qs = qs.split('+').join(' ')\r\n\r\n    var params = {},\r\n        tokens,\r\n        re = /[?&]?([^=]+)=([^&]*)/g\r\n    while ((tokens = re.exec(qs))) {\r\n        params[decodeURIComponent(tokens[1])] = decodeURIComponent(tokens[2])\r\n    }\r\n\r\n    return params\r\n}\r\n\r\nexport function checkQueryParams(param) {\r\n    let query = getQueryParams(document.location.search)\r\n    let val = query[param] ? query[param].toLowerCase() : null\r\n    if (val === 'false' || val) return true\r\n    else return false\r\n}\r\n","export let worker\r\nif (window.Worker) {\r\n    worker = new Worker(new URL('./filter-worker.js', import.meta.url))\r\n} else {\r\n    alert(\"Your browser doesn't support web workers.\")\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"table\":\"table_table__DjpbW\",\"tableHeading\":\"table_tableHeading__bQNPH\",\"tableColumn\":\"table_tableColumn__X9yJG\"};","import styles from './table.module.css'\r\n\r\nconst TableBody = ({ tableData, columns }) => {\r\n    return (\r\n        <tbody>\r\n            {tableData.map((data) => {\r\n                return (\r\n                    <tr key={data.id}>\r\n                        {columns.map(({ accessor }) => {\r\n                            const tData = data[accessor] ? data[accessor] : '——'\r\n                            return (\r\n                                <td className={styles.tableColumn} key={accessor}>\r\n                                    {tData}\r\n                                </td>\r\n                            )\r\n                        })}\r\n                    </tr>\r\n                )\r\n            })}\r\n        </tbody>\r\n    )\r\n}\r\n\r\nexport default TableBody\r\n","import { useState } from 'react'\r\nimport styles from './table.module.css'\r\n\r\nconst TableHead = ({ columns, handleSorting }) => {\r\n    const [sortField, setSortField] = useState('')\r\n    const [order, setOrder] = useState('asc')\r\n\r\n    const handleSortingChange = (accessor) => {\r\n        const sortOrder = accessor === sortField && order === 'asc' ? 'desc' : 'asc'\r\n        setSortField(accessor)\r\n        setOrder(sortOrder)\r\n        handleSorting(accessor, sortOrder)\r\n    }\r\n\r\n    return (\r\n        <thead>\r\n            <tr>\r\n                {columns.map(({ label, accessor, sortable }) => {\r\n                    const cl = sortable ? (sortField === accessor && order === 'asc' ? 'up' : sortField === accessor && order === 'desc' ? 'down' : 'default') : ''\r\n                    return (\r\n                        <th className={`${styles.tableHeading} ${cl}`} key={accessor} onClick={sortable ? () => handleSortingChange(accessor) : null}>\r\n                            {label}\r\n                        </th>\r\n                    )\r\n                })}\r\n            </tr>\r\n        </thead>\r\n    )\r\n}\r\n\r\nexport default TableHead\r\n","import { useEffect, useState } from 'react'\r\n\r\nfunction getDefaultSorting(defaultTableData, columns) {\r\n    const sorted = [...defaultTableData].sort((a, b) => {\r\n        const filterColumn = columns.filter((column) => column.sortbyOrder)\r\n\r\n        let { accessor = 'id', sortbyOrder = 'asc' } = Object.assign({}, ...filterColumn)\r\n\r\n        if (a[accessor] === null) return 1\r\n        if (b[accessor] === null) return -1\r\n        if (a[accessor] === null && b[accessor] === null) return 0\r\n\r\n        const ascending = a[accessor].toString().localeCompare(b[accessor].toString(), 'en', {\r\n            numeric: true,\r\n        })\r\n\r\n        return sortbyOrder === 'asc' ? ascending : -ascending\r\n    })\r\n    return sorted\r\n}\r\n\r\nexport const useSortableTable = (data, columns) => {\r\n    const [tableData, setTableData] = useState([])\r\n\r\n    useEffect(() => {\r\n        setTableData(getDefaultSorting(data, columns))\r\n    }, [data])\r\n\r\n    const handleSorting = (sortField, sortOrder) => {\r\n        if (sortField) {\r\n            const sorted = [...tableData].sort((a, b) => {\r\n                if (a[sortField] === null) return 1\r\n                if (b[sortField] === null) return -1\r\n                if (a[sortField] === null && b[sortField] === null) return 0\r\n                return (\r\n                    a[sortField].toString().localeCompare(b[sortField].toString(), 'en', {\r\n                        numeric: true,\r\n                    }) * (sortOrder === 'asc' ? 1 : -1)\r\n                )\r\n            })\r\n            setTableData(sorted)\r\n        }\r\n    }\r\n\r\n    return [tableData, handleSorting]\r\n}\r\n","import styles from './table.module.css'\r\nimport TableBody from './TableBody'\r\nimport TableHead from './TableHead'\r\nimport { useSortableTable } from './useSortableTable'\r\n\r\nconst Table = ({ data, columns }) => {\r\n    const [tableData, handleSorting] = useSortableTable(data, columns)\r\n\r\n    return (\r\n        <>\r\n            <table className={styles.table}>\r\n                <TableHead {...{ columns, handleSorting }} />\r\n                <TableBody {...{ columns, tableData }} />\r\n            </table>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Table\r\n","import { getPhilosopherObjectIndex } from '../../../../../common/static/utils/utils'\r\nimport { isUndefined, uuidv4 } from '../../../../../common/utils/commonUtils'\r\nimport { getPhilosopherFullName } from '../../../home/quotes-list/utils/utils'\r\n\r\nexport const createData = ({ markedQuotes, options, setData }) => {\r\n    const data = []\r\n    let sum = 0\r\n    for (const key in markedQuotes) {\r\n        if (markedQuotes.hasOwnProperty(key) && getPhilosopherObjectIndex(key, options) !== -1) {\r\n            let readCount = 0\r\n            if (!isUndefined(markedQuotes[key])) {\r\n                readCount = markedQuotes[key].length\r\n                sum += readCount\r\n            }\r\n            const obj = { philosopher: getPhilosopherFullName({ currentPhilosopher: key, options }), readCount: readCount, id: uuidv4() }\r\n            data.push(obj)\r\n        }\r\n    }\r\n    const obj = { philosopher: 'Total Read', readCount: sum, id: uuidv4() }\r\n    data.push(obj)\r\n    setData(data)\r\n}\r\n","import { useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { onFocusHandler as getPhilosopherJSON } from '../../home/desktop/desktop-header/utils/utils'\r\nimport { setOptionsRedux, setOriginalOptionsRedux } from '../../home/home-page/homePageRedux/homePageRedux'\r\nimport { setThemeClassNameOnHTMLTag } from '../../home/home-page/utils/utils'\r\nimport Table from '../table/table'\r\nimport columns from './columns.json'\r\nimport { createData } from './utils/utils'\r\n\r\nconst Report = () => {\r\n    const [data, setData] = useState([])\r\n    const dispatch = useDispatch()\r\n    const markedQuotes = useSelector((state) => state.philosophersData.markedQuotes)\r\n    const options = useSelector((state) => state.philosophersData.options)\r\n    const darkMode = useSelector((state) => state.philosophersData.darkMode)\r\n    const originalOptions = useSelector((state) => state?.philosophersData?.originalOptions)\r\n    const setOriginalOptions = (value) => dispatch(setOriginalOptionsRedux(value))\r\n    const setOptions = (value) => dispatch(setOptionsRedux(value))\r\n    const sorting = useSelector((state) => state.philosophersData.sorting)\r\n\r\n    useEffect(() => {\r\n        getPhilosopherJSON({ options, setOptions, originalOptions, setOriginalOptions, sorting })\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        createData({ markedQuotes, options, setData })\r\n    }, [options.length])\r\n\r\n    useEffect(() => {\r\n        setThemeClassNameOnHTMLTag(darkMode)\r\n    }, [darkMode])\r\n\r\n    return data.length > 0 ? (\r\n        <Table data={data} columns={columns} />\r\n    ) : (\r\n        <>\r\n            <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', height: '100vh', fontSize: '2rem', margin: '3rem' }}>No records found!</div>\r\n            <div style={{ fontSize: '2rem', margin: '3rem' }}>Please use, marked mode feature, mark quotes as read and come back.</div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Report\r\n","export const MAX_RECENT_PHILOSOPHERS = 8\r\n","import { getPhilosopherObjectIndex } from '../static/utils/utils'\r\n\r\nexport const merge = (oldOptions, newOptions) => {\r\n    let newOptionsCopy = JSON.parse(JSON.stringify(newOptions))\r\n    newOptionsCopy.forEach((element, newOptionindex) => {\r\n        const oldOptionIndex = getPhilosopherObjectIndex(element.value, oldOptions)\r\n        if (oldOptionIndex !== -1) {\r\n            newOptionsCopy[newOptionindex].quotes = oldOptions[oldOptionIndex].quotes\r\n        }\r\n    })\r\n    return newOptionsCopy\r\n}\r\n","import { ALPHABETICAL, LATEST } from '../../components/organisms/home/home-page/constants/constants'\r\nimport { STATIC_OPTIONS } from '../../components/organisms/home/home-page/homePageRedux/initialState'\r\nimport { bringIntoAlphabeticalOrder, bringIntoOriginalOrder } from '../../components/organisms/home/home-page/utils/utils'\r\nimport { merge } from './objectUtils'\r\n\r\nexport const addOptionsDataIntoRedux = ({ newOptions, oldOptions, oldOriginalOptions, setOptions, setOriginalOptions }) => {\r\n    let resultantOptions\r\n    resultantOptions = [...oldOptions, ...newOptions]\r\n    setOptions(resultantOptions)\r\n    setOriginalOptions([...STATIC_OPTIONS, ...newOptions])\r\n}\r\n\r\nexport const addResponseOptionsDataIntoRedux = ({ newOptions, oldOptions, oldOriginalOptions, setOptions, setOriginalOptions, sorting }) => {\r\n    const originalOptions = [...STATIC_OPTIONS, ...newOptions]\r\n    let resultantOptions = merge(oldOptions, [...originalOptions])\r\n    if (sorting === LATEST) {\r\n        resultantOptions = bringIntoOriginalOrder(originalOptions, resultantOptions)\r\n    } else if (sorting === ALPHABETICAL) {\r\n        resultantOptions = bringIntoAlphabeticalOrder(resultantOptions)\r\n    }\r\n    setOptions([...resultantOptions])\r\n    setOriginalOptions(originalOptions)\r\n}\r\n","import { API_ENDPOINTS } from '../../../../../../common/apis/apiEndpoints'\r\nimport { MAX_RECENT_PHILOSOPHERS } from '../../../../../../common/settings/constants'\r\nimport { getPhilosopherQuotes, lazyLoadAsset } from '../../../../../../common/static/utils/utils'\r\nimport { retryTenTimes } from '../../../../../../common/utils/apiUtils'\r\nimport { isCacheExpired } from '../../../../../../common/utils/dateUtils'\r\nimport { addResponseOptionsDataIntoRedux } from '../../../../../../common/utils/lazyLoadUtils'\r\nimport { checkQueryParams } from '../../../../../../common/utils/urlUtils'\r\nimport { changeQuotesData } from '../../../quotes-list/utils/utils'\r\n\r\nexport function onPhilosopherSelectChange({ philosopher, listRef, setIsFetching, setStart, setEnd, setSearchText, setCurrentPhilosopher, currentData, setCurrentData, options, setOptions, markedMode, markedQuotes, setMarkedQuotes, scrollPosition, setRowsRendered, recentPhilosophers, setRecentPhilosophers }) {\r\n    function callback() {\r\n        if (recentPhilosophers) setRecentPhilosophers([...new Set([philosopher, ...recentPhilosophers.slice(0, MAX_RECENT_PHILOSOPHERS - 1)])])\r\n        setCurrentPhilosopher(philosopher)\r\n        changeQuotesData({ philosopher, currentData, setCurrentData, options }, { markedMode, markedQuotes, setMarkedQuotes })\r\n        setIsFetching(false)\r\n    }\r\n    setStart(1)\r\n    setEnd('')\r\n    setSearchText('')\r\n    setIsFetching(true)\r\n\r\n    if (!getPhilosopherQuotes({ philosopher, options })) {\r\n        lazyLoadAsset(philosopher, { options, setOptions }, []).then(callback)\r\n    } else {\r\n        callback()\r\n    }\r\n}\r\n\r\nexport const onFocusHandler = async ({ options, setOptions, isLoggedIn, setSyncDate, isFetchingOptions, setIsFetchingOptions, originalOptions, setOriginalOptions, sorting, syncDate, setLogs }) => {\r\n    if (checkQueryParams('dev')) {\r\n        const today = new Date()\r\n        setLogs('isCacheExpired(syncDate, setLogs) || options.length === 1 ' + isCacheExpired(syncDate, setLogs) || options.length === 1)\r\n        setLogs('options.length ' + options.length)\r\n        setLogs('current time ' + today)\r\n        setLogs('inside onFocusHandler')\r\n        setLogs('syncDate ' + syncDate)\r\n        setLogs('syncDate ' + new Date(syncDate))\r\n        setLogs('isLoggedIn ' + isLoggedIn)\r\n    }\r\n    if (isCacheExpired(syncDate, setLogs) || options.length === 1) {\r\n        setIsFetchingOptions?.(true)\r\n        let response = await retryTenTimes(() => fetch(API_ENDPOINTS.STATIC_DATA.STATIC_ASSET_GRAPH))\r\n        response = await response.json()\r\n        if (checkQueryParams('dev')) setLogs('api response ' + response)\r\n        addResponseOptionsDataIntoRedux({ newOptions: response, oldOptions: options, oldOriginalOptions: originalOptions, setOptions, setOriginalOptions, sorting })\r\n        setIsFetchingOptions?.(false)\r\n        setSyncDate?.(Date.now())\r\n    }\r\n}\r\n","export const LATEST = 'latest'\r\nexport const ALPHABETICAL = 'alphabetical'\r\n","import { getPhilosopherData } from '../../../../../common/static/utils/utils'\r\nimport { getUserDetails, getUserMarkedQuotesCount, sendUserDetails } from '../../mobile/mobile-menu/utils/utils'\r\n\r\nexport const setThemeClassNameOnHTMLTag = (value) => {\r\n    let root = document.getElementsByTagName('html')[0]\r\n    root.className = ''\r\n    if (value) {\r\n        root.classList.add('darkTheme')\r\n    } else {\r\n        root.classList.add('lightTheme')\r\n    }\r\n}\r\n\r\nexport const bringIntoOriginalOrder = (originalOptions, newOptions) => originalOptions.map((item) => getPhilosopherData({ philosopher: item.value, options: newOptions })).reverse()\r\n\r\nexport const bringIntoAlphabeticalOrder = (options) => [...options].sort((a, b) => a.fullName.localeCompare(b.fullName))\r\n\r\nexport async function compareWithServerSyncDatesAndMakeAnAPICall(userName, markedQuotes, openSnackbar, setMarkedQuotes, setRestoreQuotesFromServerCachedDate, markedQuoteClientCount) {\r\n    const markedQuotesFromServerCount = await getUserMarkedQuotesCount({ userName })\r\n    if (markedQuotesFromServerCount) {\r\n        if (markedQuotesFromServerCount > markedQuoteClientCount) {\r\n            let { markedQuotesFromServer } = await getUserDetails({ userName, openSnackbar })\r\n            setMarkedQuotes(markedQuotesFromServer)\r\n            openSnackbar('Auto-Sync : Restored all marked quotes!', 4000)\r\n        } else if (markedQuoteClientCount > markedQuotesFromServerCount) {\r\n            await sendUserDetails({ userName, markedQuotes, openSnackbar })\r\n            openSnackbar('Auto-Sync : Synced marked quotes with server database!', 4000)\r\n        }\r\n        setRestoreQuotesFromServerCachedDate(Date.now())\r\n    }\r\n}\r\n","import { API_ENDPOINTS } from '../../../../../../common/apis/apiEndpoints'\r\nimport { retryTenTimes } from '../../../../../../common/utils/apiUtils'\r\n\r\nexport const sendUserDetails = async ({ userName, markedQuotes, openSnackbar, setSyncDate }) => {\r\n    await retryTenTimes(async () => {\r\n        return await fetch(API_ENDPOINTS.MARKED_QUOTES.BACKUP, {\r\n            method: 'post',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({\r\n                userName,\r\n                markedQuotes,\r\n                dateSynced: Date.now(),\r\n            }),\r\n        })\r\n    })\r\n}\r\n\r\nexport const getUserDetails = async ({ userName, openSnackbar }) => {\r\n    let response = await retryTenTimes(\r\n        async () =>\r\n            await fetch(API_ENDPOINTS.MARKED_QUOTES.RESTORE, {\r\n                method: 'post',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({\r\n                    userName,\r\n                }),\r\n            })\r\n    )\r\n\r\n    response = await response.json()\r\n    if (response?.ok) {\r\n        try {\r\n            const markedQuotesFromServer = response?.results?.[0]?.markedQuotes\r\n            const markedQuotesFromServerCount = Object.values(markedQuotesFromServer).flat().length\r\n            if (markedQuotesFromServer && markedQuotesFromServerCount > 0) {\r\n                return { markedQuotesFromServer, dateFromServer: response?.results?.[0]?.dateSynced }\r\n                // setMarkedQuotes(response?.results?.[0]?.markedQuotes)\r\n            }\r\n        } catch (error) {\r\n            openSnackbar(JSON.stringify(error))\r\n        }\r\n    } else {\r\n        openSnackbar(JSON.stringify(response.error))\r\n    }\r\n}\r\n\r\nexport const getUserMarkedQuotesCount = async ({ userName }) => {\r\n    let response = await retryTenTimes(\r\n        async () =>\r\n            await fetch(API_ENDPOINTS.MARKED_QUOTES.GET_COUNT, {\r\n                method: 'post',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({\r\n                    userName,\r\n                }),\r\n            })\r\n    )\r\n\r\n    response = await response.json()\r\n    if (response?.ok) {\r\n        return response.count\r\n    } else {\r\n        return null\r\n    }\r\n}\r\n\r\nexport const loginRegister = async ({ apiCallType, userName, password, setIsLoggedIn, openSnackbar, setIsFetching }) => {\r\n    const capitalizedUserName = userName.charAt(0).toUpperCase() + userName.slice(1)\r\n    let response\r\n    setIsFetching(true)\r\n    if (apiCallType === 'login') {\r\n        response = await retryTenTimes(\r\n            async () =>\r\n                await fetch(API_ENDPOINTS.USER.LOGIN, {\r\n                    method: 'post',\r\n                    headers: { 'Content-Type': 'application/json' },\r\n                    body: JSON.stringify({\r\n                        userName,\r\n                        password,\r\n                    }),\r\n                })\r\n        )\r\n    } else {\r\n        response = await retryTenTimes(\r\n            async () =>\r\n                await fetch(API_ENDPOINTS.USER.CREATE, {\r\n                    method: 'post',\r\n                    headers: { 'Content-Type': 'application/json' },\r\n                    body: JSON.stringify({\r\n                        userName,\r\n                        password,\r\n                    }),\r\n                })\r\n        )\r\n    }\r\n\r\n    response = await response.json()\r\n    setIsFetching(false)\r\n\r\n    if (response?.ok) {\r\n        setIsLoggedIn(true)\r\n        openSnackbar(capitalizedUserName + ' ' + JSON.stringify(response.serverResponse))\r\n    } else {\r\n        openSnackbar(JSON.stringify(response.error))\r\n    }\r\n}\r\n","import { isObjEmpty } from '../../../../../common/utils/commonUtils'\r\nimport { removeReadData } from '../../../../../common/utils/staticDataUtils'\r\nimport { worker } from '../../../../../common/web-workers/worker'\r\n\r\nexport const changeQuotesData = ({ currentPhilosopher, currentData, setCurrentData, options }, { markedMode = null, markedQuotes, setMarkedQuotes }) => {\r\n    if (currentData) setCurrentData(currentData)\r\n    if (markedMode !== undefined && markedMode) removeReadData({ currentPhilosopher, markedMode, markedQuotes, setMarkedQuotes, currentData, setCurrentData })\r\n}\r\n\r\nexport const getPhilosopherFullName = ({ currentPhilosopher, options }) => {\r\n    const currentIndex = options.filter(({ value }) => currentPhilosopher === value)\r\n    if (!isObjEmpty(currentIndex)) return currentIndex && currentIndex[0].fullName\r\n}\r\n\r\nexport const getPhilosopherFullName_i10n = ({ currentPhilosopher, options }) => {\r\n    const currentIndex = options.filter(({ value }) => currentPhilosopher === value)\r\n    if (!isObjEmpty(currentIndex)) return currentIndex && currentIndex[0].fullNameInOtherLanguages\r\n}\r\n\r\nexport const searchByWordLength = async (start, end, quotes, { markedMode, markedQuotes, setMarkedQuotes }, { setCurrentData, currentPhilosopher }) => {\r\n    return new Promise((resolve) => {\r\n        if (quotes !== undefined) {\r\n            if (typeof start === 'string' && start.trim() === '') start = 0\r\n            worker.postMessage({ quotes, end, start, filterName: 'wordCountFilter' })\r\n            worker.onmessage = (event) => {\r\n                const newData = JSON.parse(eval(`(${JSON.stringify(event.data)})`))\r\n                changeQuotesData({ currentData: newData, setCurrentData, currentPhilosopher }, { markedMode, markedQuotes, setMarkedQuotes })\r\n                resolve()\r\n            }\r\n        }\r\n    })\r\n}\r\n\r\nexport function getWordCount(str) {\r\n    return str.split(' ').filter(function (n) {\r\n        return n !== ''\r\n    }).length\r\n}\r\n"],"names":["lazyLoadAsset","philosopherName","_ref3","callbacks","options","setOptions","Promise","resolve","reject","fileName","toLowerCase","retryTenTimes","fetch","API_ENDPOINTS","STATIC_DATA","STATIC_QUOTES","then","response","json","data","map","callback","addPhilosopherInGlobalData","_ref2","quotes","newOptions","JSON","parse","stringify","trim","index","getPhilosopherObjectIndex","existingQuotes","undefined","catch","e","philosopher","findIndex","_ref4","value","getPhilosopherData","_ref5","filter","_ref6","getPhilosopherQuotes","_ref7","_options$filter$","_ref8","getCurrentPhilosopherFullname","currentPhilosopher","fullName","doesPhilosopherDataExist","isUndefined","isObjEmpty","obj","Object","values","length","constructor","uuidv4","replace","c","crypto","getRandomValues","Uint8Array","toString","isCacheExpired","startDate","setLogs","arguments","Date","endDate","dateDifferenceInMilliSeconds","getTime","dateDifferenceInDays","Math","floor","checkQueryParams","getStorageValue","key","defaultValue","saved","localStorage","getItem","initial","removeReadData","_ref","markedMode","markedQuotes","setMarkedQuotes","currentData","setCurrentData","newMarkedQuotes","readQuotesArray","READ_ARRAY_LOCALSTORAGE_KEY","concat","Set","push","newData","_","id","indexOf","param","query","qs","split","join","tokens","params","re","exec","decodeURIComponent","getQueryParams","document","location","search","val","worker","window","Worker","URL","alert","tableData","columns","_jsx","children","accessor","tData","className","styles","handleSorting","sortField","setSortField","useState","order","setOrder","label","sortable","cl","onClick","sortOrder","handleSortingChange","useSortableTable","setTableData","useEffect","defaultTableData","sort","a","b","filterColumn","column","sortbyOrder","assign","ascending","localeCompare","numeric","getDefaultSorting","sorted","_Fragment","_jsxs","TableHead","TableBody","Report","setData","dispatch","useDispatch","useSelector","state","philosophersData","darkMode","originalOptions","_state$philosophersDa","setOriginalOptions","setOriginalOptionsRedux","setOptionsRedux","sorting","getPhilosopherJSON","sum","hasOwnProperty","readCount","getPhilosopherFullName","createData","setThemeClassNameOnHTMLTag","Table","style","display","alignItems","justifyContent","height","fontSize","margin","MAX_RECENT_PHILOSOPHERS","addResponseOptionsDataIntoRedux","oldOptions","oldOriginalOptions","STATIC_OPTIONS","resultantOptions","merge","newOptionsCopy","forEach","element","newOptionindex","oldOptionIndex","LATEST","bringIntoOriginalOrder","ALPHABETICAL","bringIntoAlphabeticalOrder","onPhilosopherSelectChange","listRef","setIsFetching","setStart","setEnd","setSearchText","setCurrentPhilosopher","scrollPosition","setRowsRendered","recentPhilosophers","setRecentPhilosophers","slice","changeQuotesData","onFocusHandler","async","isLoggedIn","setSyncDate","isFetchingOptions","setIsFetchingOptions","syncDate","today","STATIC_ASSET_GRAPH","now","root","getElementsByTagName","classList","add","item","reverse","compareWithServerSyncDatesAndMakeAnAPICall","userName","openSnackbar","setRestoreQuotesFromServerCachedDate","markedQuoteClientCount","markedQuotesFromServerCount","getUserMarkedQuotesCount","markedQuotesFromServer","getUserDetails","sendUserDetails","MARKED_QUOTES","BACKUP","method","headers","body","dateSynced","_response","RESTORE","ok","_response2","_response2$results","_response2$results$","results","flat","_response3","_response3$results","_response3$results$","dateFromServer","error","_response4","GET_COUNT","count","loginRegister","_response5","apiCallType","password","setIsLoggedIn","capitalizedUserName","charAt","toUpperCase","USER","LOGIN","CREATE","serverResponse","currentIndex","getPhilosopherFullName_i10n","fullNameInOtherLanguages","searchByWordLength","start","end","postMessage","filterName","onmessage","event","eval","getWordCount","str","n"],"sourceRoot":""}