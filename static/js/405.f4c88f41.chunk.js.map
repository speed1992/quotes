{"version":3,"file":"static/js/405.f4c88f41.chunk.js","mappings":"wPASMA,EAAYC,EAAAA,MAAW,kBAAMC,EAAAA,EAAAA,KAAc,kBAAM,oCACjDC,EAAgBF,EAAAA,MAAW,kBAAMC,EAAAA,EAAAA,KAAc,kBAAM,oCACrDE,EAAgBH,EAAAA,MAAW,kBAAMC,EAAAA,EAAAA,KAAc,kBAAM,mCACrDG,EAAiBJ,EAAAA,MAAW,kBAAMC,EAAAA,EAAAA,KAAc,kBAAM,oCAwD5D,MAtDA,YAA2L,IAArKI,EAAoK,EAApKA,WAAYC,EAAwJ,EAAxJA,cAAeC,EAAyI,EAAzIA,QAASC,EAAgI,EAAhIA,cAAeC,EAAiH,EAAjHA,SAAUC,EAAuG,EAAvGA,YAAaC,EAA0F,EAA1FA,WAAYC,EAA8E,EAA9EA,QAASC,EAAqE,EAArEA,SAAUC,EAA2D,EAA3DA,YAAaC,EAA8C,EAA9CA,gBAAiBC,EAA6B,EAA7BA,WAAYC,EAAiB,EAAjBA,cAC/JC,GAAaC,EAAAA,EAAAA,KAAY,qBAAGC,iBAAoBF,cAChDG,GAAeF,EAAAA,EAAAA,KAAY,qBAAGC,iBAAoBC,gBACxD,GAAuBC,EAAAA,EAAAA,MAAhBC,GAAP,eAEMC,GAAWC,EAAAA,EAAAA,MAEXC,EAA2B,SAACC,GACnBA,EAAMC,OAAOC,KAEbC,EAAAA,EAAQnB,EAAWmB,EAAAA,GACzBnB,EAAWoB,EAAAA,IAGpB,OACI,SAAC3B,EAAD,CAAgB4B,SAAU,kBAAMxB,GAAc,IAA9C,UACI,gBAAIqB,GAAG,aAAaI,MAAO,CAAEC,QAAS3B,EAAU,QAAU,QAA1D,WACI,+CAEI,4BACI,kBAAO4B,KAAK,QAAQN,GAAIC,EAAAA,EAAQM,KAAK,WAAWC,QAASX,EAA0BY,eAAgB1B,IAAYkB,EAAAA,KAC/G,kBAAOS,QAAST,EAAAA,EAAhB,wBAEJ,4BACI,kBAAOK,KAAK,QAAQN,GAAIE,EAAAA,EAAcK,KAAK,WAAWC,QAASX,EAA0BY,eAAgB1B,IAAYmB,EAAAA,KACrH,kBAAOQ,QAASR,EAAAA,EAAhB,iCAGR,yCAEI,kBAAOI,KAAK,WAAWK,QAASnC,EAAYoC,SAAU,gBAAaD,EAAb,EAAGZ,OAAUY,QAAb,OAA6BlC,EAAckC,UAErG,uCAEI,kBAAOL,KAAK,WAAWK,QAAS/B,EAAUgC,SAAU,gBAAaD,EAAb,EAAGZ,OAAUY,QAAb,OAA6B9B,EAAY8B,UAEjG,+CAEI,kBAAOC,SAAU,SAACd,GAAD,OAAWH,GAASkB,EAAAA,EAAAA,IAAmBf,EAAMC,OAAOe,MAAQ,MAAMC,UAAU,aAAaT,KAAK,SAASQ,MAAOzB,EAA0B,GAAbA,EAAkB,SAElK,yBACI,SAAC,KAAD,CAAM2B,GAAIC,EAAAA,EAAAA,OAAAA,MAAqBb,MAAO,CAAEc,eAAgB,OAAQC,MAAO,QAAvE,UACI,iDAGR,wBAAKhC,GAAa,SAACd,EAAD,CAAqBY,YAAAA,EAAaD,SAAAA,EAAUQ,aAAAA,EAAcE,aAAAA,EAAcR,gBAAAA,KAAwB,SAACZ,EAAD,CAAqBW,YAAAA,EAAaD,SAAAA,EAAUU,aAAAA,EAAcN,cAAAA,OAC5K,yBACI,SAAClB,EAAD","sources":["components/organisms/home/mobile/mobile-menu/mobile-menu.js"],"sourcesContent":["import React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport { useSnackbar } from 'react-simple-snackbar'\r\nimport ROUTES from '../../../../../common/routes/routes'\r\nimport { retryTenTimes } from '../../../../../common/utils/apiUtils'\r\nimport { ALPHABETICAL, LATEST } from '../../home-page/constants/constants'\r\nimport { setVoiceSpeedRedux } from '../../home-page/homePageRedux/homePageRedux'\r\nimport './mobile-menu.css'\r\nconst BuildInfo = React.lazy(() => retryTenTimes(() => import('../../../tools/build-info/build-info')))\r\nconst BackupRestore = React.lazy(() => retryTenTimes(() => import('../backup-restore/backup-restore')))\r\nconst LoginRegister = React.lazy(() => retryTenTimes(() => import('../login-register/login-register')))\r\nconst OutsideAlerter = React.lazy(() => retryTenTimes(() => import('../../../../../common/components/outside-alerter/outside-alerter')))\r\n\r\nfunction MobileMenu({ markedMode, setMarkedMode, visible, toggleVisible, darkMode, setDarkMode, setSorting, sorting, userName, setUserName, setMarkedQuotes, isLoggedIn, setIsLoggedIn }) {\r\n    const voiceSpeed = useSelector(({ philosophersData: { voiceSpeed } }) => voiceSpeed)\r\n    const markedQuotes = useSelector(({ philosophersData: { markedQuotes } }) => markedQuotes)\r\n    const [openSnackbar] = useSnackbar()\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const onClickSortButtonHandler = (event) => {\r\n        const id = event.target.id\r\n\r\n        if (id === LATEST) setSorting(LATEST)\r\n        else setSorting(ALPHABETICAL)\r\n    }\r\n\r\n    return (\r\n        <OutsideAlerter callback={() => toggleVisible(false)}>\r\n            <ul id=\"slide_menu\" style={{ display: visible ? 'block' : 'none' }}>\r\n                <li>\r\n                    Sort philosophers\r\n                    <div>\r\n                        <input type=\"radio\" id={LATEST} name=\"sortType\" onClick={onClickSortButtonHandler} defaultChecked={sorting === LATEST ? true : false} />\r\n                        <label htmlFor={LATEST}>Latest</label>\r\n                    </div>\r\n                    <div>\r\n                        <input type=\"radio\" id={ALPHABETICAL} name=\"sortType\" onClick={onClickSortButtonHandler} defaultChecked={sorting === ALPHABETICAL ? true : false} />\r\n                        <label htmlFor={ALPHABETICAL}>Alphabetical</label>\r\n                    </div>\r\n                </li>\r\n                <li>\r\n                    Marked Mode\r\n                    <input type=\"checkbox\" checked={markedMode} onChange={({ target: { checked } }) => setMarkedMode(checked)} />\r\n                </li>\r\n                <li>\r\n                    Dark Mode\r\n                    <input type=\"checkbox\" checked={darkMode} onChange={({ target: { checked } }) => setDarkMode(checked)} />\r\n                </li>\r\n                <li>\r\n                    Voice Speed[1-20]\r\n                    <input onChange={(event) => dispatch(setVoiceSpeedRedux(event.target.value / 10))} className=\"voiceSpeed\" type=\"number\" value={voiceSpeed ? voiceSpeed * 10 : ''} />\r\n                </li>\r\n                <li>\r\n                    <Link to={ROUTES.report.route} style={{ textDecoration: 'none', color: '#000' }}>\r\n                        <button>Open Report</button>\r\n                    </Link>\r\n                </li>\r\n                <li>{isLoggedIn ? <BackupRestore {...{ setUserName, userName, markedQuotes, openSnackbar, setMarkedQuotes }} /> : <LoginRegister {...{ setUserName, userName, openSnackbar, setIsLoggedIn }} />}</li>\r\n                <li>\r\n                    <BuildInfo />\r\n                </li>\r\n            </ul>\r\n        </OutsideAlerter>\r\n    )\r\n}\r\n\r\nexport default MobileMenu\r\n"],"names":["BuildInfo","React","retryTenTimes","BackupRestore","LoginRegister","OutsideAlerter","markedMode","setMarkedMode","visible","toggleVisible","darkMode","setDarkMode","setSorting","sorting","userName","setUserName","setMarkedQuotes","isLoggedIn","setIsLoggedIn","voiceSpeed","useSelector","philosophersData","markedQuotes","useSnackbar","openSnackbar","dispatch","useDispatch","onClickSortButtonHandler","event","target","id","LATEST","ALPHABETICAL","callback","style","display","type","name","onClick","defaultChecked","htmlFor","checked","onChange","setVoiceSpeedRedux","value","className","to","ROUTES","textDecoration","color"],"sourceRoot":""}