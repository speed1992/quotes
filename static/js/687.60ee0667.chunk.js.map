{"version":3,"file":"static/js/687.60ee0667.chunk.js","mappings":"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","sources":["common/static/utils/utils.js","common/utils/commonUtils.js","common/utils/localStorageUtils.js","common/utils/staticDataUtils.js","common/web-workers/worker.js","common/utils/dateUtils.js","common/utils/lazyLoadUtils.js","common/utils/objectUtils.js","components/organisms/home/desktop/desktop-header/utils/utils.js","components/organisms/home/home-page/constants/constants.js","components/organisms/home/home-page/utils/utils.js","components/organisms/home/mobile/mobile-menu/utils/utils.js","components/organisms/home/quotes-list/utils/utils.js"],"sourcesContent":["import { API_ENDPOINTS } from '../../apis/apiEndpoints'\nimport { retryTenTimes } from '../../utils/apiUtils'\n\nexport const addPhilosopherNameToQuote = (quote, philosopherFullName) => `${quote} â€• ${philosopherFullName}`\n\nexport const convertQuoteArray = (quoteArr, philosopherFullName) => quoteArr.map((quote) => addPhilosopherNameToQuote(quote, philosopherFullName))\n\nexport const allocateIdsToData = (data) =>\n    data.forEach((element, index) => {\n        element.id = index\n    })\n\nexport const doOperationsOnData = ({ data, setData }, sortingMethod) => {\n    data = data.slice()\n\n    if (sortingMethod === 'alphabetical') data.sort((a, b) => a.fullName.localeCompare(b.fullName))\n    else data.sort((a, b) => b.id - a.id)\n\n    setData(data)\n}\n\nexport const addPhilosopherInGlobalData = (philosopherName, { options, setOptions }, quotes) => {\n    const newOptions = JSON.parse(JSON.stringify(options))\n    if (philosopherName.trim().toLowerCase() === 'all') {\n        const index = getPhilosopherObjectIndex(philosopherName, options)\n        let existingQuotes\n        if (newOptions[index].quotes === undefined) existingQuotes = []\n        else {\n            existingQuotes = newOptions[index].quotes\n        }\n        newOptions[index].quotes = [...existingQuotes, ...quotes]\n    } else {\n        const index = getPhilosopherObjectIndex(philosopherName, options)\n        newOptions[index].quotes = quotes\n    }\n    setOptions(newOptions)\n}\n\nexport const lazyLoadAsset = (philosopherName, { options, setOptions }, callbacks) => {\n    return new Promise((resolve, reject) => {\n        const fileName = philosopherName.toLowerCase()\n        retryTenTimes(() => fetch(API_ENDPOINTS.STATIC_DATA.STATIC_QUOTES + fileName + '.json'))\n            .then((response) => response.json())\n            .then((data) => {\n                callbacks?.map((callback) => callback(data))\n                addPhilosopherInGlobalData(philosopherName, { options, setOptions }, data)\n                resolve()\n            })\n            .catch((e) => reject(e))\n    })\n}\n\nexport const getPhilosopherObjectIndex = (philosopher, options) => options.findIndex(({ value }) => value === philosopher)\n\nexport const getPhilosopherData = ({ philosopher, options }) => options.filter(({ value }) => value === philosopher)[0]\n\nexport const getPhilosopherQuotes = ({ philosopher, options }) => options.filter(({ value }) => value === philosopher)[0]?.quotes\n\nexport const getCurrentPhilosopherFullname = (currentPhilosopher, options) => {\n    const currentPhilosopherData = options[getPhilosopherObjectIndex(currentPhilosopher, options)]\n    return currentPhilosopherData.fullName\n}\n\nexport const doesPhilosopherDataExist = (philosopher, options) => {\n    if (options[getPhilosopherObjectIndex(philosopher, options)]) return true\n    else return false\n}\n","export const isUndefined = (value) => typeof value === 'undefined'\nexport const isObjEmpty = (obj) => Object.values(obj).length === 0 && obj.constructor === Object\n\nexport function uuidv4() {\n    return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, (c) => (c ^ (crypto.getRandomValues(new Uint8Array(1))[0] & (15 >> (c / 4)))).toString(16))\n}\n","import { useEffect, useState } from 'react'\n\nexport function getStorageValue(key, defaultValue) {\n    const saved = localStorage.getItem(key)\n    const initial = JSON.parse(saved)\n    if (initial === undefined || initial === 'undefined' || initial === 'null' || initial === null) {\n        return defaultValue\n    } else return initial\n}\n\nexport function setStorageValue(key, value) {\n    localStorage.setItem(key, JSON.stringify(value))\n}\n\nexport const useLocalStorage = (key, defaultValue) => {\n    const [value, setValue] = useState(() => {\n        return getStorageValue(key, defaultValue)\n    })\n\n    useEffect(() => {\n        localStorage.setItem(key, JSON.stringify(value))\n    }, [key, value])\n\n    return [value, setValue]\n}\n","import { getStorageValue } from './localStorageUtils'\n\nexport const removeReadData = ({ index, currentPhilosopher, markedMode, markedQuotes = {}, setMarkedQuotes, currentData, setCurrentData }) => {\n    let newMarkedQuotes = JSON.parse(JSON.stringify(markedQuotes))\n    let readQuotesArray = []\n\n    const READ_ARRAY_LOCALSTORAGE_KEY = `${currentPhilosopher}-MARKED_AS_READ`\n    readQuotesArray = getStorageValue(READ_ARRAY_LOCALSTORAGE_KEY, [])\n\n    if (markedQuotes && markedQuotes[currentPhilosopher] !== undefined) {\n        readQuotesArray = [...readQuotesArray, ...markedQuotes[currentPhilosopher]]\n    }\n\n    readQuotesArray = [...new Set(readQuotesArray)]\n\n    if (index) {\n        readQuotesArray.push(index)\n    }\n\n    newMarkedQuotes[currentPhilosopher] = readQuotesArray\n    setMarkedQuotes(newMarkedQuotes)\n\n    const newData = currentData.filter(({ id }, _) => readQuotesArray.indexOf(id) === -1)\n    setCurrentData(JSON.parse(JSON.stringify(newData)))\n}\n","export let worker\nif (window.Worker) {\n    worker = new Worker(new URL('./filter-worker.js', import.meta.url))\n} else {\n    alert(\"Your browser doesn't support web workers.\")\n}\n","const CACHE_TIME_IN_DAYS = 1\n\nexport const isCacheExpired = (startDate) => {\n    startDate = new Date(startDate)\n    const endDate = new Date()\n    const dateDifferenceInMilliSeconds = endDate.getTime() - startDate.getTime()\n    const dateDifferenceInDays = Math.floor(dateDifferenceInMilliSeconds / (1000 * 60 * 60 * 24))\n    return dateDifferenceInDays >= CACHE_TIME_IN_DAYS\n}\n","import { ALPHABETICAL, LATEST } from '../../components/organisms/home/home-page/constants/constants'\nimport { STATIC_OPTIONS } from '../../components/organisms/home/home-page/homePageRedux/initialState'\nimport { bringIntoAlphabeticalOrder, bringIntoOriginalOrder } from '../../components/organisms/home/home-page/utils/utils'\nimport { merge } from './objectUtils'\n\nexport const addOptionsDataIntoRedux = ({ newOptions, oldOptions, oldOriginalOptions, setOptions, setOriginalOptions }) => {\n    let resultantOptions\n    resultantOptions = [...oldOptions, ...newOptions]\n    setOptions(resultantOptions)\n    setOriginalOptions([...STATIC_OPTIONS, ...newOptions])\n}\n\nexport const addResponseOptionsDataIntoRedux = ({ newOptions, oldOptions, oldOriginalOptions, setOptions, setOriginalOptions, sorting }) => {\n    const originalOptions = [...STATIC_OPTIONS, ...newOptions]\n    let resultantOptions = merge(oldOptions, [...originalOptions])\n    if (sorting === LATEST) {\n        resultantOptions = bringIntoOriginalOrder(originalOptions, resultantOptions)\n    } else if (sorting === ALPHABETICAL) {\n        resultantOptions = bringIntoAlphabeticalOrder(resultantOptions)\n    }\n    setOptions([...resultantOptions])\n    setOriginalOptions(originalOptions)\n}\n","import { getPhilosopherObjectIndex } from '../static/utils/utils'\n\nexport const merge = (oldOptions, newOptions) => {\n    let newOptionsCopy = JSON.parse(JSON.stringify(newOptions))\n    newOptionsCopy.forEach((element, newOptionindex) => {\n        const oldOptionIndex = getPhilosopherObjectIndex(element.value, oldOptions)\n        if (oldOptionIndex !== -1) {\n            newOptionsCopy[newOptionindex].quotes = oldOptions[oldOptionIndex].quotes\n        }\n    })\n    return newOptionsCopy\n}\n","import { API_ENDPOINTS } from '../../../../../../common/apis/apiEndpoints'\nimport { MAX_RECENT_PHILOSOPHERS } from '../../../../../../common/settings/constants'\nimport { getPhilosopherQuotes, lazyLoadAsset } from '../../../../../../common/static/utils/utils'\nimport { retryTenTimes } from '../../../../../../common/utils/apiUtils'\nimport { isCacheExpired } from '../../../../../../common/utils/dateUtils'\nimport { addResponseOptionsDataIntoRedux } from '../../../../../../common/utils/lazyLoadUtils'\nimport { changeQuotesData } from '../../../quotes-list/utils/utils'\n\nexport function onPhilosopherSelectChange({ philosopher, listRef, setIsFetching, setStart, setEnd, setSearchText, setCurrentPhilosopher, currentData, setCurrentData, options, setOptions, markedMode, markedQuotes, setMarkedQuotes, scrollPosition, setRowsRendered, recentPhilosophers, setRecentPhilosophers }) {\n    function callback() {\n        if (recentPhilosophers) setRecentPhilosophers([...new Set([philosopher, ...recentPhilosophers.slice(0, MAX_RECENT_PHILOSOPHERS - 1)])])\n        setCurrentPhilosopher(philosopher)\n        changeQuotesData({ philosopher, currentData, setCurrentData, options }, { markedMode, markedQuotes, setMarkedQuotes })\n        setIsFetching(false)\n    }\n    setStart(1)\n    setEnd('')\n    setSearchText('')\n    setIsFetching(true)\n\n    if (!getPhilosopherQuotes({ philosopher, options })) {\n        lazyLoadAsset(philosopher, { options, setOptions }, []).then(callback)\n    } else {\n        callback()\n    }\n}\n\nexport const onFocusHandler = async ({ options, setOptions, isLoggedIn, setSyncDate, isFetchingOptions, setIsFetchingOptions, originalOptions, setOriginalOptions, sorting, syncDate }) => {\n    if (isCacheExpired(syncDate) || options.length === 1) {\n        if (isLoggedIn !== true) {\n            setSyncDate?.(Date.now())\n        }\n        setIsFetchingOptions?.(true)\n        let response = await retryTenTimes(() => fetch(API_ENDPOINTS.STATIC_DATA.STATIC_ASSET_GRAPH))\n        response = await response.json()\n        addResponseOptionsDataIntoRedux({ newOptions: response, oldOptions: options, oldOriginalOptions: originalOptions, setOptions, setOriginalOptions, sorting })\n        setIsFetchingOptions?.(false)\n    }\n}\n","export const LATEST = 'latest'\nexport const ALPHABETICAL = 'alphabetical'\n","import { getPhilosopherData } from '../../../../../common/static/utils/utils'\nimport { getUserDetails, sendUserDetails } from '../../mobile/mobile-menu/utils/utils'\n\nexport const setThemeClassNameOnHTMLTag = (value) => {\n    let root = document.getElementsByTagName('html')[0]\n    root.className = ''\n    if (value) {\n        root.classList.add('darkTheme')\n    } else {\n        root.classList.add('lightTheme')\n    }\n}\n\nexport const bringIntoOriginalOrder = (originalOptions, newOptions) => originalOptions.map((item) => getPhilosopherData({ philosopher: item.value, options: newOptions })).reverse()\n\nexport const bringIntoAlphabeticalOrder = (options) => [...options].sort((a, b) => a.fullName.localeCompare(b.fullName))\n\nexport function getClientSyncDates(syncDate) {\n    let currentClientDate = new Date()\n    let lastSyncClientDate = new Date(syncDate)\n\n    currentClientDate.setHours(0, 0, 0, 0)\n    currentClientDate = currentClientDate.getTime()\n\n    lastSyncClientDate = lastSyncClientDate.setHours(0, 0, 0, 0)\n    return { currentClientDate, lastSyncClientDate }\n}\n\nexport async function compareWithServerSyncDatesAndMakeAnAPICall(userName, markedQuotes, openSnackbar, setMarkedQuotes, setSyncDate, markedQuoteClientCount, currentClientDate) {\n    let { markedQuotesFromServer, dateFromServer } = await getUserDetails({ userName, markedQuotes, openSnackbar, setMarkedQuotes })\n    setSyncDate(Date.now())\n    if (markedQuotesFromServer) {\n        const markedQuotesFromServerCount = Object.values(markedQuotesFromServer).flat().length\n        if (markedQuotesFromServerCount > markedQuoteClientCount) {\n            setMarkedQuotes(markedQuotesFromServer)\n            openSnackbar('Auto-Sync : Restored all marked quotes!', 4000)\n        } else if (markedQuoteClientCount > markedQuotesFromServerCount) {\n            dateFromServer = new Date(dateFromServer)\n            dateFromServer.setHours(0, 0, 0, 0)\n            if (currentClientDate > dateFromServer) {\n                await sendUserDetails({ userName, markedQuotes, openSnackbar })\n            }\n        }\n    }\n}\n","import { API_ENDPOINTS } from '../../../../../../common/apis/apiEndpoints'\nimport { retryTenTimes } from '../../../../../../common/utils/apiUtils'\n\nexport const sendUserDetails = async ({ userName, markedQuotes, openSnackbar, setSyncDate }) => {\n    await retryTenTimes(async () => {\n        return await fetch(API_ENDPOINTS.MARKED_QUOTES.BACKUP, {\n            method: 'post',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n                userName,\n                markedQuotes,\n                dateSynced: Date.now(),\n            }),\n        })\n    })\n}\n\nexport const getUserDetails = async ({ userName, markedQuotes, openSnackbar, setMarkedQuotes }) => {\n    let response = await retryTenTimes(\n        async () =>\n            await fetch(API_ENDPOINTS.MARKED_QUOTES.RESTORE, {\n                method: 'post',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({\n                    userName,\n                }),\n            })\n    )\n\n    response = await response.json()\n    if (response?.ok) {\n        try {\n            const markedQuotesFromServer = response?.results?.[0]?.markedQuotes\n            const markedQuotesFromServerCount = Object.values(markedQuotesFromServer).flat().length\n            if (markedQuotesFromServer && markedQuotesFromServerCount > 0) {\n                return { markedQuotesFromServer, dateFromServer: response?.results?.[0]?.dateSynced }\n                // setMarkedQuotes(response?.results?.[0]?.markedQuotes)\n            }\n        } catch (error) {\n            openSnackbar(JSON.stringify(error))\n        }\n    } else {\n        openSnackbar(JSON.stringify(response.error))\n    }\n}\n\nexport const loginRegister = async ({ apiCallType, userName, password, setIsLoggedIn, openSnackbar, setIsFetching }) => {\n    const capitalizedUserName = userName.charAt(0).toUpperCase() + userName.slice(1)\n    let response\n    setIsFetching(true)\n    if (apiCallType === 'login') {\n        response = await retryTenTimes(\n            async () =>\n                await fetch(API_ENDPOINTS.USER.LOGIN, {\n                    method: 'post',\n                    headers: { 'Content-Type': 'application/json' },\n                    body: JSON.stringify({\n                        userName,\n                        password,\n                    }),\n                })\n        )\n    } else {\n        response = await retryTenTimes(\n            async () =>\n                await fetch(API_ENDPOINTS.USER.CREATE, {\n                    method: 'post',\n                    headers: { 'Content-Type': 'application/json' },\n                    body: JSON.stringify({\n                        userName,\n                        password,\n                    }),\n                })\n        )\n    }\n\n    response = await response.json()\n    setIsFetching(false)\n\n    if (response?.ok) {\n        setIsLoggedIn(true)\n        openSnackbar(capitalizedUserName + ' ' + JSON.stringify(response.serverResponse))\n    } else {\n        openSnackbar(JSON.stringify(response.error))\n    }\n}\n","import { isObjEmpty } from '../../../../../common/utils/commonUtils'\nimport { removeReadData } from '../../../../../common/utils/staticDataUtils'\nimport { worker } from '../../../../../common/web-workers/worker'\n\nexport const changeQuotesData = ({ currentPhilosopher, currentData, setCurrentData, options }, { markedMode = null, markedQuotes, setMarkedQuotes }) => {\n    if (currentData) setCurrentData(currentData)\n    if (markedMode !== undefined && markedMode) removeReadData({ currentPhilosopher, markedMode, markedQuotes, setMarkedQuotes, currentData, setCurrentData })\n}\n\nexport const getPhilosopherFullName = ({ currentPhilosopher, options }) => {\n    const currentIndex = options.filter(({ value }) => currentPhilosopher === value)\n    if (!isObjEmpty(currentIndex)) return currentIndex && currentIndex[0].fullName\n}\n\nexport const getPhilosopherFullName_i10n = ({ currentPhilosopher, options }) => {\n    const currentIndex = options.filter(({ value }) => currentPhilosopher === value)\n    if (!isObjEmpty(currentIndex)) return currentIndex && currentIndex[0].fullNameInOtherLanguages\n}\n\nexport const searchByWordLength = async (start, end, quotes, { markedMode, markedQuotes, setMarkedQuotes }, { setCurrentData, currentPhilosopher }) => {\n    return new Promise((resolve) => {\n        if (quotes !== undefined) {\n            if (typeof start === 'string' && start.trim() === '') start = 0\n            worker.postMessage({ quotes, end, start, filterName: 'wordCountFilter' })\n            worker.onmessage = (event) => {\n                const newData = JSON.parse(eval(`(${JSON.stringify(event.data)})`))\n                changeQuotesData({ currentData: newData, setCurrentData, currentPhilosopher }, { markedMode, markedQuotes, setMarkedQuotes })\n                resolve()\n            }\n        }\n    })\n}\n\nexport function getWordCount(str) {\n    return str.split(' ').filter(function (n) {\n        return n !== ''\n    }).length\n}\n"],"names":["lazyLoadAsset","philosopherName","callbacks","options","setOptions","Promise","resolve","reject","fileName","toLowerCase","retryTenTimes","fetch","API_ENDPOINTS","then","response","json","data","map","callback","quotes","newOptions","JSON","parse","stringify","trim","existingQuotes","index","getPhilosopherObjectIndex","undefined","addPhilosopherInGlobalData","catch","e","philosopher","findIndex","value","getPhilosopherData","filter","getPhilosopherQuotes","getCurrentPhilosopherFullname","currentPhilosopher","fullName","doesPhilosopherDataExist","isUndefined","isObjEmpty","obj","Object","values","length","constructor","uuidv4","replace","c","crypto","getRandomValues","Uint8Array","toString","getStorageValue","key","defaultValue","saved","localStorage","getItem","initial","removeReadData","markedMode","markedQuotes","setMarkedQuotes","currentData","setCurrentData","newMarkedQuotes","readQuotesArray","READ_ARRAY_LOCALSTORAGE_KEY","Set","push","newData","_","id","indexOf","worker","window","Worker","URL","alert","isCacheExpired","startDate","Date","dateDifferenceInMilliSeconds","getTime","Math","floor","addResponseOptionsDataIntoRedux","oldOptions","oldOriginalOptions","setOriginalOptions","sorting","originalOptions","STATIC_OPTIONS","resultantOptions","newOptionsCopy","forEach","element","newOptionindex","oldOptionIndex","merge","LATEST","bringIntoOriginalOrder","ALPHABETICAL","bringIntoAlphabeticalOrder","onPhilosopherSelectChange","setIsFetching","listRef","setStart","setEnd","setSearchText","setCurrentPhilosopher","recentPhilosophers","scrollPosition","setRowsRendered","setRecentPhilosophers","slice","MAX_RECENT_PHILOSOPHERS","changeQuotesData","onFocusHandler","isLoggedIn","setSyncDate","isFetchingOptions","setIsFetchingOptions","syncDate","now","setThemeClassNameOnHTMLTag","root","document","getElementsByTagName","className","classList","add","item","reverse","sort","a","b","localeCompare","getClientSyncDates","currentClientDate","lastSyncClientDate","setHours","compareWithServerSyncDatesAndMakeAnAPICall","userName","openSnackbar","markedQuoteClientCount","getUserDetails","markedQuotesFromServer","dateFromServer","markedQuotesFromServerCount","flat","sendUserDetails","method","headers","body","dateSynced","ok","results","error","loginRegister","apiCallType","password","setIsLoggedIn","capitalizedUserName","charAt","toUpperCase","serverResponse","getPhilosopherFullName","currentIndex","getPhilosopherFullName_i10n","fullNameInOtherLanguages","searchByWordLength","start","end","filterName","event","eval","getWordCount","str","split","n"],"sourceRoot":""}