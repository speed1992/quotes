{"version":3,"file":"static/js/452.fdd8d3d8.chunk.js","mappings":"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","sources":["../node_modules/clsx/dist/clsx.m.js","../node_modules/copy-to-clipboard/index.js","../node_modules/dom-helpers/esm/canUseDOM.js","../node_modules/dom-helpers/esm/scrollbarSize.js","../node_modules/react-lifecycles-compat/react-lifecycles-compat.es.js","../node_modules/react-virtualized/dist/commonjs/Grid/Grid.js","../node_modules/react-virtualized/dist/commonjs/Grid/accessibilityOverscanIndicesGetter.js","../node_modules/react-virtualized/dist/commonjs/Grid/defaultCellRangeRenderer.js","../node_modules/react-virtualized/dist/commonjs/Grid/defaultOverscanIndicesGetter.js","../node_modules/react-virtualized/dist/commonjs/Grid/index.js","../node_modules/react-virtualized/dist/commonjs/Grid/types.js","../node_modules/react-virtualized/dist/commonjs/Grid/utils/CellSizeAndPositionManager.js","../node_modules/react-virtualized/dist/commonjs/Grid/utils/ScalingCellSizeAndPositionManager.js","../node_modules/react-virtualized/dist/commonjs/Grid/utils/calculateSizeAndPositionDataAndUpdateScrollOffset.js","../node_modules/react-virtualized/dist/commonjs/Grid/utils/maxElementSize.js","../node_modules/react-virtualized/dist/commonjs/Grid/utils/updateScrollIndexHelper.js","../node_modules/react-virtualized/dist/commonjs/List/List.js","../node_modules/react-virtualized/dist/commonjs/List/index.js","../node_modules/react-virtualized/dist/commonjs/List/types.js","../node_modules/react-virtualized/dist/commonjs/utils/animationFrame.js","../node_modules/react-virtualized/dist/commonjs/utils/createCallbackMemoizer.js","../node_modules/react-virtualized/dist/commonjs/utils/requestAnimationTimeout.js","../node_modules/toggle-selection/index.js","../javascript/dynamic|C:/Users/paras/Desktop/quotes/node_modules/@babel/runtime/helpers/extends.js","../javascript/dynamic|C:/Users/paras/Desktop/quotes/node_modules/@babel/runtime/helpers/objectWithoutProperties.js","../javascript/dynamic|C:/Users/paras/Desktop/quotes/node_modules/@babel/runtime/helpers/objectWithoutPropertiesLoose.js","../javascript/esm|C:/Users/paras/Desktop/quotes/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../javascript/esm|C:/Users/paras/Desktop/quotes/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js"],"sourcesContent":["function r(e){var t,f,n=\"\";if(\"string\"==typeof e||\"number\"==typeof e)n+=e;else if(\"object\"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(f=r(e[t]))&&(n&&(n+=\" \"),n+=f);else for(t in e)e[t]&&(n&&(n+=\" \"),n+=t);return n}export function clsx(){for(var e,t,f=0,n=\"\";f<arguments.length;)(e=arguments[f++])&&(t=r(e))&&(n&&(n+=\" \"),n+=t);return n}export default clsx;","\"use strict\";\n\nvar deselectCurrent = require(\"toggle-selection\");\n\nvar clipboardToIE11Formatting = {\n  \"text/plain\": \"Text\",\n  \"text/html\": \"Url\",\n  \"default\": \"Text\"\n}\n\nvar defaultMessage = \"Copy to clipboard: #{key}, Enter\";\n\nfunction format(message) {\n  var copyKey = (/mac os x/i.test(navigator.userAgent) ? \"⌘\" : \"Ctrl\") + \"+C\";\n  return message.replace(/#{\\s*key\\s*}/g, copyKey);\n}\n\nfunction copy(text, options) {\n  var debug,\n    message,\n    reselectPrevious,\n    range,\n    selection,\n    mark,\n    success = false;\n  if (!options) {\n    options = {};\n  }\n  debug = options.debug || false;\n  try {\n    reselectPrevious = deselectCurrent();\n\n    range = document.createRange();\n    selection = document.getSelection();\n\n    mark = document.createElement(\"span\");\n    mark.textContent = text;\n    // avoid screen readers from reading out loud the text\n    mark.ariaHidden = \"true\"\n    // reset user styles for span element\n    mark.style.all = \"unset\";\n    // prevents scrolling to the end of the page\n    mark.style.position = \"fixed\";\n    mark.style.top = 0;\n    mark.style.clip = \"rect(0, 0, 0, 0)\";\n    // used to preserve spaces and line breaks\n    mark.style.whiteSpace = \"pre\";\n    // do not inherit user-select (it may be `none`)\n    mark.style.webkitUserSelect = \"text\";\n    mark.style.MozUserSelect = \"text\";\n    mark.style.msUserSelect = \"text\";\n    mark.style.userSelect = \"text\";\n    mark.addEventListener(\"copy\", function(e) {\n      e.stopPropagation();\n      if (options.format) {\n        e.preventDefault();\n        if (typeof e.clipboardData === \"undefined\") { // IE 11\n          debug && console.warn(\"unable to use e.clipboardData\");\n          debug && console.warn(\"trying IE specific stuff\");\n          window.clipboardData.clearData();\n          var format = clipboardToIE11Formatting[options.format] || clipboardToIE11Formatting[\"default\"]\n          window.clipboardData.setData(format, text);\n        } else { // all other browsers\n          e.clipboardData.clearData();\n          e.clipboardData.setData(options.format, text);\n        }\n      }\n      if (options.onCopy) {\n        e.preventDefault();\n        options.onCopy(e.clipboardData);\n      }\n    });\n\n    document.body.appendChild(mark);\n\n    range.selectNodeContents(mark);\n    selection.addRange(range);\n\n    var successful = document.execCommand(\"copy\");\n    if (!successful) {\n      throw new Error(\"copy command was unsuccessful\");\n    }\n    success = true;\n  } catch (err) {\n    debug && console.error(\"unable to copy using execCommand: \", err);\n    debug && console.warn(\"trying IE specific stuff\");\n    try {\n      window.clipboardData.setData(options.format || \"text\", text);\n      options.onCopy && options.onCopy(window.clipboardData);\n      success = true;\n    } catch (err) {\n      debug && console.error(\"unable to copy using clipboardData: \", err);\n      debug && console.error(\"falling back to prompt\");\n      message = format(\"message\" in options ? options.message : defaultMessage);\n      window.prompt(message, text);\n    }\n  } finally {\n    if (selection) {\n      if (typeof selection.removeRange == \"function\") {\n        selection.removeRange(range);\n      } else {\n        selection.removeAllRanges();\n      }\n    }\n\n    if (mark) {\n      document.body.removeChild(mark);\n    }\n    reselectPrevious();\n  }\n\n  return success;\n}\n\nmodule.exports = copy;\n","export default !!(typeof window !== 'undefined' && window.document && window.document.createElement);","import canUseDOM from './canUseDOM';\nvar size;\nexport default function scrollbarSize(recalc) {\n  if (!size && size !== 0 || recalc) {\n    if (canUseDOM) {\n      var scrollDiv = document.createElement('div');\n      scrollDiv.style.position = 'absolute';\n      scrollDiv.style.top = '-9999px';\n      scrollDiv.style.width = '50px';\n      scrollDiv.style.height = '50px';\n      scrollDiv.style.overflow = 'scroll';\n      document.body.appendChild(scrollDiv);\n      size = scrollDiv.offsetWidth - scrollDiv.clientWidth;\n      document.body.removeChild(scrollDiv);\n    }\n  }\n\n  return size;\n}","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nfunction componentWillMount() {\n  // Call this.constructor.gDSFP to support sub-classes.\n  var state = this.constructor.getDerivedStateFromProps(this.props, this.state);\n  if (state !== null && state !== undefined) {\n    this.setState(state);\n  }\n}\n\nfunction componentWillReceiveProps(nextProps) {\n  // Call this.constructor.gDSFP to support sub-classes.\n  // Use the setState() updater to ensure state isn't stale in certain edge cases.\n  function updater(prevState) {\n    var state = this.constructor.getDerivedStateFromProps(nextProps, prevState);\n    return state !== null && state !== undefined ? state : null;\n  }\n  // Binding \"this\" is important for shallow renderer support.\n  this.setState(updater.bind(this));\n}\n\nfunction componentWillUpdate(nextProps, nextState) {\n  try {\n    var prevProps = this.props;\n    var prevState = this.state;\n    this.props = nextProps;\n    this.state = nextState;\n    this.__reactInternalSnapshotFlag = true;\n    this.__reactInternalSnapshot = this.getSnapshotBeforeUpdate(\n      prevProps,\n      prevState\n    );\n  } finally {\n    this.props = prevProps;\n    this.state = prevState;\n  }\n}\n\n// React may warn about cWM/cWRP/cWU methods being deprecated.\n// Add a flag to suppress these warnings for this special case.\ncomponentWillMount.__suppressDeprecationWarning = true;\ncomponentWillReceiveProps.__suppressDeprecationWarning = true;\ncomponentWillUpdate.__suppressDeprecationWarning = true;\n\nfunction polyfill(Component) {\n  var prototype = Component.prototype;\n\n  if (!prototype || !prototype.isReactComponent) {\n    throw new Error('Can only polyfill class components');\n  }\n\n  if (\n    typeof Component.getDerivedStateFromProps !== 'function' &&\n    typeof prototype.getSnapshotBeforeUpdate !== 'function'\n  ) {\n    return Component;\n  }\n\n  // If new component APIs are defined, \"unsafe\" lifecycles won't be called.\n  // Error if any of these lifecycles are present,\n  // Because they would work differently between older and newer (16.3+) versions of React.\n  var foundWillMountName = null;\n  var foundWillReceivePropsName = null;\n  var foundWillUpdateName = null;\n  if (typeof prototype.componentWillMount === 'function') {\n    foundWillMountName = 'componentWillMount';\n  } else if (typeof prototype.UNSAFE_componentWillMount === 'function') {\n    foundWillMountName = 'UNSAFE_componentWillMount';\n  }\n  if (typeof prototype.componentWillReceiveProps === 'function') {\n    foundWillReceivePropsName = 'componentWillReceiveProps';\n  } else if (typeof prototype.UNSAFE_componentWillReceiveProps === 'function') {\n    foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';\n  }\n  if (typeof prototype.componentWillUpdate === 'function') {\n    foundWillUpdateName = 'componentWillUpdate';\n  } else if (typeof prototype.UNSAFE_componentWillUpdate === 'function') {\n    foundWillUpdateName = 'UNSAFE_componentWillUpdate';\n  }\n  if (\n    foundWillMountName !== null ||\n    foundWillReceivePropsName !== null ||\n    foundWillUpdateName !== null\n  ) {\n    var componentName = Component.displayName || Component.name;\n    var newApiName =\n      typeof Component.getDerivedStateFromProps === 'function'\n        ? 'getDerivedStateFromProps()'\n        : 'getSnapshotBeforeUpdate()';\n\n    throw Error(\n      'Unsafe legacy lifecycles will not be called for components using new component APIs.\\n\\n' +\n        componentName +\n        ' uses ' +\n        newApiName +\n        ' but also contains the following legacy lifecycles:' +\n        (foundWillMountName !== null ? '\\n  ' + foundWillMountName : '') +\n        (foundWillReceivePropsName !== null\n          ? '\\n  ' + foundWillReceivePropsName\n          : '') +\n        (foundWillUpdateName !== null ? '\\n  ' + foundWillUpdateName : '') +\n        '\\n\\nThe above lifecycles should be removed. Learn more about this warning here:\\n' +\n        'https://fb.me/react-async-component-lifecycle-hooks'\n    );\n  }\n\n  // React <= 16.2 does not support static getDerivedStateFromProps.\n  // As a workaround, use cWM and cWRP to invoke the new static lifecycle.\n  // Newer versions of React will ignore these lifecycles if gDSFP exists.\n  if (typeof Component.getDerivedStateFromProps === 'function') {\n    prototype.componentWillMount = componentWillMount;\n    prototype.componentWillReceiveProps = componentWillReceiveProps;\n  }\n\n  // React <= 16.2 does not support getSnapshotBeforeUpdate.\n  // As a workaround, use cWU to invoke the new lifecycle.\n  // Newer versions of React will ignore that lifecycle if gSBU exists.\n  if (typeof prototype.getSnapshotBeforeUpdate === 'function') {\n    if (typeof prototype.componentDidUpdate !== 'function') {\n      throw new Error(\n        'Cannot polyfill getSnapshotBeforeUpdate() for components that do not define componentDidUpdate() on the prototype'\n      );\n    }\n\n    prototype.componentWillUpdate = componentWillUpdate;\n\n    var componentDidUpdate = prototype.componentDidUpdate;\n\n    prototype.componentDidUpdate = function componentDidUpdatePolyfill(\n      prevProps,\n      prevState,\n      maybeSnapshot\n    ) {\n      // 16.3+ will not execute our will-update method;\n      // It will pass a snapshot value to did-update though.\n      // Older versions will require our polyfilled will-update value.\n      // We need to handle both cases, but can't just check for the presence of \"maybeSnapshot\",\n      // Because for <= 15.x versions this might be a \"prevContext\" object.\n      // We also can't just check \"__reactInternalSnapshot\",\n      // Because get-snapshot might return a falsy value.\n      // So check for the explicit __reactInternalSnapshotFlag flag to determine behavior.\n      var snapshot = this.__reactInternalSnapshotFlag\n        ? this.__reactInternalSnapshot\n        : maybeSnapshot;\n\n      componentDidUpdate.call(this, prevProps, prevState, snapshot);\n    };\n  }\n\n  return Component;\n}\n\nexport { polyfill };\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = exports.DEFAULT_SCROLLING_RESET_TIME_INTERVAL = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _clsx = _interopRequireDefault(require(\"clsx\"));\n\nvar _calculateSizeAndPositionDataAndUpdateScrollOffset = _interopRequireDefault(require(\"./utils/calculateSizeAndPositionDataAndUpdateScrollOffset\"));\n\nvar _ScalingCellSizeAndPositionManager = _interopRequireDefault(require(\"./utils/ScalingCellSizeAndPositionManager\"));\n\nvar _createCallbackMemoizer = _interopRequireDefault(require(\"../utils/createCallbackMemoizer\"));\n\nvar _defaultOverscanIndicesGetter = _interopRequireWildcard(require(\"./defaultOverscanIndicesGetter\"));\n\nvar _updateScrollIndexHelper = _interopRequireDefault(require(\"./utils/updateScrollIndexHelper\"));\n\nvar _defaultCellRangeRenderer = _interopRequireDefault(require(\"./defaultCellRangeRenderer\"));\n\nvar _scrollbarSize = _interopRequireDefault(require(\"dom-helpers/scrollbarSize\"));\n\nvar _reactLifecyclesCompat = require(\"react-lifecycles-compat\");\n\nvar _requestAnimationTimeout = require(\"../utils/requestAnimationTimeout\");\n\nvar _types = require(\"./types\");\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _class, _temp;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2[\"default\"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/**\n * Specifies the number of milliseconds during which to disable pointer events while a scroll is in progress.\n * This improves performance and makes scrolling smoother.\n */\nvar DEFAULT_SCROLLING_RESET_TIME_INTERVAL = 150;\n/**\n * Controls whether the Grid updates the DOM element's scrollLeft/scrollTop based on the current state or just observes it.\n * This prevents Grid from interrupting mouse-wheel animations (see issue #2).\n */\n\nexports.DEFAULT_SCROLLING_RESET_TIME_INTERVAL = DEFAULT_SCROLLING_RESET_TIME_INTERVAL;\nvar SCROLL_POSITION_CHANGE_REASONS = {\n  OBSERVED: 'observed',\n  REQUESTED: 'requested'\n};\n\nvar renderNull = function renderNull() {\n  return null;\n};\n\n/**\n * Renders tabular data with virtualization along the vertical and horizontal axes.\n * Row heights and column widths must be known ahead of time and specified as properties.\n */\nvar Grid = (_temp = _class =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  (0, _inherits2[\"default\"])(Grid, _React$PureComponent);\n\n  // Invokes onSectionRendered callback only when start/stop row or column indices change\n  function Grid(props) {\n    var _this;\n\n    (0, _classCallCheck2[\"default\"])(this, Grid);\n    _this = (0, _possibleConstructorReturn2[\"default\"])(this, (0, _getPrototypeOf2[\"default\"])(Grid).call(this, props));\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"_onGridRenderedMemoizer\", (0, _createCallbackMemoizer[\"default\"])());\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"_onScrollMemoizer\", (0, _createCallbackMemoizer[\"default\"])(false));\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"_deferredInvalidateColumnIndex\", null);\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"_deferredInvalidateRowIndex\", null);\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"_recomputeScrollLeftFlag\", false);\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"_recomputeScrollTopFlag\", false);\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"_horizontalScrollBarSize\", 0);\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"_verticalScrollBarSize\", 0);\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"_scrollbarPresenceChanged\", false);\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"_scrollingContainer\", void 0);\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"_childrenToDisplay\", void 0);\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"_columnStartIndex\", void 0);\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"_columnStopIndex\", void 0);\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"_rowStartIndex\", void 0);\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"_rowStopIndex\", void 0);\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"_renderedColumnStartIndex\", 0);\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"_renderedColumnStopIndex\", 0);\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"_renderedRowStartIndex\", 0);\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"_renderedRowStopIndex\", 0);\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"_initialScrollTop\", void 0);\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"_initialScrollLeft\", void 0);\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"_disablePointerEventsTimeoutId\", void 0);\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"_styleCache\", {});\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"_cellCache\", {});\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"_debounceScrollEndedCallback\", function () {\n      _this._disablePointerEventsTimeoutId = null; // isScrolling is used to determine if we reset styleCache\n\n      _this.setState({\n        isScrolling: false,\n        needToResetStyleCache: false\n      });\n    });\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"_invokeOnGridRenderedHelper\", function () {\n      var onSectionRendered = _this.props.onSectionRendered;\n\n      _this._onGridRenderedMemoizer({\n        callback: onSectionRendered,\n        indices: {\n          columnOverscanStartIndex: _this._columnStartIndex,\n          columnOverscanStopIndex: _this._columnStopIndex,\n          columnStartIndex: _this._renderedColumnStartIndex,\n          columnStopIndex: _this._renderedColumnStopIndex,\n          rowOverscanStartIndex: _this._rowStartIndex,\n          rowOverscanStopIndex: _this._rowStopIndex,\n          rowStartIndex: _this._renderedRowStartIndex,\n          rowStopIndex: _this._renderedRowStopIndex\n        }\n      });\n    });\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"_setScrollingContainerRef\", function (ref) {\n      _this._scrollingContainer = ref;\n    });\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"_onScroll\", function (event) {\n      // In certain edge-cases React dispatches an onScroll event with an invalid target.scrollLeft / target.scrollTop.\n      // This invalid event can be detected by comparing event.target to this component's scrollable DOM element.\n      // See issue #404 for more information.\n      if (event.target === _this._scrollingContainer) {\n        _this.handleScrollEvent(event.target);\n      }\n    });\n    var columnSizeAndPositionManager = new _ScalingCellSizeAndPositionManager[\"default\"]({\n      cellCount: props.columnCount,\n      cellSizeGetter: function cellSizeGetter(params) {\n        return Grid._wrapSizeGetter(props.columnWidth)(params);\n      },\n      estimatedCellSize: Grid._getEstimatedColumnSize(props)\n    });\n    var rowSizeAndPositionManager = new _ScalingCellSizeAndPositionManager[\"default\"]({\n      cellCount: props.rowCount,\n      cellSizeGetter: function cellSizeGetter(params) {\n        return Grid._wrapSizeGetter(props.rowHeight)(params);\n      },\n      estimatedCellSize: Grid._getEstimatedRowSize(props)\n    });\n    _this.state = {\n      instanceProps: {\n        columnSizeAndPositionManager: columnSizeAndPositionManager,\n        rowSizeAndPositionManager: rowSizeAndPositionManager,\n        prevColumnWidth: props.columnWidth,\n        prevRowHeight: props.rowHeight,\n        prevColumnCount: props.columnCount,\n        prevRowCount: props.rowCount,\n        prevIsScrolling: props.isScrolling === true,\n        prevScrollToColumn: props.scrollToColumn,\n        prevScrollToRow: props.scrollToRow,\n        scrollbarSize: 0,\n        scrollbarSizeMeasured: false\n      },\n      isScrolling: false,\n      scrollDirectionHorizontal: _defaultOverscanIndicesGetter.SCROLL_DIRECTION_FORWARD,\n      scrollDirectionVertical: _defaultOverscanIndicesGetter.SCROLL_DIRECTION_FORWARD,\n      scrollLeft: 0,\n      scrollTop: 0,\n      scrollPositionChangeReason: null,\n      needToResetStyleCache: false\n    };\n\n    if (props.scrollToRow > 0) {\n      _this._initialScrollTop = _this._getCalculatedScrollTop(props, _this.state);\n    }\n\n    if (props.scrollToColumn > 0) {\n      _this._initialScrollLeft = _this._getCalculatedScrollLeft(props, _this.state);\n    }\n\n    return _this;\n  }\n  /**\n   * Gets offsets for a given cell and alignment.\n   */\n\n\n  (0, _createClass2[\"default\"])(Grid, [{\n    key: \"getOffsetForCell\",\n    value: function getOffsetForCell() {\n      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          _ref$alignment = _ref.alignment,\n          alignment = _ref$alignment === void 0 ? this.props.scrollToAlignment : _ref$alignment,\n          _ref$columnIndex = _ref.columnIndex,\n          columnIndex = _ref$columnIndex === void 0 ? this.props.scrollToColumn : _ref$columnIndex,\n          _ref$rowIndex = _ref.rowIndex,\n          rowIndex = _ref$rowIndex === void 0 ? this.props.scrollToRow : _ref$rowIndex;\n\n      var offsetProps = _objectSpread({}, this.props, {\n        scrollToAlignment: alignment,\n        scrollToColumn: columnIndex,\n        scrollToRow: rowIndex\n      });\n\n      return {\n        scrollLeft: this._getCalculatedScrollLeft(offsetProps),\n        scrollTop: this._getCalculatedScrollTop(offsetProps)\n      };\n    }\n    /**\n     * Gets estimated total rows' height.\n     */\n\n  }, {\n    key: \"getTotalRowsHeight\",\n    value: function getTotalRowsHeight() {\n      return this.state.instanceProps.rowSizeAndPositionManager.getTotalSize();\n    }\n    /**\n     * Gets estimated total columns' width.\n     */\n\n  }, {\n    key: \"getTotalColumnsWidth\",\n    value: function getTotalColumnsWidth() {\n      return this.state.instanceProps.columnSizeAndPositionManager.getTotalSize();\n    }\n    /**\n     * This method handles a scroll event originating from an external scroll control.\n     * It's an advanced method and should probably not be used unless you're implementing a custom scroll-bar solution.\n     */\n\n  }, {\n    key: \"handleScrollEvent\",\n    value: function handleScrollEvent(_ref2) {\n      var _ref2$scrollLeft = _ref2.scrollLeft,\n          scrollLeftParam = _ref2$scrollLeft === void 0 ? 0 : _ref2$scrollLeft,\n          _ref2$scrollTop = _ref2.scrollTop,\n          scrollTopParam = _ref2$scrollTop === void 0 ? 0 : _ref2$scrollTop;\n\n      // On iOS, we can arrive at negative offsets by swiping past the start.\n      // To prevent flicker here, we make playing in the negative offset zone cause nothing to happen.\n      if (scrollTopParam < 0) {\n        return;\n      } // Prevent pointer events from interrupting a smooth scroll\n\n\n      this._debounceScrollEnded();\n\n      var _this$props = this.props,\n          autoHeight = _this$props.autoHeight,\n          autoWidth = _this$props.autoWidth,\n          height = _this$props.height,\n          width = _this$props.width;\n      var instanceProps = this.state.instanceProps; // When this component is shrunk drastically, React dispatches a series of back-to-back scroll events,\n      // Gradually converging on a scrollTop that is within the bounds of the new, smaller height.\n      // This causes a series of rapid renders that is slow for long lists.\n      // We can avoid that by doing some simple bounds checking to ensure that scroll offsets never exceed their bounds.\n\n      var scrollbarSize = instanceProps.scrollbarSize;\n      var totalRowsHeight = instanceProps.rowSizeAndPositionManager.getTotalSize();\n      var totalColumnsWidth = instanceProps.columnSizeAndPositionManager.getTotalSize();\n      var scrollLeft = Math.min(Math.max(0, totalColumnsWidth - width + scrollbarSize), scrollLeftParam);\n      var scrollTop = Math.min(Math.max(0, totalRowsHeight - height + scrollbarSize), scrollTopParam); // Certain devices (like Apple touchpad) rapid-fire duplicate events.\n      // Don't force a re-render if this is the case.\n      // The mouse may move faster then the animation frame does.\n      // Use requestAnimationFrame to avoid over-updating.\n\n      if (this.state.scrollLeft !== scrollLeft || this.state.scrollTop !== scrollTop) {\n        // Track scrolling direction so we can more efficiently overscan rows to reduce empty space around the edges while scrolling.\n        // Don't change direction for an axis unless scroll offset has changed.\n        var scrollDirectionHorizontal = scrollLeft !== this.state.scrollLeft ? scrollLeft > this.state.scrollLeft ? _defaultOverscanIndicesGetter.SCROLL_DIRECTION_FORWARD : _defaultOverscanIndicesGetter.SCROLL_DIRECTION_BACKWARD : this.state.scrollDirectionHorizontal;\n        var scrollDirectionVertical = scrollTop !== this.state.scrollTop ? scrollTop > this.state.scrollTop ? _defaultOverscanIndicesGetter.SCROLL_DIRECTION_FORWARD : _defaultOverscanIndicesGetter.SCROLL_DIRECTION_BACKWARD : this.state.scrollDirectionVertical;\n        var newState = {\n          isScrolling: true,\n          scrollDirectionHorizontal: scrollDirectionHorizontal,\n          scrollDirectionVertical: scrollDirectionVertical,\n          scrollPositionChangeReason: SCROLL_POSITION_CHANGE_REASONS.OBSERVED\n        };\n\n        if (!autoHeight) {\n          newState.scrollTop = scrollTop;\n        }\n\n        if (!autoWidth) {\n          newState.scrollLeft = scrollLeft;\n        }\n\n        newState.needToResetStyleCache = false;\n        this.setState(newState);\n      }\n\n      this._invokeOnScrollMemoizer({\n        scrollLeft: scrollLeft,\n        scrollTop: scrollTop,\n        totalColumnsWidth: totalColumnsWidth,\n        totalRowsHeight: totalRowsHeight\n      });\n    }\n    /**\n     * Invalidate Grid size and recompute visible cells.\n     * This is a deferred wrapper for recomputeGridSize().\n     * It sets a flag to be evaluated on cDM/cDU to avoid unnecessary renders.\n     * This method is intended for advanced use-cases like CellMeasurer.\n     */\n    // @TODO (bvaughn) Add automated test coverage for this.\n\n  }, {\n    key: \"invalidateCellSizeAfterRender\",\n    value: function invalidateCellSizeAfterRender(_ref3) {\n      var columnIndex = _ref3.columnIndex,\n          rowIndex = _ref3.rowIndex;\n      this._deferredInvalidateColumnIndex = typeof this._deferredInvalidateColumnIndex === 'number' ? Math.min(this._deferredInvalidateColumnIndex, columnIndex) : columnIndex;\n      this._deferredInvalidateRowIndex = typeof this._deferredInvalidateRowIndex === 'number' ? Math.min(this._deferredInvalidateRowIndex, rowIndex) : rowIndex;\n    }\n    /**\n     * Pre-measure all columns and rows in a Grid.\n     * Typically cells are only measured as needed and estimated sizes are used for cells that have not yet been measured.\n     * This method ensures that the next call to getTotalSize() returns an exact size (as opposed to just an estimated one).\n     */\n\n  }, {\n    key: \"measureAllCells\",\n    value: function measureAllCells() {\n      var _this$props2 = this.props,\n          columnCount = _this$props2.columnCount,\n          rowCount = _this$props2.rowCount;\n      var instanceProps = this.state.instanceProps;\n      instanceProps.columnSizeAndPositionManager.getSizeAndPositionOfCell(columnCount - 1);\n      instanceProps.rowSizeAndPositionManager.getSizeAndPositionOfCell(rowCount - 1);\n    }\n    /**\n     * Forced recompute of row heights and column widths.\n     * This function should be called if dynamic column or row sizes have changed but nothing else has.\n     * Since Grid only receives :columnCount and :rowCount it has no way of detecting when the underlying data changes.\n     */\n\n  }, {\n    key: \"recomputeGridSize\",\n    value: function recomputeGridSize() {\n      var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          _ref4$columnIndex = _ref4.columnIndex,\n          columnIndex = _ref4$columnIndex === void 0 ? 0 : _ref4$columnIndex,\n          _ref4$rowIndex = _ref4.rowIndex,\n          rowIndex = _ref4$rowIndex === void 0 ? 0 : _ref4$rowIndex;\n\n      var _this$props3 = this.props,\n          scrollToColumn = _this$props3.scrollToColumn,\n          scrollToRow = _this$props3.scrollToRow;\n      var instanceProps = this.state.instanceProps;\n      instanceProps.columnSizeAndPositionManager.resetCell(columnIndex);\n      instanceProps.rowSizeAndPositionManager.resetCell(rowIndex); // Cell sizes may be determined by a function property.\n      // In this case the cDU handler can't know if they changed.\n      // Store this flag to let the next cDU pass know it needs to recompute the scroll offset.\n\n      this._recomputeScrollLeftFlag = scrollToColumn >= 0 && (this.state.scrollDirectionHorizontal === _defaultOverscanIndicesGetter.SCROLL_DIRECTION_FORWARD ? columnIndex <= scrollToColumn : columnIndex >= scrollToColumn);\n      this._recomputeScrollTopFlag = scrollToRow >= 0 && (this.state.scrollDirectionVertical === _defaultOverscanIndicesGetter.SCROLL_DIRECTION_FORWARD ? rowIndex <= scrollToRow : rowIndex >= scrollToRow); // Clear cell cache in case we are scrolling;\n      // Invalid row heights likely mean invalid cached content as well.\n\n      this._styleCache = {};\n      this._cellCache = {};\n      this.forceUpdate();\n    }\n    /**\n     * Ensure column and row are visible.\n     */\n\n  }, {\n    key: \"scrollToCell\",\n    value: function scrollToCell(_ref5) {\n      var columnIndex = _ref5.columnIndex,\n          rowIndex = _ref5.rowIndex;\n      var columnCount = this.props.columnCount;\n      var props = this.props; // Don't adjust scroll offset for single-column grids (eg List, Table).\n      // This can cause a funky scroll offset because of the vertical scrollbar width.\n\n      if (columnCount > 1 && columnIndex !== undefined) {\n        this._updateScrollLeftForScrollToColumn(_objectSpread({}, props, {\n          scrollToColumn: columnIndex\n        }));\n      }\n\n      if (rowIndex !== undefined) {\n        this._updateScrollTopForScrollToRow(_objectSpread({}, props, {\n          scrollToRow: rowIndex\n        }));\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this$props4 = this.props,\n          getScrollbarSize = _this$props4.getScrollbarSize,\n          height = _this$props4.height,\n          scrollLeft = _this$props4.scrollLeft,\n          scrollToColumn = _this$props4.scrollToColumn,\n          scrollTop = _this$props4.scrollTop,\n          scrollToRow = _this$props4.scrollToRow,\n          width = _this$props4.width;\n      var instanceProps = this.state.instanceProps; // Reset initial offsets to be ignored in browser\n\n      this._initialScrollTop = 0;\n      this._initialScrollLeft = 0; // If cell sizes have been invalidated (eg we are using CellMeasurer) then reset cached positions.\n      // We must do this at the start of the method as we may calculate and update scroll position below.\n\n      this._handleInvalidatedGridSize(); // If this component was first rendered server-side, scrollbar size will be undefined.\n      // In that event we need to remeasure.\n\n\n      if (!instanceProps.scrollbarSizeMeasured) {\n        this.setState(function (prevState) {\n          var stateUpdate = _objectSpread({}, prevState, {\n            needToResetStyleCache: false\n          });\n\n          stateUpdate.instanceProps.scrollbarSize = getScrollbarSize();\n          stateUpdate.instanceProps.scrollbarSizeMeasured = true;\n          return stateUpdate;\n        });\n      }\n\n      if (typeof scrollLeft === 'number' && scrollLeft >= 0 || typeof scrollTop === 'number' && scrollTop >= 0) {\n        var stateUpdate = Grid._getScrollToPositionStateUpdate({\n          prevState: this.state,\n          scrollLeft: scrollLeft,\n          scrollTop: scrollTop\n        });\n\n        if (stateUpdate) {\n          stateUpdate.needToResetStyleCache = false;\n          this.setState(stateUpdate);\n        }\n      } // refs don't work in `react-test-renderer`\n\n\n      if (this._scrollingContainer) {\n        // setting the ref's scrollLeft and scrollTop.\n        // Somehow in MultiGrid the main grid doesn't trigger a update on mount.\n        if (this._scrollingContainer.scrollLeft !== this.state.scrollLeft) {\n          this._scrollingContainer.scrollLeft = this.state.scrollLeft;\n        }\n\n        if (this._scrollingContainer.scrollTop !== this.state.scrollTop) {\n          this._scrollingContainer.scrollTop = this.state.scrollTop;\n        }\n      } // Don't update scroll offset if the size is 0; we don't render any cells in this case.\n      // Setting a state may cause us to later thing we've updated the offce when we haven't.\n\n\n      var sizeIsBiggerThanZero = height > 0 && width > 0;\n\n      if (scrollToColumn >= 0 && sizeIsBiggerThanZero) {\n        this._updateScrollLeftForScrollToColumn();\n      }\n\n      if (scrollToRow >= 0 && sizeIsBiggerThanZero) {\n        this._updateScrollTopForScrollToRow();\n      } // Update onRowsRendered callback\n\n\n      this._invokeOnGridRenderedHelper(); // Initialize onScroll callback\n\n\n      this._invokeOnScrollMemoizer({\n        scrollLeft: scrollLeft || 0,\n        scrollTop: scrollTop || 0,\n        totalColumnsWidth: instanceProps.columnSizeAndPositionManager.getTotalSize(),\n        totalRowsHeight: instanceProps.rowSizeAndPositionManager.getTotalSize()\n      });\n\n      this._maybeCallOnScrollbarPresenceChange();\n    }\n    /**\n     * @private\n     * This method updates scrollLeft/scrollTop in state for the following conditions:\n     * 1) New scroll-to-cell props have been set\n     */\n\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      var _this2 = this;\n\n      var _this$props5 = this.props,\n          autoHeight = _this$props5.autoHeight,\n          autoWidth = _this$props5.autoWidth,\n          columnCount = _this$props5.columnCount,\n          height = _this$props5.height,\n          rowCount = _this$props5.rowCount,\n          scrollToAlignment = _this$props5.scrollToAlignment,\n          scrollToColumn = _this$props5.scrollToColumn,\n          scrollToRow = _this$props5.scrollToRow,\n          width = _this$props5.width;\n      var _this$state = this.state,\n          scrollLeft = _this$state.scrollLeft,\n          scrollPositionChangeReason = _this$state.scrollPositionChangeReason,\n          scrollTop = _this$state.scrollTop,\n          instanceProps = _this$state.instanceProps; // If cell sizes have been invalidated (eg we are using CellMeasurer) then reset cached positions.\n      // We must do this at the start of the method as we may calculate and update scroll position below.\n\n      this._handleInvalidatedGridSize(); // Handle edge case where column or row count has only just increased over 0.\n      // In this case we may have to restore a previously-specified scroll offset.\n      // For more info see bvaughn/react-virtualized/issues/218\n\n\n      var columnOrRowCountJustIncreasedFromZero = columnCount > 0 && prevProps.columnCount === 0 || rowCount > 0 && prevProps.rowCount === 0; // Make sure requested changes to :scrollLeft or :scrollTop get applied.\n      // Assigning to scrollLeft/scrollTop tells the browser to interrupt any running scroll animations,\n      // And to discard any pending async changes to the scroll position that may have happened in the meantime (e.g. on a separate scrolling thread).\n      // So we only set these when we require an adjustment of the scroll position.\n      // See issue #2 for more information.\n\n      if (scrollPositionChangeReason === SCROLL_POSITION_CHANGE_REASONS.REQUESTED) {\n        // @TRICKY :autoHeight and :autoWidth properties instructs Grid to leave :scrollTop and :scrollLeft management to an external HOC (eg WindowScroller).\n        // In this case we should avoid checking scrollingContainer.scrollTop and scrollingContainer.scrollLeft since it forces layout/flow.\n        if (!autoWidth && scrollLeft >= 0 && (scrollLeft !== this._scrollingContainer.scrollLeft || columnOrRowCountJustIncreasedFromZero)) {\n          this._scrollingContainer.scrollLeft = scrollLeft;\n        }\n\n        if (!autoHeight && scrollTop >= 0 && (scrollTop !== this._scrollingContainer.scrollTop || columnOrRowCountJustIncreasedFromZero)) {\n          this._scrollingContainer.scrollTop = scrollTop;\n        }\n      } // Special case where the previous size was 0:\n      // In this case we don't show any windowed cells at all.\n      // So we should always recalculate offset afterwards.\n\n\n      var sizeJustIncreasedFromZero = (prevProps.width === 0 || prevProps.height === 0) && height > 0 && width > 0; // Update scroll offsets if the current :scrollToColumn or :scrollToRow values requires it\n      // @TODO Do we also need this check or can the one in componentWillUpdate() suffice?\n\n      if (this._recomputeScrollLeftFlag) {\n        this._recomputeScrollLeftFlag = false;\n\n        this._updateScrollLeftForScrollToColumn(this.props);\n      } else {\n        (0, _updateScrollIndexHelper[\"default\"])({\n          cellSizeAndPositionManager: instanceProps.columnSizeAndPositionManager,\n          previousCellsCount: prevProps.columnCount,\n          previousCellSize: prevProps.columnWidth,\n          previousScrollToAlignment: prevProps.scrollToAlignment,\n          previousScrollToIndex: prevProps.scrollToColumn,\n          previousSize: prevProps.width,\n          scrollOffset: scrollLeft,\n          scrollToAlignment: scrollToAlignment,\n          scrollToIndex: scrollToColumn,\n          size: width,\n          sizeJustIncreasedFromZero: sizeJustIncreasedFromZero,\n          updateScrollIndexCallback: function updateScrollIndexCallback() {\n            return _this2._updateScrollLeftForScrollToColumn(_this2.props);\n          }\n        });\n      }\n\n      if (this._recomputeScrollTopFlag) {\n        this._recomputeScrollTopFlag = false;\n\n        this._updateScrollTopForScrollToRow(this.props);\n      } else {\n        (0, _updateScrollIndexHelper[\"default\"])({\n          cellSizeAndPositionManager: instanceProps.rowSizeAndPositionManager,\n          previousCellsCount: prevProps.rowCount,\n          previousCellSize: prevProps.rowHeight,\n          previousScrollToAlignment: prevProps.scrollToAlignment,\n          previousScrollToIndex: prevProps.scrollToRow,\n          previousSize: prevProps.height,\n          scrollOffset: scrollTop,\n          scrollToAlignment: scrollToAlignment,\n          scrollToIndex: scrollToRow,\n          size: height,\n          sizeJustIncreasedFromZero: sizeJustIncreasedFromZero,\n          updateScrollIndexCallback: function updateScrollIndexCallback() {\n            return _this2._updateScrollTopForScrollToRow(_this2.props);\n          }\n        });\n      } // Update onRowsRendered callback if start/stop indices have changed\n\n\n      this._invokeOnGridRenderedHelper(); // Changes to :scrollLeft or :scrollTop should also notify :onScroll listeners\n\n\n      if (scrollLeft !== prevState.scrollLeft || scrollTop !== prevState.scrollTop) {\n        var totalRowsHeight = instanceProps.rowSizeAndPositionManager.getTotalSize();\n        var totalColumnsWidth = instanceProps.columnSizeAndPositionManager.getTotalSize();\n\n        this._invokeOnScrollMemoizer({\n          scrollLeft: scrollLeft,\n          scrollTop: scrollTop,\n          totalColumnsWidth: totalColumnsWidth,\n          totalRowsHeight: totalRowsHeight\n        });\n      }\n\n      this._maybeCallOnScrollbarPresenceChange();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this._disablePointerEventsTimeoutId) {\n        (0, _requestAnimationTimeout.cancelAnimationTimeout)(this._disablePointerEventsTimeoutId);\n      }\n    }\n    /**\n     * This method updates scrollLeft/scrollTop in state for the following conditions:\n     * 1) Empty content (0 rows or columns)\n     * 2) New scroll props overriding the current state\n     * 3) Cells-count or cells-size has changed, making previous scroll offsets invalid\n     */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props6 = this.props,\n          autoContainerWidth = _this$props6.autoContainerWidth,\n          autoHeight = _this$props6.autoHeight,\n          autoWidth = _this$props6.autoWidth,\n          className = _this$props6.className,\n          containerProps = _this$props6.containerProps,\n          containerRole = _this$props6.containerRole,\n          containerStyle = _this$props6.containerStyle,\n          height = _this$props6.height,\n          id = _this$props6.id,\n          noContentRenderer = _this$props6.noContentRenderer,\n          role = _this$props6.role,\n          style = _this$props6.style,\n          tabIndex = _this$props6.tabIndex,\n          width = _this$props6.width;\n      var _this$state2 = this.state,\n          instanceProps = _this$state2.instanceProps,\n          needToResetStyleCache = _this$state2.needToResetStyleCache;\n\n      var isScrolling = this._isScrolling();\n\n      var gridStyle = {\n        boxSizing: 'border-box',\n        direction: 'ltr',\n        height: autoHeight ? 'auto' : height,\n        position: 'relative',\n        width: autoWidth ? 'auto' : width,\n        WebkitOverflowScrolling: 'touch',\n        willChange: 'transform'\n      };\n\n      if (needToResetStyleCache) {\n        this._styleCache = {};\n      } // calculate _styleCache here\n      // if state.isScrolling (not from _isScrolling) then reset\n\n\n      if (!this.state.isScrolling) {\n        this._resetStyleCache();\n      } // calculate children to render here\n\n\n      this._calculateChildrenToRender(this.props, this.state);\n\n      var totalColumnsWidth = instanceProps.columnSizeAndPositionManager.getTotalSize();\n      var totalRowsHeight = instanceProps.rowSizeAndPositionManager.getTotalSize(); // Force browser to hide scrollbars when we know they aren't necessary.\n      // Otherwise once scrollbars appear they may not disappear again.\n      // For more info see issue #116\n\n      var verticalScrollBarSize = totalRowsHeight > height ? instanceProps.scrollbarSize : 0;\n      var horizontalScrollBarSize = totalColumnsWidth > width ? instanceProps.scrollbarSize : 0;\n\n      if (horizontalScrollBarSize !== this._horizontalScrollBarSize || verticalScrollBarSize !== this._verticalScrollBarSize) {\n        this._horizontalScrollBarSize = horizontalScrollBarSize;\n        this._verticalScrollBarSize = verticalScrollBarSize;\n        this._scrollbarPresenceChanged = true;\n      } // Also explicitly init styles to 'auto' if scrollbars are required.\n      // This works around an obscure edge case where external CSS styles have not yet been loaded,\n      // But an initial scroll index of offset is set as an external prop.\n      // Without this style, Grid would render the correct range of cells but would NOT update its internal offset.\n      // This was originally reported via clauderic/react-infinite-calendar/issues/23\n\n\n      gridStyle.overflowX = totalColumnsWidth + verticalScrollBarSize <= width ? 'hidden' : 'auto';\n      gridStyle.overflowY = totalRowsHeight + horizontalScrollBarSize <= height ? 'hidden' : 'auto';\n      var childrenToDisplay = this._childrenToDisplay;\n      var showNoContentRenderer = childrenToDisplay.length === 0 && height > 0 && width > 0;\n      return React.createElement(\"div\", (0, _extends2[\"default\"])({\n        ref: this._setScrollingContainerRef\n      }, containerProps, {\n        \"aria-label\": this.props['aria-label'],\n        \"aria-readonly\": this.props['aria-readonly'],\n        className: (0, _clsx[\"default\"])('ReactVirtualized__Grid', className),\n        id: id,\n        onScroll: this._onScroll,\n        role: role,\n        style: _objectSpread({}, gridStyle, {}, style),\n        tabIndex: tabIndex\n      }), childrenToDisplay.length > 0 && React.createElement(\"div\", {\n        className: \"ReactVirtualized__Grid__innerScrollContainer\",\n        role: containerRole,\n        style: _objectSpread({\n          width: autoContainerWidth ? 'auto' : totalColumnsWidth,\n          height: totalRowsHeight,\n          maxWidth: totalColumnsWidth,\n          maxHeight: totalRowsHeight,\n          overflow: 'hidden',\n          pointerEvents: isScrolling ? 'none' : '',\n          position: 'relative'\n        }, containerStyle)\n      }, childrenToDisplay), showNoContentRenderer && noContentRenderer());\n    }\n    /* ---------------------------- Helper methods ---------------------------- */\n\n  }, {\n    key: \"_calculateChildrenToRender\",\n    value: function _calculateChildrenToRender() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;\n      var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state;\n      var cellRenderer = props.cellRenderer,\n          cellRangeRenderer = props.cellRangeRenderer,\n          columnCount = props.columnCount,\n          deferredMeasurementCache = props.deferredMeasurementCache,\n          height = props.height,\n          overscanColumnCount = props.overscanColumnCount,\n          overscanIndicesGetter = props.overscanIndicesGetter,\n          overscanRowCount = props.overscanRowCount,\n          rowCount = props.rowCount,\n          width = props.width,\n          isScrollingOptOut = props.isScrollingOptOut;\n      var scrollDirectionHorizontal = state.scrollDirectionHorizontal,\n          scrollDirectionVertical = state.scrollDirectionVertical,\n          instanceProps = state.instanceProps;\n      var scrollTop = this._initialScrollTop > 0 ? this._initialScrollTop : state.scrollTop;\n      var scrollLeft = this._initialScrollLeft > 0 ? this._initialScrollLeft : state.scrollLeft;\n\n      var isScrolling = this._isScrolling(props, state);\n\n      this._childrenToDisplay = []; // Render only enough columns and rows to cover the visible area of the grid.\n\n      if (height > 0 && width > 0) {\n        var visibleColumnIndices = instanceProps.columnSizeAndPositionManager.getVisibleCellRange({\n          containerSize: width,\n          offset: scrollLeft\n        });\n        var visibleRowIndices = instanceProps.rowSizeAndPositionManager.getVisibleCellRange({\n          containerSize: height,\n          offset: scrollTop\n        });\n        var horizontalOffsetAdjustment = instanceProps.columnSizeAndPositionManager.getOffsetAdjustment({\n          containerSize: width,\n          offset: scrollLeft\n        });\n        var verticalOffsetAdjustment = instanceProps.rowSizeAndPositionManager.getOffsetAdjustment({\n          containerSize: height,\n          offset: scrollTop\n        }); // Store for _invokeOnGridRenderedHelper()\n\n        this._renderedColumnStartIndex = visibleColumnIndices.start;\n        this._renderedColumnStopIndex = visibleColumnIndices.stop;\n        this._renderedRowStartIndex = visibleRowIndices.start;\n        this._renderedRowStopIndex = visibleRowIndices.stop;\n        var overscanColumnIndices = overscanIndicesGetter({\n          direction: 'horizontal',\n          cellCount: columnCount,\n          overscanCellsCount: overscanColumnCount,\n          scrollDirection: scrollDirectionHorizontal,\n          startIndex: typeof visibleColumnIndices.start === 'number' ? visibleColumnIndices.start : 0,\n          stopIndex: typeof visibleColumnIndices.stop === 'number' ? visibleColumnIndices.stop : -1\n        });\n        var overscanRowIndices = overscanIndicesGetter({\n          direction: 'vertical',\n          cellCount: rowCount,\n          overscanCellsCount: overscanRowCount,\n          scrollDirection: scrollDirectionVertical,\n          startIndex: typeof visibleRowIndices.start === 'number' ? visibleRowIndices.start : 0,\n          stopIndex: typeof visibleRowIndices.stop === 'number' ? visibleRowIndices.stop : -1\n        }); // Store for _invokeOnGridRenderedHelper()\n\n        var columnStartIndex = overscanColumnIndices.overscanStartIndex;\n        var columnStopIndex = overscanColumnIndices.overscanStopIndex;\n        var rowStartIndex = overscanRowIndices.overscanStartIndex;\n        var rowStopIndex = overscanRowIndices.overscanStopIndex; // Advanced use-cases (eg CellMeasurer) require batched measurements to determine accurate sizes.\n\n        if (deferredMeasurementCache) {\n          // If rows have a dynamic height, scan the rows we are about to render.\n          // If any have not yet been measured, then we need to render all columns initially,\n          // Because the height of the row is equal to the tallest cell within that row,\n          // (And so we can't know the height without measuring all column-cells first).\n          if (!deferredMeasurementCache.hasFixedHeight()) {\n            for (var rowIndex = rowStartIndex; rowIndex <= rowStopIndex; rowIndex++) {\n              if (!deferredMeasurementCache.has(rowIndex, 0)) {\n                columnStartIndex = 0;\n                columnStopIndex = columnCount - 1;\n                break;\n              }\n            }\n          } // If columns have a dynamic width, scan the columns we are about to render.\n          // If any have not yet been measured, then we need to render all rows initially,\n          // Because the width of the column is equal to the widest cell within that column,\n          // (And so we can't know the width without measuring all row-cells first).\n\n\n          if (!deferredMeasurementCache.hasFixedWidth()) {\n            for (var columnIndex = columnStartIndex; columnIndex <= columnStopIndex; columnIndex++) {\n              if (!deferredMeasurementCache.has(0, columnIndex)) {\n                rowStartIndex = 0;\n                rowStopIndex = rowCount - 1;\n                break;\n              }\n            }\n          }\n        }\n\n        this._childrenToDisplay = cellRangeRenderer({\n          cellCache: this._cellCache,\n          cellRenderer: cellRenderer,\n          columnSizeAndPositionManager: instanceProps.columnSizeAndPositionManager,\n          columnStartIndex: columnStartIndex,\n          columnStopIndex: columnStopIndex,\n          deferredMeasurementCache: deferredMeasurementCache,\n          horizontalOffsetAdjustment: horizontalOffsetAdjustment,\n          isScrolling: isScrolling,\n          isScrollingOptOut: isScrollingOptOut,\n          parent: this,\n          rowSizeAndPositionManager: instanceProps.rowSizeAndPositionManager,\n          rowStartIndex: rowStartIndex,\n          rowStopIndex: rowStopIndex,\n          scrollLeft: scrollLeft,\n          scrollTop: scrollTop,\n          styleCache: this._styleCache,\n          verticalOffsetAdjustment: verticalOffsetAdjustment,\n          visibleColumnIndices: visibleColumnIndices,\n          visibleRowIndices: visibleRowIndices\n        }); // update the indices\n\n        this._columnStartIndex = columnStartIndex;\n        this._columnStopIndex = columnStopIndex;\n        this._rowStartIndex = rowStartIndex;\n        this._rowStopIndex = rowStopIndex;\n      }\n    }\n    /**\n     * Sets an :isScrolling flag for a small window of time.\n     * This flag is used to disable pointer events on the scrollable portion of the Grid.\n     * This prevents jerky/stuttery mouse-wheel scrolling.\n     */\n\n  }, {\n    key: \"_debounceScrollEnded\",\n    value: function _debounceScrollEnded() {\n      var scrollingResetTimeInterval = this.props.scrollingResetTimeInterval;\n\n      if (this._disablePointerEventsTimeoutId) {\n        (0, _requestAnimationTimeout.cancelAnimationTimeout)(this._disablePointerEventsTimeoutId);\n      }\n\n      this._disablePointerEventsTimeoutId = (0, _requestAnimationTimeout.requestAnimationTimeout)(this._debounceScrollEndedCallback, scrollingResetTimeInterval);\n    }\n  }, {\n    key: \"_handleInvalidatedGridSize\",\n\n    /**\n     * Check for batched CellMeasurer size invalidations.\n     * This will occur the first time one or more previously unmeasured cells are rendered.\n     */\n    value: function _handleInvalidatedGridSize() {\n      if (typeof this._deferredInvalidateColumnIndex === 'number' && typeof this._deferredInvalidateRowIndex === 'number') {\n        var columnIndex = this._deferredInvalidateColumnIndex;\n        var rowIndex = this._deferredInvalidateRowIndex;\n        this._deferredInvalidateColumnIndex = null;\n        this._deferredInvalidateRowIndex = null;\n        this.recomputeGridSize({\n          columnIndex: columnIndex,\n          rowIndex: rowIndex\n        });\n      }\n    }\n  }, {\n    key: \"_invokeOnScrollMemoizer\",\n    value: function _invokeOnScrollMemoizer(_ref6) {\n      var _this3 = this;\n\n      var scrollLeft = _ref6.scrollLeft,\n          scrollTop = _ref6.scrollTop,\n          totalColumnsWidth = _ref6.totalColumnsWidth,\n          totalRowsHeight = _ref6.totalRowsHeight;\n\n      this._onScrollMemoizer({\n        callback: function callback(_ref7) {\n          var scrollLeft = _ref7.scrollLeft,\n              scrollTop = _ref7.scrollTop;\n          var _this3$props = _this3.props,\n              height = _this3$props.height,\n              onScroll = _this3$props.onScroll,\n              width = _this3$props.width;\n          onScroll({\n            clientHeight: height,\n            clientWidth: width,\n            scrollHeight: totalRowsHeight,\n            scrollLeft: scrollLeft,\n            scrollTop: scrollTop,\n            scrollWidth: totalColumnsWidth\n          });\n        },\n        indices: {\n          scrollLeft: scrollLeft,\n          scrollTop: scrollTop\n        }\n      });\n    }\n  }, {\n    key: \"_isScrolling\",\n    value: function _isScrolling() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;\n      var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state;\n      // If isScrolling is defined in props, use it to override the value in state\n      // This is a performance optimization for WindowScroller + Grid\n      return Object.hasOwnProperty.call(props, 'isScrolling') ? Boolean(props.isScrolling) : Boolean(state.isScrolling);\n    }\n  }, {\n    key: \"_maybeCallOnScrollbarPresenceChange\",\n    value: function _maybeCallOnScrollbarPresenceChange() {\n      if (this._scrollbarPresenceChanged) {\n        var onScrollbarPresenceChange = this.props.onScrollbarPresenceChange;\n        this._scrollbarPresenceChanged = false;\n        onScrollbarPresenceChange({\n          horizontal: this._horizontalScrollBarSize > 0,\n          size: this.state.instanceProps.scrollbarSize,\n          vertical: this._verticalScrollBarSize > 0\n        });\n      }\n    }\n  }, {\n    key: \"scrollToPosition\",\n\n    /**\n     * Scroll to the specified offset(s).\n     * Useful for animating position changes.\n     */\n    value: function scrollToPosition(_ref8) {\n      var scrollLeft = _ref8.scrollLeft,\n          scrollTop = _ref8.scrollTop;\n\n      var stateUpdate = Grid._getScrollToPositionStateUpdate({\n        prevState: this.state,\n        scrollLeft: scrollLeft,\n        scrollTop: scrollTop\n      });\n\n      if (stateUpdate) {\n        stateUpdate.needToResetStyleCache = false;\n        this.setState(stateUpdate);\n      }\n    }\n  }, {\n    key: \"_getCalculatedScrollLeft\",\n    value: function _getCalculatedScrollLeft() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;\n      var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state;\n      return Grid._getCalculatedScrollLeft(props, state);\n    }\n  }, {\n    key: \"_updateScrollLeftForScrollToColumn\",\n    value: function _updateScrollLeftForScrollToColumn() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;\n      var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state;\n\n      var stateUpdate = Grid._getScrollLeftForScrollToColumnStateUpdate(props, state);\n\n      if (stateUpdate) {\n        stateUpdate.needToResetStyleCache = false;\n        this.setState(stateUpdate);\n      }\n    }\n  }, {\n    key: \"_getCalculatedScrollTop\",\n    value: function _getCalculatedScrollTop() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;\n      var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state;\n      return Grid._getCalculatedScrollTop(props, state);\n    }\n  }, {\n    key: \"_resetStyleCache\",\n    value: function _resetStyleCache() {\n      var styleCache = this._styleCache;\n      var cellCache = this._cellCache;\n      var isScrollingOptOut = this.props.isScrollingOptOut; // Reset cell and style caches once scrolling stops.\n      // This makes Grid simpler to use (since cells commonly change).\n      // And it keeps the caches from growing too large.\n      // Performance is most sensitive when a user is scrolling.\n      // Don't clear visible cells from cellCache if isScrollingOptOut is specified.\n      // This keeps the cellCache to a resonable size.\n\n      this._cellCache = {};\n      this._styleCache = {}; // Copy over the visible cell styles so avoid unnecessary re-render.\n\n      for (var rowIndex = this._rowStartIndex; rowIndex <= this._rowStopIndex; rowIndex++) {\n        for (var columnIndex = this._columnStartIndex; columnIndex <= this._columnStopIndex; columnIndex++) {\n          var key = \"\".concat(rowIndex, \"-\").concat(columnIndex);\n          this._styleCache[key] = styleCache[key];\n\n          if (isScrollingOptOut) {\n            this._cellCache[key] = cellCache[key];\n          }\n        }\n      }\n    }\n  }, {\n    key: \"_updateScrollTopForScrollToRow\",\n    value: function _updateScrollTopForScrollToRow() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;\n      var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state;\n\n      var stateUpdate = Grid._getScrollTopForScrollToRowStateUpdate(props, state);\n\n      if (stateUpdate) {\n        stateUpdate.needToResetStyleCache = false;\n        this.setState(stateUpdate);\n      }\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      var newState = {};\n\n      if (nextProps.columnCount === 0 && prevState.scrollLeft !== 0 || nextProps.rowCount === 0 && prevState.scrollTop !== 0) {\n        newState.scrollLeft = 0;\n        newState.scrollTop = 0; // only use scroll{Left,Top} from props if scrollTo{Column,Row} isn't specified\n        // scrollTo{Column,Row} should override scroll{Left,Top}\n      } else if (nextProps.scrollLeft !== prevState.scrollLeft && nextProps.scrollToColumn < 0 || nextProps.scrollTop !== prevState.scrollTop && nextProps.scrollToRow < 0) {\n        Object.assign(newState, Grid._getScrollToPositionStateUpdate({\n          prevState: prevState,\n          scrollLeft: nextProps.scrollLeft,\n          scrollTop: nextProps.scrollTop\n        }));\n      }\n\n      var instanceProps = prevState.instanceProps; // Initially we should not clearStyleCache\n\n      newState.needToResetStyleCache = false;\n\n      if (nextProps.columnWidth !== instanceProps.prevColumnWidth || nextProps.rowHeight !== instanceProps.prevRowHeight) {\n        // Reset cache. set it to {} in render\n        newState.needToResetStyleCache = true;\n      }\n\n      instanceProps.columnSizeAndPositionManager.configure({\n        cellCount: nextProps.columnCount,\n        estimatedCellSize: Grid._getEstimatedColumnSize(nextProps),\n        cellSizeGetter: Grid._wrapSizeGetter(nextProps.columnWidth)\n      });\n      instanceProps.rowSizeAndPositionManager.configure({\n        cellCount: nextProps.rowCount,\n        estimatedCellSize: Grid._getEstimatedRowSize(nextProps),\n        cellSizeGetter: Grid._wrapSizeGetter(nextProps.rowHeight)\n      });\n\n      if (instanceProps.prevColumnCount === 0 || instanceProps.prevRowCount === 0) {\n        instanceProps.prevColumnCount = 0;\n        instanceProps.prevRowCount = 0;\n      } // If scrolling is controlled outside this component, clear cache when scrolling stops\n\n\n      if (nextProps.autoHeight && nextProps.isScrolling === false && instanceProps.prevIsScrolling === true) {\n        Object.assign(newState, {\n          isScrolling: false\n        });\n      }\n\n      var maybeStateA;\n      var maybeStateB;\n      (0, _calculateSizeAndPositionDataAndUpdateScrollOffset[\"default\"])({\n        cellCount: instanceProps.prevColumnCount,\n        cellSize: typeof instanceProps.prevColumnWidth === 'number' ? instanceProps.prevColumnWidth : null,\n        computeMetadataCallback: function computeMetadataCallback() {\n          return instanceProps.columnSizeAndPositionManager.resetCell(0);\n        },\n        computeMetadataCallbackProps: nextProps,\n        nextCellsCount: nextProps.columnCount,\n        nextCellSize: typeof nextProps.columnWidth === 'number' ? nextProps.columnWidth : null,\n        nextScrollToIndex: nextProps.scrollToColumn,\n        scrollToIndex: instanceProps.prevScrollToColumn,\n        updateScrollOffsetForScrollToIndex: function updateScrollOffsetForScrollToIndex() {\n          maybeStateA = Grid._getScrollLeftForScrollToColumnStateUpdate(nextProps, prevState);\n        }\n      });\n      (0, _calculateSizeAndPositionDataAndUpdateScrollOffset[\"default\"])({\n        cellCount: instanceProps.prevRowCount,\n        cellSize: typeof instanceProps.prevRowHeight === 'number' ? instanceProps.prevRowHeight : null,\n        computeMetadataCallback: function computeMetadataCallback() {\n          return instanceProps.rowSizeAndPositionManager.resetCell(0);\n        },\n        computeMetadataCallbackProps: nextProps,\n        nextCellsCount: nextProps.rowCount,\n        nextCellSize: typeof nextProps.rowHeight === 'number' ? nextProps.rowHeight : null,\n        nextScrollToIndex: nextProps.scrollToRow,\n        scrollToIndex: instanceProps.prevScrollToRow,\n        updateScrollOffsetForScrollToIndex: function updateScrollOffsetForScrollToIndex() {\n          maybeStateB = Grid._getScrollTopForScrollToRowStateUpdate(nextProps, prevState);\n        }\n      });\n      instanceProps.prevColumnCount = nextProps.columnCount;\n      instanceProps.prevColumnWidth = nextProps.columnWidth;\n      instanceProps.prevIsScrolling = nextProps.isScrolling === true;\n      instanceProps.prevRowCount = nextProps.rowCount;\n      instanceProps.prevRowHeight = nextProps.rowHeight;\n      instanceProps.prevScrollToColumn = nextProps.scrollToColumn;\n      instanceProps.prevScrollToRow = nextProps.scrollToRow; // getting scrollBarSize (moved from componentWillMount)\n\n      instanceProps.scrollbarSize = nextProps.getScrollbarSize();\n\n      if (instanceProps.scrollbarSize === undefined) {\n        instanceProps.scrollbarSizeMeasured = false;\n        instanceProps.scrollbarSize = 0;\n      } else {\n        instanceProps.scrollbarSizeMeasured = true;\n      }\n\n      newState.instanceProps = instanceProps;\n      return _objectSpread({}, newState, {}, maybeStateA, {}, maybeStateB);\n    }\n  }, {\n    key: \"_getEstimatedColumnSize\",\n    value: function _getEstimatedColumnSize(props) {\n      return typeof props.columnWidth === 'number' ? props.columnWidth : props.estimatedColumnSize;\n    }\n  }, {\n    key: \"_getEstimatedRowSize\",\n    value: function _getEstimatedRowSize(props) {\n      return typeof props.rowHeight === 'number' ? props.rowHeight : props.estimatedRowSize;\n    }\n  }, {\n    key: \"_getScrollToPositionStateUpdate\",\n\n    /**\n     * Get the updated state after scrolling to\n     * scrollLeft and scrollTop\n     */\n    value: function _getScrollToPositionStateUpdate(_ref9) {\n      var prevState = _ref9.prevState,\n          scrollLeft = _ref9.scrollLeft,\n          scrollTop = _ref9.scrollTop;\n      var newState = {\n        scrollPositionChangeReason: SCROLL_POSITION_CHANGE_REASONS.REQUESTED\n      };\n\n      if (typeof scrollLeft === 'number' && scrollLeft >= 0) {\n        newState.scrollDirectionHorizontal = scrollLeft > prevState.scrollLeft ? _defaultOverscanIndicesGetter.SCROLL_DIRECTION_FORWARD : _defaultOverscanIndicesGetter.SCROLL_DIRECTION_BACKWARD;\n        newState.scrollLeft = scrollLeft;\n      }\n\n      if (typeof scrollTop === 'number' && scrollTop >= 0) {\n        newState.scrollDirectionVertical = scrollTop > prevState.scrollTop ? _defaultOverscanIndicesGetter.SCROLL_DIRECTION_FORWARD : _defaultOverscanIndicesGetter.SCROLL_DIRECTION_BACKWARD;\n        newState.scrollTop = scrollTop;\n      }\n\n      if (typeof scrollLeft === 'number' && scrollLeft >= 0 && scrollLeft !== prevState.scrollLeft || typeof scrollTop === 'number' && scrollTop >= 0 && scrollTop !== prevState.scrollTop) {\n        return newState;\n      }\n\n      return {};\n    }\n  }, {\n    key: \"_wrapSizeGetter\",\n    value: function _wrapSizeGetter(value) {\n      return typeof value === 'function' ? value : function () {\n        return value;\n      };\n    }\n  }, {\n    key: \"_getCalculatedScrollLeft\",\n    value: function _getCalculatedScrollLeft(nextProps, prevState) {\n      var columnCount = nextProps.columnCount,\n          height = nextProps.height,\n          scrollToAlignment = nextProps.scrollToAlignment,\n          scrollToColumn = nextProps.scrollToColumn,\n          width = nextProps.width;\n      var scrollLeft = prevState.scrollLeft,\n          instanceProps = prevState.instanceProps;\n\n      if (columnCount > 0) {\n        var finalColumn = columnCount - 1;\n        var targetIndex = scrollToColumn < 0 ? finalColumn : Math.min(finalColumn, scrollToColumn);\n        var totalRowsHeight = instanceProps.rowSizeAndPositionManager.getTotalSize();\n        var scrollBarSize = instanceProps.scrollbarSizeMeasured && totalRowsHeight > height ? instanceProps.scrollbarSize : 0;\n        return instanceProps.columnSizeAndPositionManager.getUpdatedOffsetForIndex({\n          align: scrollToAlignment,\n          containerSize: width - scrollBarSize,\n          currentOffset: scrollLeft,\n          targetIndex: targetIndex\n        });\n      }\n\n      return 0;\n    }\n  }, {\n    key: \"_getScrollLeftForScrollToColumnStateUpdate\",\n    value: function _getScrollLeftForScrollToColumnStateUpdate(nextProps, prevState) {\n      var scrollLeft = prevState.scrollLeft;\n\n      var calculatedScrollLeft = Grid._getCalculatedScrollLeft(nextProps, prevState);\n\n      if (typeof calculatedScrollLeft === 'number' && calculatedScrollLeft >= 0 && scrollLeft !== calculatedScrollLeft) {\n        return Grid._getScrollToPositionStateUpdate({\n          prevState: prevState,\n          scrollLeft: calculatedScrollLeft,\n          scrollTop: -1\n        });\n      }\n\n      return {};\n    }\n  }, {\n    key: \"_getCalculatedScrollTop\",\n    value: function _getCalculatedScrollTop(nextProps, prevState) {\n      var height = nextProps.height,\n          rowCount = nextProps.rowCount,\n          scrollToAlignment = nextProps.scrollToAlignment,\n          scrollToRow = nextProps.scrollToRow,\n          width = nextProps.width;\n      var scrollTop = prevState.scrollTop,\n          instanceProps = prevState.instanceProps;\n\n      if (rowCount > 0) {\n        var finalRow = rowCount - 1;\n        var targetIndex = scrollToRow < 0 ? finalRow : Math.min(finalRow, scrollToRow);\n        var totalColumnsWidth = instanceProps.columnSizeAndPositionManager.getTotalSize();\n        var scrollBarSize = instanceProps.scrollbarSizeMeasured && totalColumnsWidth > width ? instanceProps.scrollbarSize : 0;\n        return instanceProps.rowSizeAndPositionManager.getUpdatedOffsetForIndex({\n          align: scrollToAlignment,\n          containerSize: height - scrollBarSize,\n          currentOffset: scrollTop,\n          targetIndex: targetIndex\n        });\n      }\n\n      return 0;\n    }\n  }, {\n    key: \"_getScrollTopForScrollToRowStateUpdate\",\n    value: function _getScrollTopForScrollToRowStateUpdate(nextProps, prevState) {\n      var scrollTop = prevState.scrollTop;\n\n      var calculatedScrollTop = Grid._getCalculatedScrollTop(nextProps, prevState);\n\n      if (typeof calculatedScrollTop === 'number' && calculatedScrollTop >= 0 && scrollTop !== calculatedScrollTop) {\n        return Grid._getScrollToPositionStateUpdate({\n          prevState: prevState,\n          scrollLeft: -1,\n          scrollTop: calculatedScrollTop\n        });\n      }\n\n      return {};\n    }\n  }]);\n  return Grid;\n}(React.PureComponent), (0, _defineProperty2[\"default\"])(_class, \"propTypes\", process.env.NODE_ENV === 'production' ? null : {\n  \"aria-label\": _propTypes[\"default\"].string.isRequired,\n  \"aria-readonly\": _propTypes[\"default\"].bool,\n\n  /**\n   * Set the width of the inner scrollable container to 'auto'.\n   * This is useful for single-column Grids to ensure that the column doesn't extend below a vertical scrollbar.\n   */\n  \"autoContainerWidth\": _propTypes[\"default\"].bool.isRequired,\n\n  /**\n   * Removes fixed height from the scrollingContainer so that the total height of rows can stretch the window.\n   * Intended for use with WindowScroller\n   */\n  \"autoHeight\": _propTypes[\"default\"].bool.isRequired,\n\n  /**\n   * Removes fixed width from the scrollingContainer so that the total width of rows can stretch the window.\n   * Intended for use with WindowScroller\n   */\n  \"autoWidth\": _propTypes[\"default\"].bool.isRequired,\n\n  /** Responsible for rendering a cell given an row and column index.  */\n  \"cellRenderer\": function cellRenderer() {\n    return (typeof _types.bpfrpt_proptype_CellRenderer === \"function\" ? _types.bpfrpt_proptype_CellRenderer.isRequired ? _types.bpfrpt_proptype_CellRenderer.isRequired : _types.bpfrpt_proptype_CellRenderer : _propTypes[\"default\"].shape(_types.bpfrpt_proptype_CellRenderer).isRequired).apply(this, arguments);\n  },\n\n  /** Responsible for rendering a group of cells given their index ranges.  */\n  \"cellRangeRenderer\": function cellRangeRenderer() {\n    return (typeof _types.bpfrpt_proptype_CellRangeRenderer === \"function\" ? _types.bpfrpt_proptype_CellRangeRenderer.isRequired ? _types.bpfrpt_proptype_CellRangeRenderer.isRequired : _types.bpfrpt_proptype_CellRangeRenderer : _propTypes[\"default\"].shape(_types.bpfrpt_proptype_CellRangeRenderer).isRequired).apply(this, arguments);\n  },\n\n  /** Optional custom CSS class name to attach to root Grid element.  */\n  \"className\": _propTypes[\"default\"].string,\n\n  /** Number of columns in grid.  */\n  \"columnCount\": _propTypes[\"default\"].number.isRequired,\n\n  /** Either a fixed column width (number) or a function that returns the width of a column given its index.  */\n  \"columnWidth\": function columnWidth() {\n    return (typeof _types.bpfrpt_proptype_CellSize === \"function\" ? _types.bpfrpt_proptype_CellSize.isRequired ? _types.bpfrpt_proptype_CellSize.isRequired : _types.bpfrpt_proptype_CellSize : _propTypes[\"default\"].shape(_types.bpfrpt_proptype_CellSize).isRequired).apply(this, arguments);\n  },\n\n  /** Unfiltered props for the Grid container. */\n  \"containerProps\": _propTypes[\"default\"].object,\n\n  /** ARIA role for the cell-container.  */\n  \"containerRole\": _propTypes[\"default\"].string.isRequired,\n\n  /** Optional inline style applied to inner cell-container */\n  \"containerStyle\": _propTypes[\"default\"].object.isRequired,\n\n  /**\n   * If CellMeasurer is used to measure this Grid's children, this should be a pointer to its CellMeasurerCache.\n   * A shared CellMeasurerCache reference enables Grid and CellMeasurer to share measurement data.\n   */\n  \"deferredMeasurementCache\": _propTypes[\"default\"].object,\n\n  /**\n   * Used to estimate the total width of a Grid before all of its columns have actually been measured.\n   * The estimated total width is adjusted as columns are rendered.\n   */\n  \"estimatedColumnSize\": _propTypes[\"default\"].number.isRequired,\n\n  /**\n   * Used to estimate the total height of a Grid before all of its rows have actually been measured.\n   * The estimated total height is adjusted as rows are rendered.\n   */\n  \"estimatedRowSize\": _propTypes[\"default\"].number.isRequired,\n\n  /** Exposed for testing purposes only.  */\n  \"getScrollbarSize\": _propTypes[\"default\"].func.isRequired,\n\n  /** Height of Grid; this property determines the number of visible (vs virtualized) rows.  */\n  \"height\": _propTypes[\"default\"].number.isRequired,\n\n  /** Optional custom id to attach to root Grid element.  */\n  \"id\": _propTypes[\"default\"].string,\n\n  /**\n   * Override internal is-scrolling state tracking.\n   * This property is primarily intended for use with the WindowScroller component.\n   */\n  \"isScrolling\": _propTypes[\"default\"].bool,\n\n  /**\n   * Opt-out of isScrolling param passed to cellRangeRenderer.\n   * To avoid the extra render when scroll stops.\n   */\n  \"isScrollingOptOut\": _propTypes[\"default\"].bool.isRequired,\n\n  /** Optional renderer to be used in place of rows when either :rowCount or :columnCount is 0.  */\n  \"noContentRenderer\": function noContentRenderer() {\n    return (typeof _types.bpfrpt_proptype_NoContentRenderer === \"function\" ? _types.bpfrpt_proptype_NoContentRenderer.isRequired ? _types.bpfrpt_proptype_NoContentRenderer.isRequired : _types.bpfrpt_proptype_NoContentRenderer : _propTypes[\"default\"].shape(_types.bpfrpt_proptype_NoContentRenderer).isRequired).apply(this, arguments);\n  },\n\n  /**\n   * Callback invoked whenever the scroll offset changes within the inner scrollable region.\n   * This callback can be used to sync scrolling between lists, tables, or grids.\n   */\n  \"onScroll\": _propTypes[\"default\"].func.isRequired,\n\n  /**\n   * Called whenever a horizontal or vertical scrollbar is added or removed.\n   * This prop is not intended for end-user use;\n   * It is used by MultiGrid to support fixed-row/fixed-column scroll syncing.\n   */\n  \"onScrollbarPresenceChange\": _propTypes[\"default\"].func.isRequired,\n\n  /** Callback invoked with information about the section of the Grid that was just rendered.  */\n  \"onSectionRendered\": _propTypes[\"default\"].func.isRequired,\n\n  /**\n   * Number of columns to render before/after the visible section of the grid.\n   * These columns can help for smoother scrolling on touch devices or browsers that send scroll events infrequently.\n   */\n  \"overscanColumnCount\": _propTypes[\"default\"].number.isRequired,\n\n  /**\n   * Calculates the number of cells to overscan before and after a specified range.\n   * This function ensures that overscanning doesn't exceed the available cells.\n   */\n  \"overscanIndicesGetter\": function overscanIndicesGetter() {\n    return (typeof _types.bpfrpt_proptype_OverscanIndicesGetter === \"function\" ? _types.bpfrpt_proptype_OverscanIndicesGetter.isRequired ? _types.bpfrpt_proptype_OverscanIndicesGetter.isRequired : _types.bpfrpt_proptype_OverscanIndicesGetter : _propTypes[\"default\"].shape(_types.bpfrpt_proptype_OverscanIndicesGetter).isRequired).apply(this, arguments);\n  },\n\n  /**\n   * Number of rows to render above/below the visible section of the grid.\n   * These rows can help for smoother scrolling on touch devices or browsers that send scroll events infrequently.\n   */\n  \"overscanRowCount\": _propTypes[\"default\"].number.isRequired,\n\n  /** ARIA role for the grid element.  */\n  \"role\": _propTypes[\"default\"].string.isRequired,\n\n  /**\n   * Either a fixed row height (number) or a function that returns the height of a row given its index.\n   * Should implement the following interface: ({ index: number }): number\n   */\n  \"rowHeight\": function rowHeight() {\n    return (typeof _types.bpfrpt_proptype_CellSize === \"function\" ? _types.bpfrpt_proptype_CellSize.isRequired ? _types.bpfrpt_proptype_CellSize.isRequired : _types.bpfrpt_proptype_CellSize : _propTypes[\"default\"].shape(_types.bpfrpt_proptype_CellSize).isRequired).apply(this, arguments);\n  },\n\n  /** Number of rows in grid.  */\n  \"rowCount\": _propTypes[\"default\"].number.isRequired,\n\n  /** Wait this amount of time after the last scroll event before resetting Grid `pointer-events`. */\n  \"scrollingResetTimeInterval\": _propTypes[\"default\"].number.isRequired,\n\n  /** Horizontal offset. */\n  \"scrollLeft\": _propTypes[\"default\"].number,\n\n  /**\n   * Controls scroll-to-cell behavior of the Grid.\n   * The default (\"auto\") scrolls the least amount possible to ensure that the specified cell is fully visible.\n   * Use \"start\" to align cells to the top/left of the Grid and \"end\" to align bottom/right.\n   */\n  \"scrollToAlignment\": function scrollToAlignment() {\n    return (typeof _types.bpfrpt_proptype_Alignment === \"function\" ? _types.bpfrpt_proptype_Alignment.isRequired ? _types.bpfrpt_proptype_Alignment.isRequired : _types.bpfrpt_proptype_Alignment : _propTypes[\"default\"].shape(_types.bpfrpt_proptype_Alignment).isRequired).apply(this, arguments);\n  },\n\n  /** Column index to ensure visible (by forcefully scrolling if necessary) */\n  \"scrollToColumn\": _propTypes[\"default\"].number.isRequired,\n\n  /** Vertical offset. */\n  \"scrollTop\": _propTypes[\"default\"].number,\n\n  /** Row index to ensure visible (by forcefully scrolling if necessary) */\n  \"scrollToRow\": _propTypes[\"default\"].number.isRequired,\n\n  /** Optional inline style */\n  \"style\": _propTypes[\"default\"].object.isRequired,\n\n  /** Tab index for focus */\n  \"tabIndex\": _propTypes[\"default\"].number,\n\n  /** Width of Grid; this property determines the number of visible (vs virtualized) columns.  */\n  \"width\": _propTypes[\"default\"].number.isRequired\n}), _temp);\n(0, _defineProperty2[\"default\"])(Grid, \"defaultProps\", {\n  'aria-label': 'grid',\n  'aria-readonly': true,\n  autoContainerWidth: false,\n  autoHeight: false,\n  autoWidth: false,\n  cellRangeRenderer: _defaultCellRangeRenderer[\"default\"],\n  containerRole: 'rowgroup',\n  containerStyle: {},\n  estimatedColumnSize: 100,\n  estimatedRowSize: 30,\n  getScrollbarSize: _scrollbarSize[\"default\"],\n  noContentRenderer: renderNull,\n  onScroll: function onScroll() {},\n  onScrollbarPresenceChange: function onScrollbarPresenceChange() {},\n  onSectionRendered: function onSectionRendered() {},\n  overscanColumnCount: 0,\n  overscanIndicesGetter: _defaultOverscanIndicesGetter[\"default\"],\n  overscanRowCount: 10,\n  role: 'grid',\n  scrollingResetTimeInterval: DEFAULT_SCROLLING_RESET_TIME_INTERVAL,\n  scrollToAlignment: 'auto',\n  scrollToColumn: -1,\n  scrollToRow: -1,\n  style: {},\n  tabIndex: 0,\n  isScrollingOptOut: false\n});\n(0, _reactLifecyclesCompat.polyfill)(Grid);\nvar _default = Grid;\nexports[\"default\"] = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = defaultOverscanIndicesGetter;\nexports.SCROLL_DIRECTION_VERTICAL = exports.SCROLL_DIRECTION_HORIZONTAL = exports.SCROLL_DIRECTION_FORWARD = exports.SCROLL_DIRECTION_BACKWARD = void 0;\n\nvar _types = require(\"./types\");\n\nvar SCROLL_DIRECTION_BACKWARD = -1;\nexports.SCROLL_DIRECTION_BACKWARD = SCROLL_DIRECTION_BACKWARD;\nvar SCROLL_DIRECTION_FORWARD = 1;\nexports.SCROLL_DIRECTION_FORWARD = SCROLL_DIRECTION_FORWARD;\nvar SCROLL_DIRECTION_HORIZONTAL = 'horizontal';\nexports.SCROLL_DIRECTION_HORIZONTAL = SCROLL_DIRECTION_HORIZONTAL;\nvar SCROLL_DIRECTION_VERTICAL = 'vertical';\n/**\n * Calculates the number of cells to overscan before and after a specified range.\n * This function ensures that overscanning doesn't exceed the available cells.\n */\n\nexports.SCROLL_DIRECTION_VERTICAL = SCROLL_DIRECTION_VERTICAL;\n\nfunction defaultOverscanIndicesGetter(_ref) {\n  var cellCount = _ref.cellCount,\n      overscanCellsCount = _ref.overscanCellsCount,\n      scrollDirection = _ref.scrollDirection,\n      startIndex = _ref.startIndex,\n      stopIndex = _ref.stopIndex;\n  // Make sure we render at least 1 cell extra before and after (except near boundaries)\n  // This is necessary in order to support keyboard navigation (TAB/SHIFT+TAB) in some cases\n  // For more info see issues #625\n  overscanCellsCount = Math.max(1, overscanCellsCount);\n\n  if (scrollDirection === SCROLL_DIRECTION_FORWARD) {\n    return {\n      overscanStartIndex: Math.max(0, startIndex - 1),\n      overscanStopIndex: Math.min(cellCount - 1, stopIndex + overscanCellsCount)\n    };\n  } else {\n    return {\n      overscanStartIndex: Math.max(0, startIndex - overscanCellsCount),\n      overscanStopIndex: Math.min(cellCount - 1, stopIndex + 1)\n    };\n  }\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = defaultCellRangeRenderer;\n\nvar _types = require(\"./types\");\n\n/**\n * Default implementation of cellRangeRenderer used by Grid.\n * This renderer supports cell-caching while the user is scrolling.\n */\nfunction defaultCellRangeRenderer(_ref) {\n  var cellCache = _ref.cellCache,\n      cellRenderer = _ref.cellRenderer,\n      columnSizeAndPositionManager = _ref.columnSizeAndPositionManager,\n      columnStartIndex = _ref.columnStartIndex,\n      columnStopIndex = _ref.columnStopIndex,\n      deferredMeasurementCache = _ref.deferredMeasurementCache,\n      horizontalOffsetAdjustment = _ref.horizontalOffsetAdjustment,\n      isScrolling = _ref.isScrolling,\n      isScrollingOptOut = _ref.isScrollingOptOut,\n      parent = _ref.parent,\n      rowSizeAndPositionManager = _ref.rowSizeAndPositionManager,\n      rowStartIndex = _ref.rowStartIndex,\n      rowStopIndex = _ref.rowStopIndex,\n      styleCache = _ref.styleCache,\n      verticalOffsetAdjustment = _ref.verticalOffsetAdjustment,\n      visibleColumnIndices = _ref.visibleColumnIndices,\n      visibleRowIndices = _ref.visibleRowIndices;\n  var renderedCells = []; // Browsers have native size limits for elements (eg Chrome 33M pixels, IE 1.5M pixes).\n  // User cannot scroll beyond these size limitations.\n  // In order to work around this, ScalingCellSizeAndPositionManager compresses offsets.\n  // We should never cache styles for compressed offsets though as this can lead to bugs.\n  // See issue #576 for more.\n\n  var areOffsetsAdjusted = columnSizeAndPositionManager.areOffsetsAdjusted() || rowSizeAndPositionManager.areOffsetsAdjusted();\n  var canCacheStyle = !isScrolling && !areOffsetsAdjusted;\n\n  for (var rowIndex = rowStartIndex; rowIndex <= rowStopIndex; rowIndex++) {\n    var rowDatum = rowSizeAndPositionManager.getSizeAndPositionOfCell(rowIndex);\n\n    for (var columnIndex = columnStartIndex; columnIndex <= columnStopIndex; columnIndex++) {\n      var columnDatum = columnSizeAndPositionManager.getSizeAndPositionOfCell(columnIndex);\n      var isVisible = columnIndex >= visibleColumnIndices.start && columnIndex <= visibleColumnIndices.stop && rowIndex >= visibleRowIndices.start && rowIndex <= visibleRowIndices.stop;\n      var key = \"\".concat(rowIndex, \"-\").concat(columnIndex);\n      var style = void 0; // Cache style objects so shallow-compare doesn't re-render unnecessarily.\n\n      if (canCacheStyle && styleCache[key]) {\n        style = styleCache[key];\n      } else {\n        // In deferred mode, cells will be initially rendered before we know their size.\n        // Don't interfere with CellMeasurer's measurements by setting an invalid size.\n        if (deferredMeasurementCache && !deferredMeasurementCache.has(rowIndex, columnIndex)) {\n          // Position not-yet-measured cells at top/left 0,0,\n          // And give them width/height of 'auto' so they can grow larger than the parent Grid if necessary.\n          // Positioning them further to the right/bottom influences their measured size.\n          style = {\n            height: 'auto',\n            left: 0,\n            position: 'absolute',\n            top: 0,\n            width: 'auto'\n          };\n        } else {\n          style = {\n            height: rowDatum.size,\n            left: columnDatum.offset + horizontalOffsetAdjustment,\n            position: 'absolute',\n            top: rowDatum.offset + verticalOffsetAdjustment,\n            width: columnDatum.size\n          };\n          styleCache[key] = style;\n        }\n      }\n\n      var cellRendererParams = {\n        columnIndex: columnIndex,\n        isScrolling: isScrolling,\n        isVisible: isVisible,\n        key: key,\n        parent: parent,\n        rowIndex: rowIndex,\n        style: style\n      };\n      var renderedCell = void 0; // Avoid re-creating cells while scrolling.\n      // This can lead to the same cell being created many times and can cause performance issues for \"heavy\" cells.\n      // If a scroll is in progress- cache and reuse cells.\n      // This cache will be thrown away once scrolling completes.\n      // However if we are scaling scroll positions and sizes, we should also avoid caching.\n      // This is because the offset changes slightly as scroll position changes and caching leads to stale values.\n      // For more info refer to issue #395\n      //\n      // If isScrollingOptOut is specified, we always cache cells.\n      // For more info refer to issue #1028\n\n      if ((isScrollingOptOut || isScrolling) && !horizontalOffsetAdjustment && !verticalOffsetAdjustment) {\n        if (!cellCache[key]) {\n          cellCache[key] = cellRenderer(cellRendererParams);\n        }\n\n        renderedCell = cellCache[key]; // If the user is no longer scrolling, don't cache cells.\n        // This makes dynamic cell content difficult for users and would also lead to a heavier memory footprint.\n      } else {\n        renderedCell = cellRenderer(cellRendererParams);\n      }\n\n      if (renderedCell == null || renderedCell === false) {\n        continue;\n      }\n\n      if (process.env.NODE_ENV !== 'production') {\n        warnAboutMissingStyle(parent, renderedCell);\n      }\n\n      renderedCells.push(renderedCell);\n    }\n  }\n\n  return renderedCells;\n}\n\nfunction warnAboutMissingStyle(parent, renderedCell) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (renderedCell) {\n      // If the direct child is a CellMeasurer, then we should check its child\n      // See issue #611\n      if (renderedCell.type && renderedCell.type.__internalCellMeasurerFlag) {\n        renderedCell = renderedCell.props.children;\n      }\n\n      if (renderedCell && renderedCell.props && renderedCell.props.style === undefined && parent.__warnedAboutMissingStyle !== true) {\n        parent.__warnedAboutMissingStyle = true;\n        console.warn('Rendered cell should include style property for positioning.');\n      }\n    }\n  }\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = defaultOverscanIndicesGetter;\nexports.SCROLL_DIRECTION_VERTICAL = exports.SCROLL_DIRECTION_HORIZONTAL = exports.SCROLL_DIRECTION_FORWARD = exports.SCROLL_DIRECTION_BACKWARD = void 0;\n\nvar _types = require(\"./types\");\n\nvar SCROLL_DIRECTION_BACKWARD = -1;\nexports.SCROLL_DIRECTION_BACKWARD = SCROLL_DIRECTION_BACKWARD;\nvar SCROLL_DIRECTION_FORWARD = 1;\nexports.SCROLL_DIRECTION_FORWARD = SCROLL_DIRECTION_FORWARD;\nvar SCROLL_DIRECTION_HORIZONTAL = 'horizontal';\nexports.SCROLL_DIRECTION_HORIZONTAL = SCROLL_DIRECTION_HORIZONTAL;\nvar SCROLL_DIRECTION_VERTICAL = 'vertical';\n/**\n * Calculates the number of cells to overscan before and after a specified range.\n * This function ensures that overscanning doesn't exceed the available cells.\n */\n\nexports.SCROLL_DIRECTION_VERTICAL = SCROLL_DIRECTION_VERTICAL;\n\nfunction defaultOverscanIndicesGetter(_ref) {\n  var cellCount = _ref.cellCount,\n      overscanCellsCount = _ref.overscanCellsCount,\n      scrollDirection = _ref.scrollDirection,\n      startIndex = _ref.startIndex,\n      stopIndex = _ref.stopIndex;\n\n  if (scrollDirection === SCROLL_DIRECTION_FORWARD) {\n    return {\n      overscanStartIndex: Math.max(0, startIndex),\n      overscanStopIndex: Math.min(cellCount - 1, stopIndex + overscanCellsCount)\n    };\n  } else {\n    return {\n      overscanStartIndex: Math.max(0, startIndex - overscanCellsCount),\n      overscanStopIndex: Math.min(cellCount - 1, stopIndex)\n    };\n  }\n}","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"default\", {\n  enumerable: true,\n  get: function get() {\n    return _Grid[\"default\"];\n  }\n});\nObject.defineProperty(exports, \"Grid\", {\n  enumerable: true,\n  get: function get() {\n    return _Grid[\"default\"];\n  }\n});\nObject.defineProperty(exports, \"accessibilityOverscanIndicesGetter\", {\n  enumerable: true,\n  get: function get() {\n    return _accessibilityOverscanIndicesGetter[\"default\"];\n  }\n});\nObject.defineProperty(exports, \"defaultCellRangeRenderer\", {\n  enumerable: true,\n  get: function get() {\n    return _defaultCellRangeRenderer[\"default\"];\n  }\n});\nObject.defineProperty(exports, \"defaultOverscanIndicesGetter\", {\n  enumerable: true,\n  get: function get() {\n    return _defaultOverscanIndicesGetter[\"default\"];\n  }\n});\nObject.defineProperty(exports, \"bpfrpt_proptype_NoContentRenderer\", {\n  enumerable: true,\n  get: function get() {\n    return _types.bpfrpt_proptype_NoContentRenderer;\n  }\n});\nObject.defineProperty(exports, \"bpfrpt_proptype_Alignment\", {\n  enumerable: true,\n  get: function get() {\n    return _types.bpfrpt_proptype_Alignment;\n  }\n});\nObject.defineProperty(exports, \"bpfrpt_proptype_CellPosition\", {\n  enumerable: true,\n  get: function get() {\n    return _types.bpfrpt_proptype_CellPosition;\n  }\n});\nObject.defineProperty(exports, \"bpfrpt_proptype_CellSize\", {\n  enumerable: true,\n  get: function get() {\n    return _types.bpfrpt_proptype_CellSize;\n  }\n});\nObject.defineProperty(exports, \"bpfrpt_proptype_OverscanIndicesGetter\", {\n  enumerable: true,\n  get: function get() {\n    return _types.bpfrpt_proptype_OverscanIndicesGetter;\n  }\n});\nObject.defineProperty(exports, \"bpfrpt_proptype_RenderedSection\", {\n  enumerable: true,\n  get: function get() {\n    return _types.bpfrpt_proptype_RenderedSection;\n  }\n});\nObject.defineProperty(exports, \"bpfrpt_proptype_CellRendererParams\", {\n  enumerable: true,\n  get: function get() {\n    return _types.bpfrpt_proptype_CellRendererParams;\n  }\n});\nObject.defineProperty(exports, \"bpfrpt_proptype_Scroll\", {\n  enumerable: true,\n  get: function get() {\n    return _types.bpfrpt_proptype_Scroll;\n  }\n});\n\nvar _Grid = _interopRequireDefault(require(\"./Grid\"));\n\nvar _accessibilityOverscanIndicesGetter = _interopRequireDefault(require(\"./accessibilityOverscanIndicesGetter\"));\n\nvar _defaultCellRangeRenderer = _interopRequireDefault(require(\"./defaultCellRangeRenderer\"));\n\nvar _defaultOverscanIndicesGetter = _interopRequireDefault(require(\"./defaultOverscanIndicesGetter\"));\n\nvar _types = require(\"./types\");","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.bpfrpt_proptype_VisibleCellRange = exports.bpfrpt_proptype_Alignment = exports.bpfrpt_proptype_OverscanIndicesGetter = exports.bpfrpt_proptype_OverscanIndices = exports.bpfrpt_proptype_OverscanIndicesGetterParams = exports.bpfrpt_proptype_RenderedSection = exports.bpfrpt_proptype_ScrollbarPresenceChange = exports.bpfrpt_proptype_Scroll = exports.bpfrpt_proptype_NoContentRenderer = exports.bpfrpt_proptype_CellSize = exports.bpfrpt_proptype_CellSizeGetter = exports.bpfrpt_proptype_CellRangeRenderer = exports.bpfrpt_proptype_CellRangeRendererParams = exports.bpfrpt_proptype_StyleCache = exports.bpfrpt_proptype_CellCache = exports.bpfrpt_proptype_CellRenderer = exports.bpfrpt_proptype_CellRendererParams = exports.bpfrpt_proptype_CellPosition = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _ScalingCellSizeAndPositionManager = _interopRequireDefault(require(\"./utils/ScalingCellSizeAndPositionManager\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar bpfrpt_proptype_CellPosition = process.env.NODE_ENV === 'production' ? null : {\n  \"columnIndex\": _propTypes[\"default\"].number.isRequired,\n  \"rowIndex\": _propTypes[\"default\"].number.isRequired\n};\nexports.bpfrpt_proptype_CellPosition = bpfrpt_proptype_CellPosition;\nvar bpfrpt_proptype_CellRendererParams = process.env.NODE_ENV === 'production' ? null : {\n  \"columnIndex\": _propTypes[\"default\"].number.isRequired,\n  \"isScrolling\": _propTypes[\"default\"].bool.isRequired,\n  \"isVisible\": _propTypes[\"default\"].bool.isRequired,\n  \"key\": _propTypes[\"default\"].string.isRequired,\n  \"parent\": _propTypes[\"default\"].object.isRequired,\n  \"rowIndex\": _propTypes[\"default\"].number.isRequired,\n  \"style\": _propTypes[\"default\"].object.isRequired\n};\nexports.bpfrpt_proptype_CellRendererParams = bpfrpt_proptype_CellRendererParams;\nvar bpfrpt_proptype_CellRenderer = process.env.NODE_ENV === 'production' ? null : _propTypes[\"default\"].func;\nexports.bpfrpt_proptype_CellRenderer = bpfrpt_proptype_CellRenderer;\nvar bpfrpt_proptype_CellCache = process.env.NODE_ENV === 'production' ? null : _propTypes[\"default\"].objectOf(_propTypes[\"default\"].node.isRequired);\nexports.bpfrpt_proptype_CellCache = bpfrpt_proptype_CellCache;\nvar bpfrpt_proptype_StyleCache = process.env.NODE_ENV === 'production' ? null : _propTypes[\"default\"].objectOf(_propTypes[\"default\"].object.isRequired);\nexports.bpfrpt_proptype_StyleCache = bpfrpt_proptype_StyleCache;\nvar bpfrpt_proptype_CellRangeRendererParams = process.env.NODE_ENV === 'production' ? null : {\n  \"cellCache\": _propTypes[\"default\"].objectOf(_propTypes[\"default\"].node.isRequired).isRequired,\n  \"cellRenderer\": _propTypes[\"default\"].func.isRequired,\n  \"columnSizeAndPositionManager\": function columnSizeAndPositionManager() {\n    return (typeof _ScalingCellSizeAndPositionManager[\"default\"] === \"function\" ? _propTypes[\"default\"].instanceOf(_ScalingCellSizeAndPositionManager[\"default\"]).isRequired : _propTypes[\"default\"].any.isRequired).apply(this, arguments);\n  },\n  \"columnStartIndex\": _propTypes[\"default\"].number.isRequired,\n  \"columnStopIndex\": _propTypes[\"default\"].number.isRequired,\n  \"deferredMeasurementCache\": _propTypes[\"default\"].object,\n  \"horizontalOffsetAdjustment\": _propTypes[\"default\"].number.isRequired,\n  \"isScrolling\": _propTypes[\"default\"].bool.isRequired,\n  \"isScrollingOptOut\": _propTypes[\"default\"].bool.isRequired,\n  \"parent\": _propTypes[\"default\"].object.isRequired,\n  \"rowSizeAndPositionManager\": function rowSizeAndPositionManager() {\n    return (typeof _ScalingCellSizeAndPositionManager[\"default\"] === \"function\" ? _propTypes[\"default\"].instanceOf(_ScalingCellSizeAndPositionManager[\"default\"]).isRequired : _propTypes[\"default\"].any.isRequired).apply(this, arguments);\n  },\n  \"rowStartIndex\": _propTypes[\"default\"].number.isRequired,\n  \"rowStopIndex\": _propTypes[\"default\"].number.isRequired,\n  \"scrollLeft\": _propTypes[\"default\"].number.isRequired,\n  \"scrollTop\": _propTypes[\"default\"].number.isRequired,\n  \"styleCache\": _propTypes[\"default\"].objectOf(_propTypes[\"default\"].object.isRequired).isRequired,\n  \"verticalOffsetAdjustment\": _propTypes[\"default\"].number.isRequired,\n  \"visibleColumnIndices\": _propTypes[\"default\"].object.isRequired,\n  \"visibleRowIndices\": _propTypes[\"default\"].object.isRequired\n};\nexports.bpfrpt_proptype_CellRangeRendererParams = bpfrpt_proptype_CellRangeRendererParams;\nvar bpfrpt_proptype_CellRangeRenderer = process.env.NODE_ENV === 'production' ? null : _propTypes[\"default\"].func;\nexports.bpfrpt_proptype_CellRangeRenderer = bpfrpt_proptype_CellRangeRenderer;\nvar bpfrpt_proptype_CellSizeGetter = process.env.NODE_ENV === 'production' ? null : _propTypes[\"default\"].func;\nexports.bpfrpt_proptype_CellSizeGetter = bpfrpt_proptype_CellSizeGetter;\nvar bpfrpt_proptype_CellSize = process.env.NODE_ENV === 'production' ? null : _propTypes[\"default\"].oneOfType([_propTypes[\"default\"].func, _propTypes[\"default\"].number]);\nexports.bpfrpt_proptype_CellSize = bpfrpt_proptype_CellSize;\nvar bpfrpt_proptype_NoContentRenderer = process.env.NODE_ENV === 'production' ? null : _propTypes[\"default\"].func;\nexports.bpfrpt_proptype_NoContentRenderer = bpfrpt_proptype_NoContentRenderer;\nvar bpfrpt_proptype_Scroll = process.env.NODE_ENV === 'production' ? null : {\n  \"clientHeight\": _propTypes[\"default\"].number.isRequired,\n  \"clientWidth\": _propTypes[\"default\"].number.isRequired,\n  \"scrollHeight\": _propTypes[\"default\"].number.isRequired,\n  \"scrollLeft\": _propTypes[\"default\"].number.isRequired,\n  \"scrollTop\": _propTypes[\"default\"].number.isRequired,\n  \"scrollWidth\": _propTypes[\"default\"].number.isRequired\n};\nexports.bpfrpt_proptype_Scroll = bpfrpt_proptype_Scroll;\nvar bpfrpt_proptype_ScrollbarPresenceChange = process.env.NODE_ENV === 'production' ? null : {\n  \"horizontal\": _propTypes[\"default\"].bool.isRequired,\n  \"vertical\": _propTypes[\"default\"].bool.isRequired,\n  \"size\": _propTypes[\"default\"].number.isRequired\n};\nexports.bpfrpt_proptype_ScrollbarPresenceChange = bpfrpt_proptype_ScrollbarPresenceChange;\nvar bpfrpt_proptype_RenderedSection = process.env.NODE_ENV === 'production' ? null : {\n  \"columnOverscanStartIndex\": _propTypes[\"default\"].number.isRequired,\n  \"columnOverscanStopIndex\": _propTypes[\"default\"].number.isRequired,\n  \"columnStartIndex\": _propTypes[\"default\"].number.isRequired,\n  \"columnStopIndex\": _propTypes[\"default\"].number.isRequired,\n  \"rowOverscanStartIndex\": _propTypes[\"default\"].number.isRequired,\n  \"rowOverscanStopIndex\": _propTypes[\"default\"].number.isRequired,\n  \"rowStartIndex\": _propTypes[\"default\"].number.isRequired,\n  \"rowStopIndex\": _propTypes[\"default\"].number.isRequired\n};\nexports.bpfrpt_proptype_RenderedSection = bpfrpt_proptype_RenderedSection;\nvar bpfrpt_proptype_OverscanIndicesGetterParams = process.env.NODE_ENV === 'production' ? null : {\n  // One of SCROLL_DIRECTION_HORIZONTAL or SCROLL_DIRECTION_VERTICAL\n  \"direction\": _propTypes[\"default\"].oneOf([\"horizontal\", \"vertical\"]).isRequired,\n  // One of SCROLL_DIRECTION_BACKWARD or SCROLL_DIRECTION_FORWARD\n  \"scrollDirection\": _propTypes[\"default\"].oneOf([-1, 1]).isRequired,\n  // Number of rows or columns in the current axis\n  \"cellCount\": _propTypes[\"default\"].number.isRequired,\n  // Maximum number of cells to over-render in either direction\n  \"overscanCellsCount\": _propTypes[\"default\"].number.isRequired,\n  // Begin of range of visible cells\n  \"startIndex\": _propTypes[\"default\"].number.isRequired,\n  // End of range of visible cells\n  \"stopIndex\": _propTypes[\"default\"].number.isRequired\n};\nexports.bpfrpt_proptype_OverscanIndicesGetterParams = bpfrpt_proptype_OverscanIndicesGetterParams;\nvar bpfrpt_proptype_OverscanIndices = process.env.NODE_ENV === 'production' ? null : {\n  \"overscanStartIndex\": _propTypes[\"default\"].number.isRequired,\n  \"overscanStopIndex\": _propTypes[\"default\"].number.isRequired\n};\nexports.bpfrpt_proptype_OverscanIndices = bpfrpt_proptype_OverscanIndices;\nvar bpfrpt_proptype_OverscanIndicesGetter = process.env.NODE_ENV === 'production' ? null : _propTypes[\"default\"].func;\nexports.bpfrpt_proptype_OverscanIndicesGetter = bpfrpt_proptype_OverscanIndicesGetter;\nvar bpfrpt_proptype_Alignment = process.env.NODE_ENV === 'production' ? null : _propTypes[\"default\"].oneOf([\"auto\", \"end\", \"start\", \"center\"]);\nexports.bpfrpt_proptype_Alignment = bpfrpt_proptype_Alignment;\nvar bpfrpt_proptype_VisibleCellRange = process.env.NODE_ENV === 'production' ? null : {\n  \"start\": _propTypes[\"default\"].number,\n  \"stop\": _propTypes[\"default\"].number\n};\nexports.bpfrpt_proptype_VisibleCellRange = bpfrpt_proptype_VisibleCellRange;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _types = require(\"../types\");\n\n/**\n * Just-in-time calculates and caches size and position information for a collection of cells.\n */\nvar CellSizeAndPositionManager =\n/*#__PURE__*/\nfunction () {\n  // Cache of size and position data for cells, mapped by cell index.\n  // Note that invalid values may exist in this map so only rely on cells up to this._lastMeasuredIndex\n  // Measurements for cells up to this index can be trusted; cells afterward should be estimated.\n  // Used in deferred mode to track which cells have been queued for measurement.\n  function CellSizeAndPositionManager(_ref) {\n    var cellCount = _ref.cellCount,\n        cellSizeGetter = _ref.cellSizeGetter,\n        estimatedCellSize = _ref.estimatedCellSize;\n    (0, _classCallCheck2[\"default\"])(this, CellSizeAndPositionManager);\n    (0, _defineProperty2[\"default\"])(this, \"_cellSizeAndPositionData\", {});\n    (0, _defineProperty2[\"default\"])(this, \"_lastMeasuredIndex\", -1);\n    (0, _defineProperty2[\"default\"])(this, \"_lastBatchedIndex\", -1);\n    (0, _defineProperty2[\"default\"])(this, \"_cellCount\", void 0);\n    (0, _defineProperty2[\"default\"])(this, \"_cellSizeGetter\", void 0);\n    (0, _defineProperty2[\"default\"])(this, \"_estimatedCellSize\", void 0);\n    this._cellSizeGetter = cellSizeGetter;\n    this._cellCount = cellCount;\n    this._estimatedCellSize = estimatedCellSize;\n  }\n\n  (0, _createClass2[\"default\"])(CellSizeAndPositionManager, [{\n    key: \"areOffsetsAdjusted\",\n    value: function areOffsetsAdjusted() {\n      return false;\n    }\n  }, {\n    key: \"configure\",\n    value: function configure(_ref2) {\n      var cellCount = _ref2.cellCount,\n          estimatedCellSize = _ref2.estimatedCellSize,\n          cellSizeGetter = _ref2.cellSizeGetter;\n      this._cellCount = cellCount;\n      this._estimatedCellSize = estimatedCellSize;\n      this._cellSizeGetter = cellSizeGetter;\n    }\n  }, {\n    key: \"getCellCount\",\n    value: function getCellCount() {\n      return this._cellCount;\n    }\n  }, {\n    key: \"getEstimatedCellSize\",\n    value: function getEstimatedCellSize() {\n      return this._estimatedCellSize;\n    }\n  }, {\n    key: \"getLastMeasuredIndex\",\n    value: function getLastMeasuredIndex() {\n      return this._lastMeasuredIndex;\n    }\n  }, {\n    key: \"getOffsetAdjustment\",\n    value: function getOffsetAdjustment() {\n      return 0;\n    }\n    /**\n     * This method returns the size and position for the cell at the specified index.\n     * It just-in-time calculates (or used cached values) for cells leading up to the index.\n     */\n\n  }, {\n    key: \"getSizeAndPositionOfCell\",\n    value: function getSizeAndPositionOfCell(index) {\n      if (index < 0 || index >= this._cellCount) {\n        throw Error(\"Requested index \".concat(index, \" is outside of range 0..\").concat(this._cellCount));\n      }\n\n      if (index > this._lastMeasuredIndex) {\n        var lastMeasuredCellSizeAndPosition = this.getSizeAndPositionOfLastMeasuredCell();\n        var offset = lastMeasuredCellSizeAndPosition.offset + lastMeasuredCellSizeAndPosition.size;\n\n        for (var i = this._lastMeasuredIndex + 1; i <= index; i++) {\n          var size = this._cellSizeGetter({\n            index: i\n          }); // undefined or NaN probably means a logic error in the size getter.\n          // null means we're using CellMeasurer and haven't yet measured a given index.\n\n\n          if (size === undefined || isNaN(size)) {\n            throw Error(\"Invalid size returned for cell \".concat(i, \" of value \").concat(size));\n          } else if (size === null) {\n            this._cellSizeAndPositionData[i] = {\n              offset: offset,\n              size: 0\n            };\n            this._lastBatchedIndex = index;\n          } else {\n            this._cellSizeAndPositionData[i] = {\n              offset: offset,\n              size: size\n            };\n            offset += size;\n            this._lastMeasuredIndex = index;\n          }\n        }\n      }\n\n      return this._cellSizeAndPositionData[index];\n    }\n  }, {\n    key: \"getSizeAndPositionOfLastMeasuredCell\",\n    value: function getSizeAndPositionOfLastMeasuredCell() {\n      return this._lastMeasuredIndex >= 0 ? this._cellSizeAndPositionData[this._lastMeasuredIndex] : {\n        offset: 0,\n        size: 0\n      };\n    }\n    /**\n     * Total size of all cells being measured.\n     * This value will be completely estimated initially.\n     * As cells are measured, the estimate will be updated.\n     */\n\n  }, {\n    key: \"getTotalSize\",\n    value: function getTotalSize() {\n      var lastMeasuredCellSizeAndPosition = this.getSizeAndPositionOfLastMeasuredCell();\n      var totalSizeOfMeasuredCells = lastMeasuredCellSizeAndPosition.offset + lastMeasuredCellSizeAndPosition.size;\n      var numUnmeasuredCells = this._cellCount - this._lastMeasuredIndex - 1;\n      var totalSizeOfUnmeasuredCells = numUnmeasuredCells * this._estimatedCellSize;\n      return totalSizeOfMeasuredCells + totalSizeOfUnmeasuredCells;\n    }\n    /**\n     * Determines a new offset that ensures a certain cell is visible, given the current offset.\n     * If the cell is already visible then the current offset will be returned.\n     * If the current offset is too great or small, it will be adjusted just enough to ensure the specified index is visible.\n     *\n     * @param align Desired alignment within container; one of \"auto\" (default), \"start\", or \"end\"\n     * @param containerSize Size (width or height) of the container viewport\n     * @param currentOffset Container's current (x or y) offset\n     * @param totalSize Total size (width or height) of all cells\n     * @return Offset to use to ensure the specified cell is visible\n     */\n\n  }, {\n    key: \"getUpdatedOffsetForIndex\",\n    value: function getUpdatedOffsetForIndex(_ref3) {\n      var _ref3$align = _ref3.align,\n          align = _ref3$align === void 0 ? 'auto' : _ref3$align,\n          containerSize = _ref3.containerSize,\n          currentOffset = _ref3.currentOffset,\n          targetIndex = _ref3.targetIndex;\n\n      if (containerSize <= 0) {\n        return 0;\n      }\n\n      var datum = this.getSizeAndPositionOfCell(targetIndex);\n      var maxOffset = datum.offset;\n      var minOffset = maxOffset - containerSize + datum.size;\n      var idealOffset;\n\n      switch (align) {\n        case 'start':\n          idealOffset = maxOffset;\n          break;\n\n        case 'end':\n          idealOffset = minOffset;\n          break;\n\n        case 'center':\n          idealOffset = maxOffset - (containerSize - datum.size) / 2;\n          break;\n\n        default:\n          idealOffset = Math.max(minOffset, Math.min(maxOffset, currentOffset));\n          break;\n      }\n\n      var totalSize = this.getTotalSize();\n      return Math.max(0, Math.min(totalSize - containerSize, idealOffset));\n    }\n  }, {\n    key: \"getVisibleCellRange\",\n    value: function getVisibleCellRange(params) {\n      var containerSize = params.containerSize,\n          offset = params.offset;\n      var totalSize = this.getTotalSize();\n\n      if (totalSize === 0) {\n        return {};\n      }\n\n      var maxOffset = offset + containerSize;\n\n      var start = this._findNearestCell(offset);\n\n      var datum = this.getSizeAndPositionOfCell(start);\n      offset = datum.offset + datum.size;\n      var stop = start;\n\n      while (offset < maxOffset && stop < this._cellCount - 1) {\n        stop++;\n        offset += this.getSizeAndPositionOfCell(stop).size;\n      }\n\n      return {\n        start: start,\n        stop: stop\n      };\n    }\n    /**\n     * Clear all cached values for cells after the specified index.\n     * This method should be called for any cell that has changed its size.\n     * It will not immediately perform any calculations; they'll be performed the next time getSizeAndPositionOfCell() is called.\n     */\n\n  }, {\n    key: \"resetCell\",\n    value: function resetCell(index) {\n      this._lastMeasuredIndex = Math.min(this._lastMeasuredIndex, index - 1);\n    }\n  }, {\n    key: \"_binarySearch\",\n    value: function _binarySearch(high, low, offset) {\n      while (low <= high) {\n        var middle = low + Math.floor((high - low) / 2);\n        var currentOffset = this.getSizeAndPositionOfCell(middle).offset;\n\n        if (currentOffset === offset) {\n          return middle;\n        } else if (currentOffset < offset) {\n          low = middle + 1;\n        } else if (currentOffset > offset) {\n          high = middle - 1;\n        }\n      }\n\n      if (low > 0) {\n        return low - 1;\n      } else {\n        return 0;\n      }\n    }\n  }, {\n    key: \"_exponentialSearch\",\n    value: function _exponentialSearch(index, offset) {\n      var interval = 1;\n\n      while (index < this._cellCount && this.getSizeAndPositionOfCell(index).offset < offset) {\n        index += interval;\n        interval *= 2;\n      }\n\n      return this._binarySearch(Math.min(index, this._cellCount - 1), Math.floor(index / 2), offset);\n    }\n    /**\n     * Searches for the cell (index) nearest the specified offset.\n     *\n     * If no exact match is found the next lowest cell index will be returned.\n     * This allows partially visible cells (with offsets just before/above the fold) to be visible.\n     */\n\n  }, {\n    key: \"_findNearestCell\",\n    value: function _findNearestCell(offset) {\n      if (isNaN(offset)) {\n        throw Error(\"Invalid offset \".concat(offset, \" specified\"));\n      } // Our search algorithms find the nearest match at or below the specified offset.\n      // So make sure the offset is at least 0 or no match will be found.\n\n\n      offset = Math.max(0, offset);\n      var lastMeasuredCellSizeAndPosition = this.getSizeAndPositionOfLastMeasuredCell();\n      var lastMeasuredIndex = Math.max(0, this._lastMeasuredIndex);\n\n      if (lastMeasuredCellSizeAndPosition.offset >= offset) {\n        // If we've already measured cells within this range just use a binary search as it's faster.\n        return this._binarySearch(lastMeasuredIndex, 0, offset);\n      } else {\n        // If we haven't yet measured this high, fallback to an exponential search with an inner binary search.\n        // The exponential search avoids pre-computing sizes for the full set of cells as a binary search would.\n        // The overall complexity for this approach is O(log n).\n        return this._exponentialSearch(lastMeasuredIndex, offset);\n      }\n    }\n  }]);\n  return CellSizeAndPositionManager;\n}();\n\nexports[\"default\"] = CellSizeAndPositionManager;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _CellSizeAndPositionManager = _interopRequireDefault(require(\"./CellSizeAndPositionManager\"));\n\nvar _maxElementSize = require(\"./maxElementSize.js\");\n\nvar _types = require(\"../types\");\n\n/**\n * Extends CellSizeAndPositionManager and adds scaling behavior for lists that are too large to fit within a browser's native limits.\n */\nvar ScalingCellSizeAndPositionManager =\n/*#__PURE__*/\nfunction () {\n  function ScalingCellSizeAndPositionManager(_ref) {\n    var _ref$maxScrollSize = _ref.maxScrollSize,\n        maxScrollSize = _ref$maxScrollSize === void 0 ? (0, _maxElementSize.getMaxElementSize)() : _ref$maxScrollSize,\n        params = (0, _objectWithoutProperties2[\"default\"])(_ref, [\"maxScrollSize\"]);\n    (0, _classCallCheck2[\"default\"])(this, ScalingCellSizeAndPositionManager);\n    (0, _defineProperty2[\"default\"])(this, \"_cellSizeAndPositionManager\", void 0);\n    (0, _defineProperty2[\"default\"])(this, \"_maxScrollSize\", void 0);\n    // Favor composition over inheritance to simplify IE10 support\n    this._cellSizeAndPositionManager = new _CellSizeAndPositionManager[\"default\"](params);\n    this._maxScrollSize = maxScrollSize;\n  }\n\n  (0, _createClass2[\"default\"])(ScalingCellSizeAndPositionManager, [{\n    key: \"areOffsetsAdjusted\",\n    value: function areOffsetsAdjusted() {\n      return this._cellSizeAndPositionManager.getTotalSize() > this._maxScrollSize;\n    }\n  }, {\n    key: \"configure\",\n    value: function configure(params) {\n      this._cellSizeAndPositionManager.configure(params);\n    }\n  }, {\n    key: \"getCellCount\",\n    value: function getCellCount() {\n      return this._cellSizeAndPositionManager.getCellCount();\n    }\n  }, {\n    key: \"getEstimatedCellSize\",\n    value: function getEstimatedCellSize() {\n      return this._cellSizeAndPositionManager.getEstimatedCellSize();\n    }\n  }, {\n    key: \"getLastMeasuredIndex\",\n    value: function getLastMeasuredIndex() {\n      return this._cellSizeAndPositionManager.getLastMeasuredIndex();\n    }\n    /**\n     * Number of pixels a cell at the given position (offset) should be shifted in order to fit within the scaled container.\n     * The offset passed to this function is scaled (safe) as well.\n     */\n\n  }, {\n    key: \"getOffsetAdjustment\",\n    value: function getOffsetAdjustment(_ref2) {\n      var containerSize = _ref2.containerSize,\n          offset = _ref2.offset;\n\n      var totalSize = this._cellSizeAndPositionManager.getTotalSize();\n\n      var safeTotalSize = this.getTotalSize();\n\n      var offsetPercentage = this._getOffsetPercentage({\n        containerSize: containerSize,\n        offset: offset,\n        totalSize: safeTotalSize\n      });\n\n      return Math.round(offsetPercentage * (safeTotalSize - totalSize));\n    }\n  }, {\n    key: \"getSizeAndPositionOfCell\",\n    value: function getSizeAndPositionOfCell(index) {\n      return this._cellSizeAndPositionManager.getSizeAndPositionOfCell(index);\n    }\n  }, {\n    key: \"getSizeAndPositionOfLastMeasuredCell\",\n    value: function getSizeAndPositionOfLastMeasuredCell() {\n      return this._cellSizeAndPositionManager.getSizeAndPositionOfLastMeasuredCell();\n    }\n    /** See CellSizeAndPositionManager#getTotalSize */\n\n  }, {\n    key: \"getTotalSize\",\n    value: function getTotalSize() {\n      return Math.min(this._maxScrollSize, this._cellSizeAndPositionManager.getTotalSize());\n    }\n    /** See CellSizeAndPositionManager#getUpdatedOffsetForIndex */\n\n  }, {\n    key: \"getUpdatedOffsetForIndex\",\n    value: function getUpdatedOffsetForIndex(_ref3) {\n      var _ref3$align = _ref3.align,\n          align = _ref3$align === void 0 ? 'auto' : _ref3$align,\n          containerSize = _ref3.containerSize,\n          currentOffset = _ref3.currentOffset,\n          targetIndex = _ref3.targetIndex;\n      currentOffset = this._safeOffsetToOffset({\n        containerSize: containerSize,\n        offset: currentOffset\n      });\n\n      var offset = this._cellSizeAndPositionManager.getUpdatedOffsetForIndex({\n        align: align,\n        containerSize: containerSize,\n        currentOffset: currentOffset,\n        targetIndex: targetIndex\n      });\n\n      return this._offsetToSafeOffset({\n        containerSize: containerSize,\n        offset: offset\n      });\n    }\n    /** See CellSizeAndPositionManager#getVisibleCellRange */\n\n  }, {\n    key: \"getVisibleCellRange\",\n    value: function getVisibleCellRange(_ref4) {\n      var containerSize = _ref4.containerSize,\n          offset = _ref4.offset;\n      offset = this._safeOffsetToOffset({\n        containerSize: containerSize,\n        offset: offset\n      });\n      return this._cellSizeAndPositionManager.getVisibleCellRange({\n        containerSize: containerSize,\n        offset: offset\n      });\n    }\n  }, {\n    key: \"resetCell\",\n    value: function resetCell(index) {\n      this._cellSizeAndPositionManager.resetCell(index);\n    }\n  }, {\n    key: \"_getOffsetPercentage\",\n    value: function _getOffsetPercentage(_ref5) {\n      var containerSize = _ref5.containerSize,\n          offset = _ref5.offset,\n          totalSize = _ref5.totalSize;\n      return totalSize <= containerSize ? 0 : offset / (totalSize - containerSize);\n    }\n  }, {\n    key: \"_offsetToSafeOffset\",\n    value: function _offsetToSafeOffset(_ref6) {\n      var containerSize = _ref6.containerSize,\n          offset = _ref6.offset;\n\n      var totalSize = this._cellSizeAndPositionManager.getTotalSize();\n\n      var safeTotalSize = this.getTotalSize();\n\n      if (totalSize === safeTotalSize) {\n        return offset;\n      } else {\n        var offsetPercentage = this._getOffsetPercentage({\n          containerSize: containerSize,\n          offset: offset,\n          totalSize: totalSize\n        });\n\n        return Math.round(offsetPercentage * (safeTotalSize - containerSize));\n      }\n    }\n  }, {\n    key: \"_safeOffsetToOffset\",\n    value: function _safeOffsetToOffset(_ref7) {\n      var containerSize = _ref7.containerSize,\n          offset = _ref7.offset;\n\n      var totalSize = this._cellSizeAndPositionManager.getTotalSize();\n\n      var safeTotalSize = this.getTotalSize();\n\n      if (totalSize === safeTotalSize) {\n        return offset;\n      } else {\n        var offsetPercentage = this._getOffsetPercentage({\n          containerSize: containerSize,\n          offset: offset,\n          totalSize: safeTotalSize\n        });\n\n        return Math.round(offsetPercentage * (totalSize - containerSize));\n      }\n    }\n  }]);\n  return ScalingCellSizeAndPositionManager;\n}();\n\nexports[\"default\"] = ScalingCellSizeAndPositionManager;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = calculateSizeAndPositionDataAndUpdateScrollOffset;\n\n/**\n * Helper method that determines when to recalculate row or column metadata.\n */\nfunction calculateSizeAndPositionDataAndUpdateScrollOffset(_ref) {\n  var cellCount = _ref.cellCount,\n      cellSize = _ref.cellSize,\n      computeMetadataCallback = _ref.computeMetadataCallback,\n      computeMetadataCallbackProps = _ref.computeMetadataCallbackProps,\n      nextCellsCount = _ref.nextCellsCount,\n      nextCellSize = _ref.nextCellSize,\n      nextScrollToIndex = _ref.nextScrollToIndex,\n      scrollToIndex = _ref.scrollToIndex,\n      updateScrollOffsetForScrollToIndex = _ref.updateScrollOffsetForScrollToIndex;\n\n  // Don't compare cell sizes if they are functions because inline functions would cause infinite loops.\n  // In that event users should use the manual recompute methods to inform of changes.\n  if (cellCount !== nextCellsCount || (typeof cellSize === 'number' || typeof nextCellSize === 'number') && cellSize !== nextCellSize) {\n    computeMetadataCallback(computeMetadataCallbackProps); // Updated cell metadata may have hidden the previous scrolled-to item.\n    // In this case we should also update the scrollTop to ensure it stays visible.\n\n    if (scrollToIndex >= 0 && scrollToIndex === nextScrollToIndex) {\n      updateScrollOffsetForScrollToIndex();\n    }\n  }\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getMaxElementSize = void 0;\nvar DEFAULT_MAX_ELEMENT_SIZE = 1500000;\nvar CHROME_MAX_ELEMENT_SIZE = 1.67771e7;\n\nvar isBrowser = function isBrowser() {\n  return typeof window !== 'undefined';\n};\n\nvar isChrome = function isChrome() {\n  return !!window.chrome;\n};\n\nvar getMaxElementSize = function getMaxElementSize() {\n  if (isBrowser()) {\n    if (isChrome()) {\n      return CHROME_MAX_ELEMENT_SIZE;\n    }\n  }\n\n  return DEFAULT_MAX_ELEMENT_SIZE;\n};\n\nexports.getMaxElementSize = getMaxElementSize;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = updateScrollIndexHelper;\n\nvar _ScalingCellSizeAndPositionManager = _interopRequireDefault(require(\"./ScalingCellSizeAndPositionManager.js\"));\n\nvar _types = require(\"../types\");\n\nfunction updateScrollIndexHelper(_ref) {\n  var cellSize = _ref.cellSize,\n      cellSizeAndPositionManager = _ref.cellSizeAndPositionManager,\n      previousCellsCount = _ref.previousCellsCount,\n      previousCellSize = _ref.previousCellSize,\n      previousScrollToAlignment = _ref.previousScrollToAlignment,\n      previousScrollToIndex = _ref.previousScrollToIndex,\n      previousSize = _ref.previousSize,\n      scrollOffset = _ref.scrollOffset,\n      scrollToAlignment = _ref.scrollToAlignment,\n      scrollToIndex = _ref.scrollToIndex,\n      size = _ref.size,\n      sizeJustIncreasedFromZero = _ref.sizeJustIncreasedFromZero,\n      updateScrollIndexCallback = _ref.updateScrollIndexCallback;\n  var cellCount = cellSizeAndPositionManager.getCellCount();\n  var hasScrollToIndex = scrollToIndex >= 0 && scrollToIndex < cellCount;\n  var sizeHasChanged = size !== previousSize || sizeJustIncreasedFromZero || !previousCellSize || typeof cellSize === 'number' && cellSize !== previousCellSize; // If we have a new scroll target OR if height/row-height has changed,\n  // We should ensure that the scroll target is visible.\n\n  if (hasScrollToIndex && (sizeHasChanged || scrollToAlignment !== previousScrollToAlignment || scrollToIndex !== previousScrollToIndex)) {\n    updateScrollIndexCallback(scrollToIndex); // If we don't have a selected item but list size or number of children have decreased,\n    // Make sure we aren't scrolled too far past the current content.\n  } else if (!hasScrollToIndex && cellCount > 0 && (size < previousSize || cellCount < previousCellsCount)) {\n    // We need to ensure that the current scroll offset is still within the collection's range.\n    // To do this, we don't need to measure everything; CellMeasurer would perform poorly.\n    // Just check to make sure we're still okay.\n    // Only adjust the scroll position if we've scrolled below the last set of rows.\n    if (scrollOffset > cellSizeAndPositionManager.getTotalSize() - size) {\n      updateScrollIndexCallback(cellCount - 1);\n    }\n  }\n}","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf3 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _Grid = _interopRequireWildcard(require(\"../Grid\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _clsx = _interopRequireDefault(require(\"clsx\"));\n\nvar _types = require(\"./types\");\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _class, _temp;\n\nvar List = (_temp = _class =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  (0, _inherits2[\"default\"])(List, _React$PureComponent);\n\n  function List() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    (0, _classCallCheck2[\"default\"])(this, List);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = (0, _possibleConstructorReturn2[\"default\"])(this, (_getPrototypeOf2 = (0, _getPrototypeOf3[\"default\"])(List)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"Grid\", void 0);\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"_cellRenderer\", function (_ref) {\n      var parent = _ref.parent,\n          rowIndex = _ref.rowIndex,\n          style = _ref.style,\n          isScrolling = _ref.isScrolling,\n          isVisible = _ref.isVisible,\n          key = _ref.key;\n      var rowRenderer = _this.props.rowRenderer; // TRICKY The style object is sometimes cached by Grid.\n      // This prevents new style objects from bypassing shallowCompare().\n      // However as of React 16, style props are auto-frozen (at least in dev mode)\n      // Check to make sure we can still modify the style before proceeding.\n      // https://github.com/facebook/react/commit/977357765b44af8ff0cfea327866861073095c12#commitcomment-20648713\n\n      var widthDescriptor = Object.getOwnPropertyDescriptor(style, 'width');\n\n      if (widthDescriptor && widthDescriptor.writable) {\n        // By default, List cells should be 100% width.\n        // This prevents them from flowing under a scrollbar (if present).\n        style.width = '100%';\n      }\n\n      return rowRenderer({\n        index: rowIndex,\n        style: style,\n        isScrolling: isScrolling,\n        isVisible: isVisible,\n        key: key,\n        parent: parent\n      });\n    });\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"_setRef\", function (ref) {\n      _this.Grid = ref;\n    });\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"_onScroll\", function (_ref2) {\n      var clientHeight = _ref2.clientHeight,\n          scrollHeight = _ref2.scrollHeight,\n          scrollTop = _ref2.scrollTop;\n      var onScroll = _this.props.onScroll;\n      onScroll({\n        clientHeight: clientHeight,\n        scrollHeight: scrollHeight,\n        scrollTop: scrollTop\n      });\n    });\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"_onSectionRendered\", function (_ref3) {\n      var rowOverscanStartIndex = _ref3.rowOverscanStartIndex,\n          rowOverscanStopIndex = _ref3.rowOverscanStopIndex,\n          rowStartIndex = _ref3.rowStartIndex,\n          rowStopIndex = _ref3.rowStopIndex;\n      var onRowsRendered = _this.props.onRowsRendered;\n      onRowsRendered({\n        overscanStartIndex: rowOverscanStartIndex,\n        overscanStopIndex: rowOverscanStopIndex,\n        startIndex: rowStartIndex,\n        stopIndex: rowStopIndex\n      });\n    });\n    return _this;\n  }\n\n  (0, _createClass2[\"default\"])(List, [{\n    key: \"forceUpdateGrid\",\n    value: function forceUpdateGrid() {\n      if (this.Grid) {\n        this.Grid.forceUpdate();\n      }\n    }\n    /** See Grid#getOffsetForCell */\n\n  }, {\n    key: \"getOffsetForRow\",\n    value: function getOffsetForRow(_ref4) {\n      var alignment = _ref4.alignment,\n          index = _ref4.index;\n\n      if (this.Grid) {\n        var _this$Grid$getOffsetF = this.Grid.getOffsetForCell({\n          alignment: alignment,\n          rowIndex: index,\n          columnIndex: 0\n        }),\n            scrollTop = _this$Grid$getOffsetF.scrollTop;\n\n        return scrollTop;\n      }\n\n      return 0;\n    }\n    /** CellMeasurer compatibility */\n\n  }, {\n    key: \"invalidateCellSizeAfterRender\",\n    value: function invalidateCellSizeAfterRender(_ref5) {\n      var columnIndex = _ref5.columnIndex,\n          rowIndex = _ref5.rowIndex;\n\n      if (this.Grid) {\n        this.Grid.invalidateCellSizeAfterRender({\n          rowIndex: rowIndex,\n          columnIndex: columnIndex\n        });\n      }\n    }\n    /** See Grid#measureAllCells */\n\n  }, {\n    key: \"measureAllRows\",\n    value: function measureAllRows() {\n      if (this.Grid) {\n        this.Grid.measureAllCells();\n      }\n    }\n    /** CellMeasurer compatibility */\n\n  }, {\n    key: \"recomputeGridSize\",\n    value: function recomputeGridSize() {\n      var _ref6 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          _ref6$columnIndex = _ref6.columnIndex,\n          columnIndex = _ref6$columnIndex === void 0 ? 0 : _ref6$columnIndex,\n          _ref6$rowIndex = _ref6.rowIndex,\n          rowIndex = _ref6$rowIndex === void 0 ? 0 : _ref6$rowIndex;\n\n      if (this.Grid) {\n        this.Grid.recomputeGridSize({\n          rowIndex: rowIndex,\n          columnIndex: columnIndex\n        });\n      }\n    }\n    /** See Grid#recomputeGridSize */\n\n  }, {\n    key: \"recomputeRowHeights\",\n    value: function recomputeRowHeights() {\n      var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n      if (this.Grid) {\n        this.Grid.recomputeGridSize({\n          rowIndex: index,\n          columnIndex: 0\n        });\n      }\n    }\n    /** See Grid#scrollToPosition */\n\n  }, {\n    key: \"scrollToPosition\",\n    value: function scrollToPosition() {\n      var scrollTop = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n      if (this.Grid) {\n        this.Grid.scrollToPosition({\n          scrollTop: scrollTop\n        });\n      }\n    }\n    /** See Grid#scrollToCell */\n\n  }, {\n    key: \"scrollToRow\",\n    value: function scrollToRow() {\n      var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n      if (this.Grid) {\n        this.Grid.scrollToCell({\n          columnIndex: 0,\n          rowIndex: index\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          className = _this$props.className,\n          noRowsRenderer = _this$props.noRowsRenderer,\n          scrollToIndex = _this$props.scrollToIndex,\n          width = _this$props.width;\n      var classNames = (0, _clsx[\"default\"])('ReactVirtualized__List', className);\n      return React.createElement(_Grid[\"default\"], (0, _extends2[\"default\"])({}, this.props, {\n        autoContainerWidth: true,\n        cellRenderer: this._cellRenderer,\n        className: classNames,\n        columnWidth: width,\n        columnCount: 1,\n        noContentRenderer: noRowsRenderer,\n        onScroll: this._onScroll,\n        onSectionRendered: this._onSectionRendered,\n        ref: this._setRef,\n        scrollToRow: scrollToIndex\n      }));\n    }\n  }]);\n  return List;\n}(React.PureComponent), (0, _defineProperty2[\"default\"])(_class, \"propTypes\", process.env.NODE_ENV === 'production' ? null : {\n  \"aria-label\": _propTypes[\"default\"].string,\n\n  /**\n   * Removes fixed height from the scrollingContainer so that the total height\n   * of rows can stretch the window. Intended for use with WindowScroller\n   */\n  \"autoHeight\": _propTypes[\"default\"].bool.isRequired,\n\n  /** Optional CSS class name */\n  \"className\": _propTypes[\"default\"].string,\n\n  /**\n   * Used to estimate the total height of a List before all of its rows have actually been measured.\n   * The estimated total height is adjusted as rows are rendered.\n   */\n  \"estimatedRowSize\": _propTypes[\"default\"].number.isRequired,\n\n  /** Height constraint for list (determines how many actual rows are rendered) */\n  \"height\": _propTypes[\"default\"].number.isRequired,\n\n  /** Optional renderer to be used in place of rows when rowCount is 0 */\n  \"noRowsRenderer\": function noRowsRenderer() {\n    return (typeof _Grid.bpfrpt_proptype_NoContentRenderer === \"function\" ? _Grid.bpfrpt_proptype_NoContentRenderer.isRequired ? _Grid.bpfrpt_proptype_NoContentRenderer.isRequired : _Grid.bpfrpt_proptype_NoContentRenderer : _propTypes[\"default\"].shape(_Grid.bpfrpt_proptype_NoContentRenderer).isRequired).apply(this, arguments);\n  },\n\n  /** Callback invoked with information about the slice of rows that were just rendered.  */\n  \"onRowsRendered\": _propTypes[\"default\"].func.isRequired,\n\n  /**\n   * Callback invoked whenever the scroll offset changes within the inner scrollable region.\n   * This callback can be used to sync scrolling between lists, tables, or grids.\n   */\n  \"onScroll\": _propTypes[\"default\"].func.isRequired,\n\n  /** See Grid#overscanIndicesGetter */\n  \"overscanIndicesGetter\": function overscanIndicesGetter() {\n    return (typeof _Grid.bpfrpt_proptype_OverscanIndicesGetter === \"function\" ? _Grid.bpfrpt_proptype_OverscanIndicesGetter.isRequired ? _Grid.bpfrpt_proptype_OverscanIndicesGetter.isRequired : _Grid.bpfrpt_proptype_OverscanIndicesGetter : _propTypes[\"default\"].shape(_Grid.bpfrpt_proptype_OverscanIndicesGetter).isRequired).apply(this, arguments);\n  },\n\n  /**\n   * Number of rows to render above/below the visible bounds of the list.\n   * These rows can help for smoother scrolling on touch devices.\n   */\n  \"overscanRowCount\": _propTypes[\"default\"].number.isRequired,\n\n  /** Either a fixed row height (number) or a function that returns the height of a row given its index.  */\n  \"rowHeight\": function rowHeight() {\n    return (typeof _Grid.bpfrpt_proptype_CellSize === \"function\" ? _Grid.bpfrpt_proptype_CellSize.isRequired ? _Grid.bpfrpt_proptype_CellSize.isRequired : _Grid.bpfrpt_proptype_CellSize : _propTypes[\"default\"].shape(_Grid.bpfrpt_proptype_CellSize).isRequired).apply(this, arguments);\n  },\n\n  /** Responsible for rendering a row given an index; ({ index: number }): node */\n  \"rowRenderer\": function rowRenderer() {\n    return (typeof _types.bpfrpt_proptype_RowRenderer === \"function\" ? _types.bpfrpt_proptype_RowRenderer.isRequired ? _types.bpfrpt_proptype_RowRenderer.isRequired : _types.bpfrpt_proptype_RowRenderer : _propTypes[\"default\"].shape(_types.bpfrpt_proptype_RowRenderer).isRequired).apply(this, arguments);\n  },\n\n  /** Number of rows in list. */\n  \"rowCount\": _propTypes[\"default\"].number.isRequired,\n\n  /** See Grid#scrollToAlignment */\n  \"scrollToAlignment\": function scrollToAlignment() {\n    return (typeof _Grid.bpfrpt_proptype_Alignment === \"function\" ? _Grid.bpfrpt_proptype_Alignment.isRequired ? _Grid.bpfrpt_proptype_Alignment.isRequired : _Grid.bpfrpt_proptype_Alignment : _propTypes[\"default\"].shape(_Grid.bpfrpt_proptype_Alignment).isRequired).apply(this, arguments);\n  },\n\n  /** Row index to ensure visible (by forcefully scrolling if necessary) */\n  \"scrollToIndex\": _propTypes[\"default\"].number.isRequired,\n\n  /** Vertical offset. */\n  \"scrollTop\": _propTypes[\"default\"].number,\n\n  /** Optional inline style */\n  \"style\": _propTypes[\"default\"].object.isRequired,\n\n  /** Tab index for focus */\n  \"tabIndex\": _propTypes[\"default\"].number,\n\n  /** Width of list */\n  \"width\": _propTypes[\"default\"].number.isRequired\n}), _temp);\nexports[\"default\"] = List;\n(0, _defineProperty2[\"default\"])(List, \"defaultProps\", {\n  autoHeight: false,\n  estimatedRowSize: 30,\n  onScroll: function onScroll() {},\n  noRowsRenderer: function noRowsRenderer() {\n    return null;\n  },\n  onRowsRendered: function onRowsRendered() {},\n  overscanIndicesGetter: _Grid.accessibilityOverscanIndicesGetter,\n  overscanRowCount: 10,\n  scrollToAlignment: 'auto',\n  scrollToIndex: -1,\n  style: {}\n});","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"default\", {\n  enumerable: true,\n  get: function get() {\n    return _List[\"default\"];\n  }\n});\nObject.defineProperty(exports, \"List\", {\n  enumerable: true,\n  get: function get() {\n    return _List[\"default\"];\n  }\n});\nObject.defineProperty(exports, \"bpfrpt_proptype_RowRendererParams\", {\n  enumerable: true,\n  get: function get() {\n    return _types.bpfrpt_proptype_RowRendererParams;\n  }\n});\n\nvar _List = _interopRequireDefault(require(\"./List\"));\n\nvar _types = require(\"./types\");","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.bpfrpt_proptype_Scroll = exports.bpfrpt_proptype_RenderedRows = exports.bpfrpt_proptype_RowRenderer = exports.bpfrpt_proptype_RowRendererParams = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar bpfrpt_proptype_RowRendererParams = process.env.NODE_ENV === 'production' ? null : {\n  \"index\": _propTypes[\"default\"].number.isRequired,\n  \"isScrolling\": _propTypes[\"default\"].bool.isRequired,\n  \"isVisible\": _propTypes[\"default\"].bool.isRequired,\n  \"key\": _propTypes[\"default\"].string.isRequired,\n  \"parent\": _propTypes[\"default\"].object.isRequired,\n  \"style\": _propTypes[\"default\"].object.isRequired\n};\nexports.bpfrpt_proptype_RowRendererParams = bpfrpt_proptype_RowRendererParams;\nvar bpfrpt_proptype_RowRenderer = process.env.NODE_ENV === 'production' ? null : _propTypes[\"default\"].func;\nexports.bpfrpt_proptype_RowRenderer = bpfrpt_proptype_RowRenderer;\nvar bpfrpt_proptype_RenderedRows = process.env.NODE_ENV === 'production' ? null : {\n  \"overscanStartIndex\": _propTypes[\"default\"].number.isRequired,\n  \"overscanStopIndex\": _propTypes[\"default\"].number.isRequired,\n  \"startIndex\": _propTypes[\"default\"].number.isRequired,\n  \"stopIndex\": _propTypes[\"default\"].number.isRequired\n};\nexports.bpfrpt_proptype_RenderedRows = bpfrpt_proptype_RenderedRows;\nvar bpfrpt_proptype_Scroll = process.env.NODE_ENV === 'production' ? null : {\n  \"clientHeight\": _propTypes[\"default\"].number.isRequired,\n  \"scrollHeight\": _propTypes[\"default\"].number.isRequired,\n  \"scrollTop\": _propTypes[\"default\"].number.isRequired\n};\nexports.bpfrpt_proptype_Scroll = bpfrpt_proptype_Scroll;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.caf = exports.raf = void 0;\n// Properly handle server-side rendering.\nvar win;\n\nif (typeof window !== 'undefined') {\n  win = window;\n} else if (typeof self !== 'undefined') {\n  win = self;\n} else {\n  win = {};\n} // requestAnimationFrame() shim by Paul Irish\n// http://paulirish.com/2011/requestanimationframe-for-smart-animating/\n\n\nvar request = win.requestAnimationFrame || win.webkitRequestAnimationFrame || win.mozRequestAnimationFrame || win.oRequestAnimationFrame || win.msRequestAnimationFrame || function (callback) {\n  return win.setTimeout(callback, 1000 / 60);\n};\n\nvar cancel = win.cancelAnimationFrame || win.webkitCancelAnimationFrame || win.mozCancelAnimationFrame || win.oCancelAnimationFrame || win.msCancelAnimationFrame || function (id) {\n  win.clearTimeout(id);\n};\n\nvar raf = request;\nexports.raf = raf;\nvar caf = cancel;\nexports.caf = caf;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = createCallbackMemoizer;\n\n/**\n * Helper utility that updates the specified callback whenever any of the specified indices have changed.\n */\nfunction createCallbackMemoizer() {\n  var requireAllKeys = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n  var cachedIndices = {};\n  return function (_ref) {\n    var callback = _ref.callback,\n        indices = _ref.indices;\n    var keys = Object.keys(indices);\n    var allInitialized = !requireAllKeys || keys.every(function (key) {\n      var value = indices[key];\n      return Array.isArray(value) ? value.length > 0 : value >= 0;\n    });\n    var indexChanged = keys.length !== Object.keys(cachedIndices).length || keys.some(function (key) {\n      var cachedValue = cachedIndices[key];\n      var value = indices[key];\n      return Array.isArray(value) ? cachedValue.join(',') !== value.join(',') : cachedValue !== value;\n    });\n    cachedIndices = indices;\n\n    if (allInitialized && indexChanged) {\n      callback(indices);\n    }\n  };\n}","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.bpfrpt_proptype_AnimationTimeoutId = exports.requestAnimationTimeout = exports.cancelAnimationTimeout = void 0;\n\nvar _animationFrame = require(\"./animationFrame\");\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar bpfrpt_proptype_AnimationTimeoutId = process.env.NODE_ENV === 'production' ? null : {\n  \"id\": _propTypes[\"default\"].number.isRequired\n};\nexports.bpfrpt_proptype_AnimationTimeoutId = bpfrpt_proptype_AnimationTimeoutId;\n\nvar cancelAnimationTimeout = function cancelAnimationTimeout(frame) {\n  return (0, _animationFrame.caf)(frame.id);\n};\n/**\n * Recursively calls requestAnimationFrame until a specified delay has been met or exceeded.\n * When the delay time has been reached the function you're timing out will be called.\n *\n * Credit: Joe Lambert (https://gist.github.com/joelambert/1002116#file-requesttimeout-js)\n */\n\n\nexports.cancelAnimationTimeout = cancelAnimationTimeout;\n\nvar requestAnimationTimeout = function requestAnimationTimeout(callback, delay) {\n  var start; // wait for end of processing current event handler, because event handler may be long\n\n  Promise.resolve().then(function () {\n    start = Date.now();\n  });\n\n  var timeout = function timeout() {\n    if (Date.now() - start >= delay) {\n      callback.call();\n    } else {\n      frame.id = (0, _animationFrame.raf)(timeout);\n    }\n  };\n\n  var frame = {\n    id: (0, _animationFrame.raf)(timeout)\n  };\n  return frame;\n};\n\nexports.requestAnimationTimeout = requestAnimationTimeout;","\nmodule.exports = function () {\n  var selection = document.getSelection();\n  if (!selection.rangeCount) {\n    return function () {};\n  }\n  var active = document.activeElement;\n\n  var ranges = [];\n  for (var i = 0; i < selection.rangeCount; i++) {\n    ranges.push(selection.getRangeAt(i));\n  }\n\n  switch (active.tagName.toUpperCase()) { // .toUpperCase handles XHTML\n    case 'INPUT':\n    case 'TEXTAREA':\n      active.blur();\n      break;\n\n    default:\n      active = null;\n      break;\n  }\n\n  selection.removeAllRanges();\n  return function () {\n    selection.type === 'Caret' &&\n    selection.removeAllRanges();\n\n    if (!selection.rangeCount) {\n      ranges.forEach(function(range) {\n        selection.addRange(range);\n      });\n    }\n\n    active &&\n    active.focus();\n  };\n};\n","function _extends() {\n  module.exports = _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  return _extends.apply(this, arguments);\n}\nmodule.exports = _extends, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var objectWithoutPropertiesLoose = require(\"./objectWithoutPropertiesLoose.js\");\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nmodule.exports = _objectWithoutProperties, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nmodule.exports = _objectWithoutPropertiesLoose, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}"],"names":["r","e","t","f","n","Array","isArray","length","clsx","arguments","deselectCurrent","require","clipboardToIE11Formatting","module","exports","text","options","debug","message","reselectPrevious","range","selection","mark","success","document","createRange","getSelection","createElement","textContent","ariaHidden","style","all","position","top","clip","whiteSpace","webkitUserSelect","MozUserSelect","msUserSelect","userSelect","addEventListener","stopPropagation","format","preventDefault","clipboardData","console","warn","window","clearData","setData","onCopy","body","appendChild","selectNodeContents","addRange","execCommand","Error","err","error","copyKey","test","navigator","userAgent","replace","prompt","removeRange","removeAllRanges","removeChild","size","scrollbarSize","recalc","canUseDOM","scrollDiv","width","height","overflow","offsetWidth","clientWidth","componentWillMount","state","this","constructor","getDerivedStateFromProps","props","undefined","setState","componentWillReceiveProps","nextProps","prevState","bind","componentWillUpdate","nextState","prevProps","__reactInternalSnapshotFlag","__reactInternalSnapshot","getSnapshotBeforeUpdate","polyfill","Component","prototype","isReactComponent","foundWillMountName","foundWillReceivePropsName","foundWillUpdateName","UNSAFE_componentWillMount","UNSAFE_componentWillReceiveProps","UNSAFE_componentWillUpdate","componentName","displayName","name","newApiName","componentDidUpdate","maybeSnapshot","snapshot","call","__suppressDeprecationWarning","_interopRequireDefault","_interopRequireWildcard","Object","defineProperty","value","DEFAULT_SCROLLING_RESET_TIME_INTERVAL","_class","_temp","_extends2","_classCallCheck2","_createClass2","_possibleConstructorReturn2","_getPrototypeOf2","_assertThisInitialized2","_inherits2","_defineProperty2","React","_clsx","_calculateSizeAndPositionDataAndUpdateScrollOffset","_ScalingCellSizeAndPositionManager","_createCallbackMemoizer","_defaultOverscanIndicesGetter","_updateScrollIndexHelper","_defaultCellRangeRenderer","_scrollbarSize","_reactLifecyclesCompat","_requestAnimationTimeout","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","source","forEach","key","getOwnPropertyDescriptors","defineProperties","SCROLL_POSITION_CHANGE_REASONS","Grid","_React$PureComponent","_this","_disablePointerEventsTimeoutId","isScrolling","needToResetStyleCache","onSectionRendered","_onGridRenderedMemoizer","callback","indices","columnOverscanStartIndex","_columnStartIndex","columnOverscanStopIndex","_columnStopIndex","columnStartIndex","_renderedColumnStartIndex","columnStopIndex","_renderedColumnStopIndex","rowOverscanStartIndex","_rowStartIndex","rowOverscanStopIndex","_rowStopIndex","rowStartIndex","_renderedRowStartIndex","rowStopIndex","_renderedRowStopIndex","ref","_scrollingContainer","event","handleScrollEvent","columnSizeAndPositionManager","cellCount","columnCount","cellSizeGetter","params","_wrapSizeGetter","columnWidth","estimatedCellSize","_getEstimatedColumnSize","rowSizeAndPositionManager","rowCount","rowHeight","_getEstimatedRowSize","instanceProps","prevColumnWidth","prevRowHeight","prevColumnCount","prevRowCount","prevIsScrolling","prevScrollToColumn","scrollToColumn","prevScrollToRow","scrollToRow","scrollbarSizeMeasured","scrollDirectionHorizontal","SCROLL_DIRECTION_FORWARD","scrollDirectionVertical","scrollLeft","scrollTop","scrollPositionChangeReason","_initialScrollTop","_getCalculatedScrollTop","_initialScrollLeft","_getCalculatedScrollLeft","_ref","_ref$alignment","alignment","scrollToAlignment","_ref$columnIndex","columnIndex","_ref$rowIndex","rowIndex","offsetProps","getTotalSize","_ref2","_ref2$scrollLeft","scrollLeftParam","_ref2$scrollTop","scrollTopParam","_debounceScrollEnded","_this$props","autoHeight","autoWidth","totalRowsHeight","totalColumnsWidth","Math","min","max","newState","SCROLL_DIRECTION_BACKWARD","_invokeOnScrollMemoizer","_ref3","_deferredInvalidateColumnIndex","_deferredInvalidateRowIndex","_this$props2","getSizeAndPositionOfCell","_ref4","_ref4$columnIndex","_ref4$rowIndex","_this$props3","resetCell","_recomputeScrollLeftFlag","_recomputeScrollTopFlag","_styleCache","_cellCache","forceUpdate","_ref5","_updateScrollLeftForScrollToColumn","_updateScrollTopForScrollToRow","_this$props4","getScrollbarSize","_handleInvalidatedGridSize","stateUpdate","_getScrollToPositionStateUpdate","sizeIsBiggerThanZero","_invokeOnGridRenderedHelper","_maybeCallOnScrollbarPresenceChange","_this2","_this$props5","_this$state","columnOrRowCountJustIncreasedFromZero","sizeJustIncreasedFromZero","cellSizeAndPositionManager","previousCellsCount","previousCellSize","previousScrollToAlignment","previousScrollToIndex","previousSize","scrollOffset","scrollToIndex","updateScrollIndexCallback","cancelAnimationTimeout","_this$props6","autoContainerWidth","className","containerProps","containerRole","containerStyle","id","noContentRenderer","role","tabIndex","_this$state2","_isScrolling","gridStyle","boxSizing","direction","WebkitOverflowScrolling","willChange","_resetStyleCache","_calculateChildrenToRender","verticalScrollBarSize","horizontalScrollBarSize","_horizontalScrollBarSize","_verticalScrollBarSize","_scrollbarPresenceChanged","overflowX","overflowY","childrenToDisplay","_childrenToDisplay","showNoContentRenderer","_setScrollingContainerRef","onScroll","_onScroll","maxWidth","maxHeight","pointerEvents","cellRenderer","cellRangeRenderer","deferredMeasurementCache","overscanColumnCount","overscanIndicesGetter","overscanRowCount","isScrollingOptOut","visibleColumnIndices","getVisibleCellRange","containerSize","offset","visibleRowIndices","horizontalOffsetAdjustment","getOffsetAdjustment","verticalOffsetAdjustment","start","stop","overscanColumnIndices","overscanCellsCount","scrollDirection","startIndex","stopIndex","overscanRowIndices","overscanStartIndex","overscanStopIndex","hasFixedHeight","has","hasFixedWidth","cellCache","parent","styleCache","scrollingResetTimeInterval","requestAnimationTimeout","_debounceScrollEndedCallback","recomputeGridSize","_ref6","_this3","_onScrollMemoizer","_ref7","_this3$props","clientHeight","scrollHeight","scrollWidth","hasOwnProperty","Boolean","onScrollbarPresenceChange","horizontal","vertical","_ref8","_getScrollLeftForScrollToColumnStateUpdate","concat","_getScrollTopForScrollToRowStateUpdate","assign","maybeStateA","maybeStateB","configure","cellSize","computeMetadataCallback","computeMetadataCallbackProps","nextCellsCount","nextCellSize","nextScrollToIndex","updateScrollOffsetForScrollToIndex","estimatedColumnSize","estimatedRowSize","_ref9","finalColumn","targetIndex","scrollBarSize","getUpdatedOffsetForIndex","align","currentOffset","calculatedScrollLeft","finalRow","calculatedScrollTop","PureComponent","_default","SCROLL_DIRECTION_VERTICAL","SCROLL_DIRECTION_HORIZONTAL","renderedCells","areOffsetsAdjusted","canCacheStyle","rowDatum","columnDatum","isVisible","left","cellRendererParams","renderedCell","get","_Grid","_accessibilityOverscanIndicesGetter","_types","bpfrpt_proptype_NoContentRenderer","bpfrpt_proptype_Alignment","bpfrpt_proptype_CellPosition","bpfrpt_proptype_CellSize","bpfrpt_proptype_OverscanIndicesGetter","bpfrpt_proptype_RenderedSection","bpfrpt_proptype_CellRendererParams","bpfrpt_proptype_Scroll","bpfrpt_proptype_VisibleCellRange","bpfrpt_proptype_OverscanIndices","bpfrpt_proptype_OverscanIndicesGetterParams","bpfrpt_proptype_ScrollbarPresenceChange","bpfrpt_proptype_CellSizeGetter","bpfrpt_proptype_CellRangeRenderer","bpfrpt_proptype_CellRangeRendererParams","bpfrpt_proptype_StyleCache","bpfrpt_proptype_CellCache","bpfrpt_proptype_CellRenderer","CellSizeAndPositionManager","_cellSizeGetter","_cellCount","_estimatedCellSize","_lastMeasuredIndex","index","lastMeasuredCellSizeAndPosition","getSizeAndPositionOfLastMeasuredCell","isNaN","_cellSizeAndPositionData","_lastBatchedIndex","_ref3$align","idealOffset","datum","maxOffset","minOffset","totalSize","_findNearestCell","high","low","middle","floor","interval","_binarySearch","lastMeasuredIndex","_exponentialSearch","_objectWithoutProperties2","_CellSizeAndPositionManager","_maxElementSize","ScalingCellSizeAndPositionManager","_ref$maxScrollSize","maxScrollSize","getMaxElementSize","_cellSizeAndPositionManager","_maxScrollSize","getCellCount","getEstimatedCellSize","getLastMeasuredIndex","safeTotalSize","offsetPercentage","_getOffsetPercentage","round","_safeOffsetToOffset","_offsetToSafeOffset","chrome","hasScrollToIndex","sizeHasChanged","_getPrototypeOf3","List","_len","args","_key","rowRenderer","widthDescriptor","writable","onRowsRendered","getOffsetForCell","invalidateCellSizeAfterRender","measureAllCells","_ref6$columnIndex","_ref6$rowIndex","scrollToPosition","scrollToCell","noRowsRenderer","classNames","_cellRenderer","_onSectionRendered","_setRef","accessibilityOverscanIndicesGetter","_List","bpfrpt_proptype_RenderedRows","bpfrpt_proptype_RowRenderer","bpfrpt_proptype_RowRendererParams","win","caf","raf","request","self","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","oRequestAnimationFrame","msRequestAnimationFrame","setTimeout","cancel","cancelAnimationFrame","webkitCancelAnimationFrame","mozCancelAnimationFrame","oCancelAnimationFrame","msCancelAnimationFrame","clearTimeout","requireAllKeys","cachedIndices","allInitialized","every","indexChanged","some","cachedValue","join","bpfrpt_proptype_AnimationTimeoutId","_animationFrame","frame","delay","Promise","resolve","then","Date","now","timeout","rangeCount","active","activeElement","ranges","getRangeAt","tagName","toUpperCase","blur","type","focus","_extends","__esModule","objectWithoutPropertiesLoose","excluded","sourceSymbolKeys","indexOf","propertyIsEnumerable","sourceKeys","_objectWithoutProperties","_objectWithoutPropertiesLoose"],"sourceRoot":""}