{"version":3,"file":"static/js/687.60b03d5a.chunk.js","mappings":"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","sources":["common/static/utils/utils.js","common/utils/commonUtils.js","common/utils/localStorageUtils.js","common/utils/staticDataUtils.js","common/web-workers/worker.js","common/settings/constants.js","common/utils/dateUtils.js","common/utils/lazyLoadUtils.js","common/utils/objectUtils.js","components/organisms/home/desktop/desktop-header/utils/utils.js","components/organisms/home/home-page/constants/constants.js","components/organisms/home/home-page/utils/utils.js","components/organisms/home/mobile/mobile-menu/utils/utils.js","components/organisms/home/quotes-list/utils/utils.js"],"sourcesContent":["import { API_ENDPOINTS } from '../../apis/apiEndpoints'\r\nimport { retryTenTimes } from '../../utils/apiUtils'\r\n\r\nexport const addPhilosopherNameToQuote = (quote, philosopherFullName) => `${quote} ― ${philosopherFullName}`\r\n\r\nexport const convertQuoteArray = (quoteArr, philosopherFullName) => quoteArr.map((quote) => addPhilosopherNameToQuote(quote, philosopherFullName))\r\n\r\nexport const allocateIdsToData = (data) =>\r\n    data.forEach((element, index) => {\r\n        element.id = index\r\n    })\r\n\r\nexport const doOperationsOnData = ({ data, setData }, sortingMethod) => {\r\n    data = data.slice()\r\n\r\n    if (sortingMethod === 'alphabetical') data.sort((a, b) => a.fullName.localeCompare(b.fullName))\r\n    else data.sort((a, b) => b.id - a.id)\r\n\r\n    setData(data)\r\n}\r\n\r\nexport const addPhilosopherInGlobalData = (philosopherName, { options, setOptions }, quotes) => {\r\n    const newOptions = JSON.parse(JSON.stringify(options))\r\n    if (philosopherName.trim().toLowerCase() === 'all') {\r\n        const index = getPhilosopherObjectIndex(philosopherName, options)\r\n        let existingQuotes\r\n        if (newOptions[index].quotes === undefined) existingQuotes = []\r\n        else {\r\n            existingQuotes = newOptions[index].quotes\r\n        }\r\n        newOptions[index].quotes = [...existingQuotes, ...quotes]\r\n    } else {\r\n        const index = getPhilosopherObjectIndex(philosopherName, options)\r\n        newOptions[index].quotes = quotes\r\n    }\r\n    setOptions(newOptions)\r\n}\r\n\r\nexport const lazyLoadAsset = (philosopherName, { options, setOptions }, callbacks) => {\r\n    return new Promise((resolve, reject) => {\r\n        const fileName = philosopherName.toLowerCase()\r\n        retryTenTimes(() => fetch(API_ENDPOINTS.STATIC_DATA.STATIC_QUOTES + fileName + '.json'))\r\n            .then((response) => response.json())\r\n            .then((data) => {\r\n                callbacks?.map((callback) => callback(data))\r\n                addPhilosopherInGlobalData(philosopherName, { options, setOptions }, data)\r\n                resolve()\r\n            })\r\n            .catch((e) => reject(e))\r\n    })\r\n}\r\n\r\nexport const getPhilosopherObjectIndex = (philosopher, options) => options.findIndex(({ value }) => value === philosopher)\r\n\r\nexport const getPhilosopherData = ({ philosopher, options }) => options.filter(({ value }) => value === philosopher)[0]\r\n\r\nexport const getPhilosopherQuotes = ({ philosopher, options }) => options.filter(({ value }) => value === philosopher)[0]?.quotes\r\n\r\nexport const getCurrentPhilosopherFullname = (currentPhilosopher, options) => {\r\n    const currentPhilosopherData = options[getPhilosopherObjectIndex(currentPhilosopher, options)]\r\n    return currentPhilosopherData.fullName\r\n}\r\n\r\nexport const doesPhilosopherDataExist = (philosopher, options) => {\r\n    if (options[getPhilosopherObjectIndex(philosopher, options)]) return true\r\n    else return false\r\n}\r\n","export const isUndefined = (value) => typeof value === 'undefined'\r\nexport const isObjEmpty = (obj) => Object.values(obj).length === 0 && obj.constructor === Object\r\n\r\nexport function uuidv4() {\r\n    return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, (c) => (c ^ (crypto.getRandomValues(new Uint8Array(1))[0] & (15 >> (c / 4)))).toString(16))\r\n}\r\n","import { useEffect, useState } from 'react'\r\n\r\nexport function getStorageValue(key, defaultValue) {\r\n    const saved = localStorage.getItem(key)\r\n    const initial = JSON.parse(saved)\r\n    if (initial === undefined || initial === 'undefined' || initial === 'null' || initial === null) {\r\n        return defaultValue\r\n    } else return initial\r\n}\r\n\r\nexport function setStorageValue(key, value) {\r\n    localStorage.setItem(key, JSON.stringify(value))\r\n}\r\n\r\nexport const useLocalStorage = (key, defaultValue) => {\r\n    const [value, setValue] = useState(() => {\r\n        return getStorageValue(key, defaultValue)\r\n    })\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem(key, JSON.stringify(value))\r\n    }, [key, value])\r\n\r\n    return [value, setValue]\r\n}\r\n","import { getStorageValue } from './localStorageUtils'\r\n\r\nexport const removeReadData = ({ index, currentPhilosopher, markedMode, markedQuotes = {}, setMarkedQuotes, currentData, setCurrentData }) => {\r\n    let newMarkedQuotes = JSON.parse(JSON.stringify(markedQuotes))\r\n    let readQuotesArray = []\r\n\r\n    const READ_ARRAY_LOCALSTORAGE_KEY = `${currentPhilosopher}-MARKED_AS_READ`\r\n    readQuotesArray = getStorageValue(READ_ARRAY_LOCALSTORAGE_KEY, [])\r\n\r\n    if (markedQuotes && markedQuotes[currentPhilosopher] !== undefined) {\r\n        readQuotesArray = [...readQuotesArray, ...markedQuotes[currentPhilosopher]]\r\n    }\r\n\r\n    readQuotesArray = [...new Set(readQuotesArray)]\r\n\r\n    if (index) {\r\n        readQuotesArray.push(index)\r\n    }\r\n\r\n    newMarkedQuotes[currentPhilosopher] = readQuotesArray\r\n    setMarkedQuotes(newMarkedQuotes)\r\n\r\n    const newData = currentData.filter(({ id }, _) => readQuotesArray.indexOf(id) === -1)\r\n    setCurrentData(JSON.parse(JSON.stringify(newData)))\r\n}\r\n","export let worker\r\nif (window.Worker) {\r\n    worker = new Worker(new URL('./filter-worker.js', import.meta.url))\r\n} else {\r\n    alert(\"Your browser doesn't support web workers.\")\r\n}\r\n","export const MAX_RECENT_PHILOSOPHERS = 5\r\n","const CACHE_TIME_IN_DAYS = 1\r\n\r\nexport const isCacheExpired = (startDate) => {\r\n    startDate = new Date(startDate)\r\n    const endDate = new Date()\r\n    const dateDifferenceInMilliSeconds = endDate.getTime() - startDate.getTime()\r\n    const dateDifferenceInDays = Math.floor(dateDifferenceInMilliSeconds / (1000 * 60 * 60 * 24))\r\n    return dateDifferenceInDays >= CACHE_TIME_IN_DAYS\r\n}\r\n","import { ALPHABETICAL, LATEST } from '../../components/organisms/home/home-page/constants/constants'\r\nimport { STATIC_OPTIONS } from '../../components/organisms/home/home-page/homePageRedux/initialState'\r\nimport { bringIntoAlphabeticalOrder, bringIntoOriginalOrder } from '../../components/organisms/home/home-page/utils/utils'\r\nimport { merge } from './objectUtils'\r\n\r\nexport const addOptionsDataIntoRedux = ({ newOptions, oldOptions, oldOriginalOptions, setOptions, setOriginalOptions }) => {\r\n    let resultantOptions\r\n    resultantOptions = [...oldOptions, ...newOptions]\r\n    setOptions(resultantOptions)\r\n    setOriginalOptions([...STATIC_OPTIONS, ...newOptions])\r\n}\r\n\r\nexport const addResponseOptionsDataIntoRedux = ({ newOptions, oldOptions, oldOriginalOptions, setOptions, setOriginalOptions, sorting }) => {\r\n    const originalOptions = [...STATIC_OPTIONS, ...newOptions]\r\n    let resultantOptions = merge(oldOptions, [...originalOptions])\r\n    if (sorting === LATEST) {\r\n        resultantOptions = bringIntoOriginalOrder(originalOptions, resultantOptions)\r\n    } else if (sorting === ALPHABETICAL) {\r\n        resultantOptions = bringIntoAlphabeticalOrder(resultantOptions)\r\n    }\r\n    setOptions([...resultantOptions])\r\n    setOriginalOptions(originalOptions)\r\n}\r\n","import { getPhilosopherObjectIndex } from '../static/utils/utils'\r\n\r\nexport const merge = (oldOptions, newOptions) => {\r\n    let newOptionsCopy = JSON.parse(JSON.stringify(newOptions))\r\n    newOptionsCopy.forEach((element, newOptionindex) => {\r\n        const oldOptionIndex = getPhilosopherObjectIndex(element.value, oldOptions)\r\n        if (oldOptionIndex !== -1) {\r\n            newOptionsCopy[newOptionindex].quotes = oldOptions[oldOptionIndex].quotes\r\n        }\r\n    })\r\n    return newOptionsCopy\r\n}\r\n","import { API_ENDPOINTS } from '../../../../../../common/apis/apiEndpoints'\r\nimport { MAX_RECENT_PHILOSOPHERS } from '../../../../../../common/settings/constants'\r\nimport { getPhilosopherQuotes, lazyLoadAsset } from '../../../../../../common/static/utils/utils'\r\nimport { retryTenTimes } from '../../../../../../common/utils/apiUtils'\r\nimport { isCacheExpired } from '../../../../../../common/utils/dateUtils'\r\nimport { addResponseOptionsDataIntoRedux } from '../../../../../../common/utils/lazyLoadUtils'\r\nimport { changeQuotesData } from '../../../quotes-list/utils/utils'\r\n\r\nexport function onPhilosopherSelectChange({ philosopher, listRef, setIsFetching, setStart, setEnd, setSearchText, setCurrentPhilosopher, currentData, setCurrentData, options, setOptions, markedMode, markedQuotes, setMarkedQuotes, scrollPosition, setRowsRendered, recentPhilosophers, setRecentPhilosophers }) {\r\n    function callback() {\r\n        if (recentPhilosophers) setRecentPhilosophers([...new Set([philosopher, ...recentPhilosophers.slice(0, MAX_RECENT_PHILOSOPHERS - 1)])])\r\n        setCurrentPhilosopher(philosopher)\r\n        changeQuotesData({ philosopher, currentData, setCurrentData, options }, { markedMode, markedQuotes, setMarkedQuotes })\r\n        setIsFetching(false)\r\n    }\r\n    setStart(1)\r\n    setEnd('')\r\n    setSearchText('')\r\n    setIsFetching(true)\r\n\r\n    if (!getPhilosopherQuotes({ philosopher, options })) {\r\n        lazyLoadAsset(philosopher, { options, setOptions }, []).then(callback)\r\n    } else {\r\n        callback()\r\n    }\r\n}\r\n\r\nexport const onFocusHandler = async ({ options, setOptions, isLoggedIn, setSyncDate, isFetchingOptions, setIsFetchingOptions, originalOptions, setOriginalOptions, sorting, syncDate }) => {\r\n    if (isCacheExpired(syncDate) || options.length === 1) {\r\n        if (isLoggedIn !== true) {\r\n            setSyncDate?.(Date.now())\r\n        }\r\n        setIsFetchingOptions?.(true)\r\n        let response = await retryTenTimes(() => fetch(API_ENDPOINTS.STATIC_DATA.STATIC_ASSET_GRAPH))\r\n        response = await response.json()\r\n        addResponseOptionsDataIntoRedux({ newOptions: response, oldOptions: options, oldOriginalOptions: originalOptions, setOptions, setOriginalOptions, sorting })\r\n        setIsFetchingOptions?.(false)\r\n    }\r\n}\r\n","export const LATEST = 'latest'\r\nexport const ALPHABETICAL = 'alphabetical'\r\n","import { getPhilosopherData } from '../../../../../common/static/utils/utils'\r\nimport { getUserDetails, sendUserDetails } from '../../mobile/mobile-menu/utils/utils'\r\n\r\nexport const setThemeClassNameOnHTMLTag = (value) => {\r\n    let root = document.getElementsByTagName('html')[0]\r\n    root.className = ''\r\n    if (value) {\r\n        root.classList.add('darkTheme')\r\n    } else {\r\n        root.classList.add('lightTheme')\r\n    }\r\n}\r\n\r\nexport const bringIntoOriginalOrder = (originalOptions, newOptions) => originalOptions.map((item) => getPhilosopherData({ philosopher: item.value, options: newOptions })).reverse()\r\n\r\nexport const bringIntoAlphabeticalOrder = (options) => [...options].sort((a, b) => a.fullName.localeCompare(b.fullName))\r\n\r\nexport function getClientSyncDates(syncDate) {\r\n    let currentClientDate = new Date()\r\n    let lastSyncClientDate = new Date(syncDate)\r\n\r\n    currentClientDate.setHours(0, 0, 0, 0)\r\n    currentClientDate = currentClientDate.getTime()\r\n\r\n    lastSyncClientDate = lastSyncClientDate.setHours(0, 0, 0, 0)\r\n    return { currentClientDate, lastSyncClientDate }\r\n}\r\n\r\nexport async function compareWithServerSyncDatesAndMakeAnAPICall(userName, markedQuotes, openSnackbar, setMarkedQuotes, setSyncDate, markedQuoteClientCount, currentClientDate) {\r\n    let { markedQuotesFromServer, dateFromServer } = await getUserDetails({ userName, markedQuotes, openSnackbar, setMarkedQuotes })\r\n    setSyncDate(Date.now())\r\n    if (markedQuotesFromServer) {\r\n        const markedQuotesFromServerCount = Object.values(markedQuotesFromServer).flat().length\r\n        if (markedQuotesFromServerCount > markedQuoteClientCount) {\r\n            setMarkedQuotes(markedQuotesFromServer)\r\n            openSnackbar('Auto-Sync : Restored all marked quotes!', 4000)\r\n        } else if (markedQuoteClientCount > markedQuotesFromServerCount) {\r\n            dateFromServer = new Date(dateFromServer)\r\n            dateFromServer.setHours(0, 0, 0, 0)\r\n            if (currentClientDate > dateFromServer) {\r\n                await sendUserDetails({ userName, markedQuotes, openSnackbar })\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { API_ENDPOINTS } from '../../../../../../common/apis/apiEndpoints'\r\nimport { retryTenTimes } from '../../../../../../common/utils/apiUtils'\r\n\r\nexport const sendUserDetails = async ({ userName, markedQuotes, openSnackbar, setSyncDate }) => {\r\n    await retryTenTimes(async () => {\r\n        return await fetch(API_ENDPOINTS.MARKED_QUOTES.BACKUP, {\r\n            method: 'post',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({\r\n                userName,\r\n                markedQuotes,\r\n                dateSynced: Date.now(),\r\n            }),\r\n        })\r\n    })\r\n}\r\n\r\nexport const getUserDetails = async ({ userName, markedQuotes, openSnackbar, setMarkedQuotes }) => {\r\n    let response = await retryTenTimes(\r\n        async () =>\r\n            await fetch(API_ENDPOINTS.MARKED_QUOTES.RESTORE, {\r\n                method: 'post',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({\r\n                    userName,\r\n                }),\r\n            })\r\n    )\r\n\r\n    response = await response.json()\r\n    if (response?.ok) {\r\n        try {\r\n            const markedQuotesFromServer = response?.results?.[0]?.markedQuotes\r\n            const markedQuotesFromServerCount = Object.values(markedQuotesFromServer).flat().length\r\n            if (markedQuotesFromServer && markedQuotesFromServerCount > 0) {\r\n                return { markedQuotesFromServer, dateFromServer: response?.results?.[0]?.dateSynced }\r\n                // setMarkedQuotes(response?.results?.[0]?.markedQuotes)\r\n            }\r\n        } catch (error) {\r\n            openSnackbar(JSON.stringify(error))\r\n        }\r\n    } else {\r\n        openSnackbar(JSON.stringify(response.error))\r\n    }\r\n}\r\n\r\nexport const loginRegister = async ({ apiCallType, userName, password, setIsLoggedIn, openSnackbar, setIsFetching }) => {\r\n    const capitalizedUserName = userName.charAt(0).toUpperCase() + userName.slice(1)\r\n    let response\r\n    setIsFetching(true)\r\n    if (apiCallType === 'login') {\r\n        response = await retryTenTimes(\r\n            async () =>\r\n                await fetch(API_ENDPOINTS.USER.LOGIN, {\r\n                    method: 'post',\r\n                    headers: { 'Content-Type': 'application/json' },\r\n                    body: JSON.stringify({\r\n                        userName,\r\n                        password,\r\n                    }),\r\n                })\r\n        )\r\n    } else {\r\n        response = await retryTenTimes(\r\n            async () =>\r\n                await fetch(API_ENDPOINTS.USER.CREATE, {\r\n                    method: 'post',\r\n                    headers: { 'Content-Type': 'application/json' },\r\n                    body: JSON.stringify({\r\n                        userName,\r\n                        password,\r\n                    }),\r\n                })\r\n        )\r\n    }\r\n\r\n    response = await response.json()\r\n    setIsFetching(false)\r\n\r\n    if (response?.ok) {\r\n        setIsLoggedIn(true)\r\n        openSnackbar(capitalizedUserName + ' ' + JSON.stringify(response.serverResponse))\r\n    } else {\r\n        openSnackbar(JSON.stringify(response.error))\r\n    }\r\n}\r\n","import { isObjEmpty } from '../../../../../common/utils/commonUtils'\r\nimport { removeReadData } from '../../../../../common/utils/staticDataUtils'\r\nimport { worker } from '../../../../../common/web-workers/worker'\r\n\r\nexport const changeQuotesData = ({ currentPhilosopher, currentData, setCurrentData, options }, { markedMode = null, markedQuotes, setMarkedQuotes }) => {\r\n    if (currentData) setCurrentData(currentData)\r\n    if (markedMode !== undefined && markedMode) removeReadData({ currentPhilosopher, markedMode, markedQuotes, setMarkedQuotes, currentData, setCurrentData })\r\n}\r\n\r\nexport const getPhilosopherFullName = ({ currentPhilosopher, options }) => {\r\n    const currentIndex = options.filter(({ value }) => currentPhilosopher === value)\r\n    if (!isObjEmpty(currentIndex)) return currentIndex && currentIndex[0].fullName\r\n}\r\n\r\nexport const getPhilosopherFullName_i10n = ({ currentPhilosopher, options }) => {\r\n    const currentIndex = options.filter(({ value }) => currentPhilosopher === value)\r\n    if (!isObjEmpty(currentIndex)) return currentIndex && currentIndex[0].fullNameInOtherLanguages\r\n}\r\n\r\nexport const searchByWordLength = async (start, end, quotes, { markedMode, markedQuotes, setMarkedQuotes }, { setCurrentData, currentPhilosopher }) => {\r\n    return new Promise((resolve) => {\r\n        if (quotes !== undefined) {\r\n            if (typeof start === 'string' && start.trim() === '') start = 0\r\n            worker.postMessage({ quotes, end, start, filterName: 'wordCountFilter' })\r\n            worker.onmessage = (event) => {\r\n                const newData = JSON.parse(eval(`(${JSON.stringify(event.data)})`))\r\n                changeQuotesData({ currentData: newData, setCurrentData, currentPhilosopher }, { markedMode, markedQuotes, setMarkedQuotes })\r\n                resolve()\r\n            }\r\n        }\r\n    })\r\n}\r\n\r\nexport function getWordCount(str) {\r\n    return str.split(' ').filter(function (n) {\r\n        return n !== ''\r\n    }).length\r\n}\r\n"],"names":["lazyLoadAsset","philosopherName","_ref3","callbacks","options","setOptions","Promise","resolve","reject","fileName","toLowerCase","retryTenTimes","fetch","API_ENDPOINTS","STATIC_DATA","STATIC_QUOTES","then","response","json","data","map","callback","_ref2","quotes","newOptions","JSON","parse","stringify","trim","existingQuotes","index","getPhilosopherObjectIndex","undefined","concat","_toConsumableArray","addPhilosopherInGlobalData","catch","e","philosopher","findIndex","_ref4","value","getPhilosopherData","_ref5","filter","_ref6","getPhilosopherQuotes","_ref7","_options$filter$","_ref8","getCurrentPhilosopherFullname","currentPhilosopher","fullName","doesPhilosopherDataExist","isUndefined","isObjEmpty","obj","Object","values","length","constructor","uuidv4","replace","c","crypto","getRandomValues","Uint8Array","toString","getStorageValue","key","defaultValue","saved","localStorage","getItem","initial","removeReadData","_ref","_ref$markedQuotes","markedMode","markedQuotes","setMarkedQuotes","currentData","setCurrentData","newMarkedQuotes","readQuotesArray","READ_ARRAY_LOCALSTORAGE_KEY","Set","push","newData","_","id","indexOf","worker","window","Worker","URL","alert","MAX_RECENT_PHILOSOPHERS","isCacheExpired","startDate","Date","dateDifferenceInMilliSeconds","getTime","Math","floor","addResponseOptionsDataIntoRedux","oldOptions","oldOriginalOptions","setOriginalOptions","sorting","originalOptions","STATIC_OPTIONS","resultantOptions","newOptionsCopy","forEach","element","newOptionindex","oldOptionIndex","merge","LATEST","bringIntoOriginalOrder","ALPHABETICAL","bringIntoAlphabeticalOrder","onPhilosopherSelectChange","setIsFetching","listRef","setStart","setEnd","setSearchText","setCurrentPhilosopher","recentPhilosophers","scrollPosition","setRowsRendered","setRecentPhilosophers","slice","changeQuotesData","onFocusHandler","_asyncToGenerator","_regeneratorRuntime","mark","_callee","isLoggedIn","setSyncDate","setIsFetchingOptions","syncDate","wrap","_context","prev","next","isFetchingOptions","now","STATIC_ASSET_GRAPH","sent","stop","_x","apply","arguments","setThemeClassNameOnHTMLTag","root","document","getElementsByTagName","className","classList","add","item","reverse","sort","a","b","localeCompare","getClientSyncDates","currentClientDate","lastSyncClientDate","setHours","compareWithServerSyncDatesAndMakeAnAPICall","_x2","_x3","_x4","_x5","_x6","_x7","_compareWithServerSyncDatesAndMakeAnAPICall","userName","openSnackbar","markedQuoteClientCount","_yield$getUserDetails","markedQuotesFromServer","dateFromServer","markedQuotesFromServerCount","getUserDetails","flat","sendUserDetails","_callee2","_context2","MARKED_QUOTES","BACKUP","method","headers","body","dateSynced","abrupt","_callee4","_response","_response2","_response2$results","_response2$results$","_response3","_response3$results","_response3$results$","_context4","_callee3","_context3","RESTORE","ok","results","t0","error","loginRegister","_callee7","_response4","apiCallType","password","setIsLoggedIn","capitalizedUserName","_context7","charAt","toUpperCase","_callee5","_context5","USER","LOGIN","_callee6","_context6","CREATE","serverResponse","_ref2$markedMode","getPhilosopherFullName","currentIndex","getPhilosopherFullName_i10n","fullNameInOtherLanguages","searchByWordLength","_ref9","start","end","_callee$","postMessage","filterName","onmessage","event","eval","getWordCount","str","split","n"],"sourceRoot":""}