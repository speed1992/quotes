{"version":3,"file":"static/js/QuoteWithoutImage.d07f5a20.chunk.js","mappings":"gHAAO,MAAMA,EACK,SAAUC,EAAKC,GAAsB,IAApB,MAAEC,EAAK,OAAEC,GAAQF,EAC5C,IAAK,IAAIG,EAAI,EAAGA,EAAIJ,EAAMK,OAAQD,IAAK,CACnC,MAAME,EAAcN,EAAMI,GAAGF,EAAOC,GACpC,GAAIG,EAAa,OAAOA,CAC5B,CACJ,ECNSN,EAAQ,CACjB,SAAUO,GACN,GAAIA,GAAS,GAAI,OAAO,GAC5B,EACA,SAAUA,GACN,GAAIA,EAAQ,IAAMA,GAAS,GAAI,OAAO,GAC1C,EACA,SAAUA,GACN,GAAIA,EAAQ,IAAMA,GAAS,GAAI,OAAO,GAC1C,EACA,SAAUA,GACN,GAAIA,EAAQ,IAAMA,GAAS,GAAI,OAAO,GAC1C,EACA,SAAUA,GACN,GAAIA,EAAQ,IAAMA,GAAS,GAAI,OAAO,GAC1C,EACA,SAAUA,GACN,GAAIA,EAAQ,IAAMA,GAAS,GAAI,OAAO,GAC1C,EACA,SAAUA,GACN,GAAIA,EAAQ,IAAMA,GAAS,GAAI,OAAO,GAC1C,EACA,SAAUA,GACN,GAAIA,EAAQ,IAAMA,GAAS,GAAI,OAAO,GAC1C,EACA,SAAUA,GACN,GAAIA,EAAQ,GAAI,OAAO,GAC3B,EACA,WACI,OAAO,CACX,GC3BSC,EAAkBC,IAC3B,MAAMF,EAAQE,EAAMC,MAAM,KAAKL,OAC/B,MAAM,GAANM,OAAUZ,EAAwBC,EAAO,CAAEE,MAAOK,EAAOJ,OAAQ,OAAO,O,0FCD5E,MAAMS,EAAoBX,IAAA,IAAC,MAAEY,EAAK,UAAEC,EAAS,cAAEC,EAAa,oBAAEC,EAAmB,UAAEC,GAAWhB,EAAA,OAC1FiB,EAAAA,EAAAA,KAAA,OAAKC,UAAS,GAAAR,OAAKS,EAAAA,EAAOC,aAAeC,IAAKR,EAAUS,UACpDC,EAAAA,EAAAA,MAAA,OAAKL,UAAWC,EAAAA,EAAOK,eAAgBC,MAAO,CAAEC,UAAUnB,EAAAA,EAAAA,GAAeO,IAAiBQ,SAAA,EACtFC,EAAAA,EAAAA,MAAA,OAAKL,UAAS,GAAAR,OAAKS,EAAAA,EAAOQ,cAAeL,SAAA,EACrCC,EAAAA,EAAAA,MAAA,KAAGL,UAAS,GAAAR,OAAKS,EAAAA,EAAOS,cAAeN,SAAA,CAAC,IAAER,EAAc,QACxDG,EAAAA,EAAAA,KAAA,KAAAK,SAAIP,QAERE,EAAAA,EAAAA,KAAA,OAAKC,UAAS,GAAAR,OAAKS,EAAAA,EAAOH,WAAYM,SAAEN,QAE1C,EAGV,EAAea,EAAAA,KAAWlB,E,kCCf1B,SAAgB,eAAiB,2CAA2C,UAAY,sCAAsC,QAAU,oCAAoC,aAAe,yCAAyC,aAAe,yCAAyC,UAAY,sCAAsC,sBAAwB,kDAAkD,eAAiB,2CAA2C,YAAc,wC","sources":["common/utils/ruleEngine.js","components/organisms/analysis/generate-quote-image/utils/ruleEngine/rules/rules.js","components/organisms/analysis/generate-quote-image/utils/fontutils.js","components/organisms/analysis/quote-without-image/quote-without-image.jsx","webpack://quotes/./src/components/organisms/analysis/generate-quote-image/generateQuoteImage.module.css?32d1"],"sourcesContent":["export const ruleEngine = {\r\n    makeDecision: function (rules, { value, params }) {\r\n        for (let i = 0; i < rules.length; i++) {\r\n            const returnValue = rules[i](value, params)\r\n            if (returnValue) return returnValue\r\n        }\r\n    },\r\n}\r\n","export const rules = [\r\n    function (words) {\r\n        if (words <= 15) return 2.3\r\n    },\r\n    function (words) {\r\n        if (words > 15 && words <= 30) return 2.1\r\n    },\r\n    function (words) {\r\n        if (words > 30 && words <= 40) return 1.9\r\n    },\r\n    function (words) {\r\n        if (words > 40 && words <= 50) return 1.8\r\n    },\r\n    function (words) {\r\n        if (words > 50 && words <= 60) return 1.8\r\n    },\r\n    function (words) {\r\n        if (words > 60 && words <= 70) return 1.8\r\n    },\r\n    function (words) {\r\n        if (words > 70 && words <= 80) return 1.7\r\n    },\r\n    function (words) {\r\n        if (words > 80 && words <= 90) return 1.6\r\n    },\r\n    function (words) {\r\n        if (words > 90) return 1.3\r\n    },\r\n    function () {\r\n        return 2.0\r\n    },\r\n]\r\n","import { ruleEngine } from '../../../../../common/utils/ruleEngine'\r\nimport { rules } from './ruleEngine/rules/rules'\r\n\r\nexport const autoAdjustFont = (quote) => {\r\n    const words = quote.split(' ').length\r\n    return `${ruleEngine.makeDecision(rules, { value: words, params: null })}rem`\r\n}\r\n","import React from 'react'\r\nimport styles from '../generate-quote-image/generateQuoteImage.module.css'\r\nimport { autoAdjustFont } from '../generate-quote-image/utils/fontutils'\r\n\r\nconst QuoteWithoutImage = ({ error, exportRef, quotationText, philosopherFullName, signature }) => (\r\n    <div className={`${styles.borderWhite}`} ref={exportRef}>\r\n        <div className={styles.fontFredericka} style={{ fontSize: autoAdjustFont(quotationText) }}>\r\n            <div className={`${styles.alignmentOld}`}>\r\n                <p className={`${styles.fullWidthOld}`}>\"{quotationText}\"</p>\r\n                <p>{philosopherFullName}</p>\r\n            </div>\r\n            <div className={`${styles.signature}`}>{signature}</div>\r\n        </div>\r\n    </div>\r\n)\r\n\r\nexport default React.memo(QuoteWithoutImage)\r\n","// extracted by mini-css-extract-plugin\nexport default {\"fontFredericka\":\"generateQuoteImage_fontFredericka__rUsrq\",\"alignment\":\"generateQuoteImage_alignment__RGCgW\",\"phImage\":\"generateQuoteImage_phImage__8CmVF\",\"alignmentOld\":\"generateQuoteImage_alignmentOld__cDbPz\",\"fullWidthOld\":\"generateQuoteImage_fullWidthOld__umNpb\",\"signature\":\"generateQuoteImage_signature__SXMvH\",\"backgroundTransparent\":\"generateQuoteImage_backgroundTransparent__R0CdA\",\"quotationColor\":\"generateQuoteImage_quotationColor__DS6Ht\",\"borderWhite\":\"generateQuoteImage_borderWhite__UGZF2\"};"],"names":["ruleEngine","rules","_ref","value","params","i","length","returnValue","words","autoAdjustFont","quote","split","concat","QuoteWithoutImage","error","exportRef","quotationText","philosopherFullName","signature","_jsx","className","styles","borderWhite","ref","children","_jsxs","fontFredericka","style","fontSize","alignmentOld","fullWidthOld","React"],"sourceRoot":""}