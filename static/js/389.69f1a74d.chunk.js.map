{"version":3,"file":"static/js/389.69f1a74d.chunk.js","mappings":"2LAGMA,EAAiBC,EAAAA,MAAW,kBAAMC,EAAAA,EAAAA,KAAc,kBAAM,6BAA0E,GAAC,IAExH,SAASC,EAAYC,GAAmH,IAAhHC,EAAOD,EAAPC,QAASC,EAAkBF,EAAlBE,mBAAoBC,EAAeH,EAAfG,gBAAiBC,EAAsBJ,EAAtBI,uBAAwBC,EAAWL,EAAXK,YAAaC,EAAKN,EAALM,MAAOC,EAAiBP,EAAjBO,kBAC7HC,GAAsCC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA3CI,EAAWF,EAAA,GAAEG,EAAcH,EAAA,GAClCI,GAAoCL,EAAAA,EAAAA,UAAS,IAAGM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAAzCE,EAAUD,EAAA,GAAEE,EAAaF,EAAA,GAChCG,GAAkCT,EAAAA,EAAAA,WAAS,GAAMU,GAAAR,EAAAA,EAAAA,GAAAO,EAAA,GAA1CE,EAASD,EAAA,GAAEE,EAAYF,EAAA,IAC9BG,EAAAA,EAAAA,YAAU,kBAAML,EAAcX,EAAM,GAAE,CAACA,IACvC,IAAMiB,GAAaC,EAAAA,EAAAA,WAEnBF,EAAAA,EAAAA,YAAU,WACFF,GAAanB,EAAQwB,OAAS,IAC9BR,EAAc,IACdJ,EAAeZ,GACfoB,GAAa,GAErB,GAAG,CAACpB,EAAQwB,OAAQL,IAiDpB,OACIM,EAAAA,EAAAA,KAAC9B,EAAc,CAAC+B,SAAU,kBAAMd,EAAe,GAAG,EAACe,UAC/CC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,oBAAmBF,SAAA,EAC9BF,EAAAA,EAAAA,KAAA,SAAOK,KAAK,qBAAqBC,KAAK,OAAOC,QAlDlC,SAACC,GACpB9B,IACAiB,GAAa,EACjB,EA+CkFc,SA7C7D,SAACD,GAClB,IAAM5B,EAAQ4B,EAAEE,OAAO9B,MACvB,GAAc,KAAVA,EAAcO,EAAeZ,OAC5B,CACD,IAAIW,EAAc,GAClB,GAAIN,EAAMmB,OAAS,EAAG,CAClB,IAAMY,EAAQ,IAAIC,OAAO,GAADC,OAAIjC,GAAK,KACjCM,EAAcX,EAAQuC,QAAO,SAAAC,GAAA,IAAGC,EAAQD,EAARC,SAAQ,OAAOL,EAAMM,KAAKD,EAAS,GACvE,CAEA7B,EAAeD,EACnB,CACAK,EAAcX,EAClB,EAgC0GD,YAAaA,EAAaC,MAAOU,EAAY4B,OA9BjI,WAClB3B,EAAcX,EAClB,IA6BaC,GACGmB,EAAAA,EAAAA,KAAA,MAAII,UAAU,eAAcF,UACxBF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,iBApBO,IAAvBhB,EAAYa,OACL,MAGPC,EAAAA,EAAAA,KAAA,MAAImB,IAAKtB,EAAYO,UAAU,eAAcF,SAC7B,OAAXhB,QAAW,IAAXA,OAAW,EAAXA,EAAakC,KAAI,SAAAC,GAAA,IAAGL,EAAQK,EAARL,SAAUpC,EAAKyC,EAALzC,MAAK,OAChCoB,EAAAA,EAAAA,KAAA,MAAIsB,GAAI9C,IAAuBI,EAAQ,SAAW,GAAgBA,MAAOA,EAAO2C,QAAS,SAACf,GAAC,OAfhF,SAACQ,EAAUpC,QACpB4C,IAAV5C,IACAO,EAAe,IACfI,EAAcyB,GACdvC,EAAgB,CAAEiC,OAAQ,CAAE9B,MAAAA,KAEpC,CASgH6C,CAAmBT,EAAUpC,EAAM,EAACsB,SAC/Hc,GADsDpC,EAEtD,UAoBzB,C","sources":["components/organisms/home/mobile/mobile-select/mobile-select.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react'\r\nimport { retryTenTimes } from '../../../../../common/utils/apiUtils'\r\nimport './mobile-select.css'\r\nconst OutsideAlerter = React.lazy(() => retryTenTimes(() => import('../../../../../common/components/outside-alerter/outside-alerter')))\r\n\r\nexport default function MobileSelect({ options, currentPhilosopher, onChangeHandler, onFocusHandlerCallback, placeholder, value, isFetchingOptions }) {\r\n    const [suggestions, setSuggestions] = useState([])\r\n    const [searchText, setSearchText] = useState([])\r\n    const [isFocused, setIsFocused] = useState(false)\r\n    useEffect(() => setSearchText(value), [value])\r\n    const scollToRef = useRef()\r\n\r\n    useEffect(() => {\r\n        if (isFocused && options.length > 1) {\r\n            setSearchText('')\r\n            setSuggestions(options)\r\n            setIsFocused(false)\r\n        }\r\n    }, [options.length, isFocused])\r\n\r\n    const onFocusHandler = (e) => {\r\n        onFocusHandlerCallback()\r\n        setIsFocused(true)\r\n    }\r\n\r\n    const onTextChange = (e) => {\r\n        const value = e.target.value\r\n        if (value === '') setSuggestions(options)\r\n        else {\r\n            let suggestions = []\r\n            if (value.length > 0) {\r\n                const regex = new RegExp(`${value}`, `i`)\r\n                suggestions = options.filter(({ fullName }) => regex.test(fullName))\r\n            }\r\n\r\n            setSuggestions(suggestions)\r\n        }\r\n        setSearchText(value)\r\n    }\r\n\r\n    const onBlurHandler = () => {\r\n        setSearchText(value)\r\n    }\r\n\r\n    const suggestionSelected = (fullName, value) => {\r\n        if (value !== undefined) {\r\n            setSuggestions([])\r\n            setSearchText(fullName)\r\n            onChangeHandler({ target: { value } })\r\n        }\r\n    }\r\n\r\n    const renderSuggestions = () => {\r\n        if (suggestions.length === 0) {\r\n            return null\r\n        }\r\n        return (\r\n            <ul ref={scollToRef} className=\"dropDownList\">\r\n                {suggestions?.map(({ fullName, value }) => (\r\n                    <li id={currentPhilosopher === value ? 'active' : ''} key={value} value={value} onClick={(e) => suggestionSelected(fullName, value)}>\r\n                        {fullName}\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <OutsideAlerter callback={() => setSuggestions([])}>\r\n            <div className=\"typeAheadDropDown\">\r\n                <input name=\"search-philosopher\" type=\"text\" onFocus={onFocusHandler} onChange={onTextChange} placeholder={placeholder} value={searchText} onBlur={onBlurHandler} />\r\n                {isFetchingOptions ? (\r\n                    <ul className=\"dropDownList\">\r\n                        <li>Loading...</li>\r\n                    </ul>\r\n                ) : (\r\n                    renderSuggestions()\r\n                )}\r\n            </div>\r\n        </OutsideAlerter>\r\n    )\r\n}\r\n"],"names":["OutsideAlerter","React","retryTenTimes","MobileSelect","_ref","options","currentPhilosopher","onChangeHandler","onFocusHandlerCallback","placeholder","value","isFetchingOptions","_useState","useState","_useState2","_slicedToArray","suggestions","setSuggestions","_useState3","_useState4","searchText","setSearchText","_useState5","_useState6","isFocused","setIsFocused","useEffect","scollToRef","useRef","length","_jsx","callback","children","_jsxs","className","name","type","onFocus","e","onChange","target","regex","RegExp","concat","filter","_ref2","fullName","test","onBlur","ref","map","_ref3","id","onClick","undefined","suggestionSelected"],"sourceRoot":""}