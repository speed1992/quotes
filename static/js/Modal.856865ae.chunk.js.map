{"version":3,"file":"static/js/Modal.856865ae.chunk.js","mappings":"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","sources":["webpack://quotes/./src/common/components/modal/modal.module.css?0533","common/components/modal/modal.jsx","common/utils/commonUtils.js","common/utils/localStorageUtils.js","common/utils/staticDataUtils.js","common/utils/utils.js","common/web-workers/worker.js","components/organisms/home/quotes-list/utils/utils.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"modalContainer\":\"modal_modalContainer__3m8jF\",\"close\":\"modal_close__43oiV\",\"desktopCloseBtn\":\"modal_desktopCloseBtn__kjVr0\",\"lightMode\":\"modal_lightMode__854yT\",\"titleBar\":\"modal_titleBar__dY+Og\",\"title\":\"modal_title__xmK-V\"};","import { useCallback } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { isDesktop } from '../../utils/utils'\r\nimport styles from './modal.module.css'\r\nimport { setCurrentModalName } from './modalRedux'\r\n\r\nconst Modal = ({ children, title }) => {\r\n    const dispatch = useDispatch()\r\n    const darkMode = useSelector((state) => state?.philosophersData?.darkMode)\r\n\r\n    return (\r\n        <div className={`${styles.modalContainer} ${darkMode ? styles.darkMode : styles.lightMode}`}>\r\n            <div className={styles.titleBar}>\r\n                <span className={styles.title}>{title}</span>\r\n                <button className={`${styles.close} ${isDesktop() ? styles.desktopCloseBtn : ''}`} onClick={useCallback(() => dispatch(setCurrentModalName(''), []))}>\r\n                    X\r\n                </button>\r\n            </div>\r\n            {children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Modal\r\n","export const isUndefined = (value) => typeof value === 'undefined'\r\nexport const isObjEmpty = (obj) => Object.values(obj).length === 0 && obj.constructor === Object\r\n\r\nexport function uuidv4() {\r\n    return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, (c) => (c ^ (crypto.getRandomValues(new Uint8Array(1))[0] & (15 >> (c / 4)))).toString(16))\r\n}\r\n","import { useEffect, useState } from 'react'\r\n\r\nexport function getStorageValue(key, defaultValue) {\r\n    const saved = localStorage.getItem(key)\r\n    const initial = JSON.parse(saved)\r\n    if (initial === undefined || initial === 'undefined' || initial === 'null' || initial === null) {\r\n        return defaultValue\r\n    } else return initial\r\n}\r\n\r\nexport function setStorageValue(key, value) {\r\n    localStorage.setItem(key, JSON.stringify(value))\r\n}\r\n\r\nexport const useLocalStorage = (key, defaultValue) => {\r\n    const [value, setValue] = useState(() => {\r\n        return getStorageValue(key, defaultValue)\r\n    })\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem(key, JSON.stringify(value))\r\n    }, [key, value])\r\n\r\n    return [value, setValue]\r\n}\r\n","import { getStorageValue } from './localStorageUtils'\r\n\r\nexport const removeReadData = ({ index, currentPhilosopher, markedMode, markedQuotes = {}, setMarkedQuotes, currentData, setCurrentData }) => {\r\n    let newMarkedQuotes = JSON.parse(JSON.stringify(markedQuotes))\r\n    let readQuotesArray = []\r\n\r\n    const READ_ARRAY_LOCALSTORAGE_KEY = `${currentPhilosopher}-MARKED_AS_READ`\r\n    readQuotesArray = getStorageValue(READ_ARRAY_LOCALSTORAGE_KEY, [])\r\n\r\n    if (markedQuotes && markedQuotes[currentPhilosopher] !== undefined) {\r\n        readQuotesArray = [...readQuotesArray, ...markedQuotes[currentPhilosopher]]\r\n    }\r\n\r\n    readQuotesArray = [...new Set(readQuotesArray)]\r\n\r\n    if (index) {\r\n        readQuotesArray.push(index)\r\n    }\r\n\r\n    newMarkedQuotes[currentPhilosopher] = readQuotesArray\r\n    setMarkedQuotes(newMarkedQuotes)\r\n\r\n    const newData = currentData.filter(({ id }, _) => readQuotesArray.indexOf(id) === -1)\r\n    setCurrentData(JSON.parse(JSON.stringify(newData)))\r\n}\r\n","import { changeQuotesData } from '../../components/organisms/home/quotes-list/utils/utils'\r\nimport { worker } from '../web-workers/worker'\r\n\r\nexport const scrollToFirstRow = (listRef) => {\r\n    if (listRef.current) {\r\n        listRef.current.scrollToRow(0)\r\n    }\r\n}\r\n\r\nexport const scrollToMemorizedRow = (listRef, scrollPosition, currentData) => {\r\n    if (currentData?.length > 0 && listRef.current) {\r\n        if (scrollPosition !== undefined && scrollPosition !== 'undefined' && scrollPosition && scrollPosition > 0) {\r\n            listRef.current.scrollToRow(scrollPosition)\r\n        } else {\r\n            scrollToFirstRow(listRef)\r\n        }\r\n    }\r\n}\r\n\r\nexport const scrollToQuoteId = (listRef, scrollObject, currentData, currentPhilosopher) => {\r\n    const quoteId = scrollObject[currentPhilosopher]\r\n    if (currentData?.length > 0 && listRef.current) {\r\n        if (quoteId !== undefined && quoteId !== 'undefined' && quoteId && quoteId > 0) {\r\n            const index = currentData.findIndex(({ id }) => {\r\n                return id === quoteId\r\n            })\r\n            if (index > -1) listRef.current.scrollToRow(index)\r\n        } else {\r\n            scrollToFirstRow(listRef)\r\n        }\r\n    }\r\n}\r\n\r\nexport const search = ({ searchText, start, end, setCurrentData, searchFilters, markedMode, markedQuotes, setMarkedQuotes, currentData, currentPhilosopher }) => {\r\n    console.log('@dev currentData', currentData)\r\n    return new Promise((resolve) => {\r\n        if (currentData !== undefined) {\r\n            if (typeof start === 'string' && start.trim() === '') start = 0\r\n            worker.postMessage({ currentData, searchText, searchFilters, end, start })\r\n            worker.onmessage = (event) => {\r\n                const filteredQuotesFromWorker = JSON.parse(eval(`(${JSON.stringify(event.data)})`))\r\n                changeQuotesData({ currentData: filteredQuotesFromWorker, setCurrentData, currentPhilosopher }, { markedMode, markedQuotes, setMarkedQuotes })\r\n                resolve()\r\n            }\r\n        }\r\n    })\r\n}\r\n\r\nexport const isMobile = () => window.innerWidth <= 600\r\n\r\nexport const isDesktop = () => window.innerWidth >= 600\r\n","export let worker\r\nif (window.Worker) {\r\n    worker = new Worker(new URL('./filter-worker.js', import.meta.url))\r\n} else {\r\n    alert(\"Your browser doesn't support web workers.\")\r\n}\r\n","import { isObjEmpty } from '../../../../../common/utils/commonUtils'\r\nimport { removeReadData } from '../../../../../common/utils/staticDataUtils'\r\n\r\nexport const changeQuotesData = ({ currentPhilosopher, currentData, setCurrentData, options }, { markedMode = null, markedQuotes, setMarkedQuotes }) => {\r\n    if (currentData) setCurrentData(currentData)\r\n    if (markedMode !== undefined && markedMode) removeReadData({ currentPhilosopher, markedMode, markedQuotes, setMarkedQuotes, currentData, setCurrentData })\r\n}\r\n\r\nexport const getPhilosopherFullName = ({ currentPhilosopher, options }) => {\r\n    const currentIndex = options.filter(({ value }) => currentPhilosopher === value)\r\n    if (!isObjEmpty(currentIndex)) return currentIndex && currentIndex[0].fullName\r\n}\r\n\r\nexport const getPhilosopherFullName_i10n = ({ currentPhilosopher, options }) => {\r\n    const currentIndex = options.filter(({ value }) => currentPhilosopher === value)\r\n    if (!isObjEmpty(currentIndex)) return currentIndex && currentIndex[0].fullNameInOtherLanguages\r\n}\r\n\r\nexport function getWordCount(str) {\r\n    return str.split(' ').filter(function (n) {\r\n        return n !== ''\r\n    }).length\r\n}\r\n"],"names":["_ref","children","title","dispatch","useDispatch","darkMode","useSelector","state","_state$philosophersDa","philosophersData","_jsxs","className","concat","styles","modalContainer","lightMode","titleBar","_jsx","close","isDesktop","desktopCloseBtn","onClick","useCallback","setCurrentModalName","isUndefined","value","isObjEmpty","obj","Object","values","length","constructor","uuidv4","replace","c","crypto","getRandomValues","Uint8Array","toString","getStorageValue","key","defaultValue","saved","localStorage","getItem","initial","JSON","parse","undefined","removeReadData","index","currentPhilosopher","markedMode","markedQuotes","setMarkedQuotes","currentData","setCurrentData","newMarkedQuotes","stringify","readQuotesArray","READ_ARRAY_LOCALSTORAGE_KEY","Set","push","newData","filter","_ref2","_","id","indexOf","scrollToFirstRow","listRef","current","scrollToRow","scrollToMemorizedRow","scrollPosition","scrollToQuoteId","scrollObject","quoteId","findIndex","search","searchText","start","end","searchFilters","console","log","Promise","resolve","trim","worker","postMessage","onmessage","event","filteredQuotesFromWorker","eval","data","changeQuotesData","isMobile","window","innerWidth","Worker","URL","alert","options","getPhilosopherFullName","_ref3","currentIndex","_ref4","fullName","getPhilosopherFullName_i10n","_ref5","_ref6","fullNameInOtherLanguages","getWordCount","str","split","n"],"sourceRoot":""}