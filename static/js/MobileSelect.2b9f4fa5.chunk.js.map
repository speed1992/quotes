{"version":3,"file":"static/js/MobileSelect.2b9f4fa5.chunk.js","mappings":"oJACA,SAAgB,kBAAoB,yCAAyC,UAAY,iCAAiC,aAAe,oCAAoC,OAAS,+B,aCEtL,MAAMA,EAAiBC,EAAAA,MAAW,KAAMC,EAAAA,EAAAA,KAAc,IAAM,iCAE7C,SAASC,EAAYC,GAAiJ,IAAhJ,QAAEC,EAAO,mBAAEC,EAAkB,gBAAEC,EAAe,uBAAEC,EAAsB,YAAEC,EAAW,MAAEC,EAAK,kBAAEC,EAAiB,mBAAEC,EAAkB,SAAEC,GAAUT,EAC9K,MAAOU,EAAaC,IAAkBC,EAAAA,EAAAA,UAAS,KACxCC,EAAYC,IAAiBF,EAAAA,EAAAA,UAAS,KACtCG,EAAWC,IAAgBJ,EAAAA,EAAAA,WAAS,IAC3CK,EAAAA,EAAAA,YAAU,IAAMH,EAAcR,IAAQ,CAACA,IACvC,MAAMY,GAAaC,EAAAA,EAAAA,WAEnBF,EAAAA,EAAAA,YAAU,KACFF,GAAad,EAAQmB,OAAS,IAC9BN,EAAc,IACdH,EAAeV,GACfe,GAAa,GACjB,GACD,CAACf,EAAQmB,OAAQL,IAiDpB,OACIM,EAAAA,EAAAA,KAACzB,EAAc,CAAC0B,SAAUA,IAAMX,EAAe,IAAIY,UAC/CC,EAAAA,EAAAA,MAAA,OAAKC,UAAS,GAAAC,OAAKC,EAAOC,kBAAiB,KAAAF,OAAIjB,EAAWkB,EAAOE,UAAY,IAAKN,SAAA,EAC9EF,EAAAA,EAAAA,KAAA,SAAOS,KAAK,qBAAqBC,KAAK,OAAOC,QAlDjCC,IACpB7B,IACAY,GAAa,EAAK,EAgD4DkB,SA7C5DD,IAClB,MAAM3B,EAAQ2B,EAAEE,OAAO7B,MACvB,GAAc,KAAVA,EAAcK,EAAeV,OAC5B,CACD,IAAIS,EAAc,GAClB,GAAIJ,EAAMc,OAAS,EAAG,CAClB,MAAMgB,EAAQ,IAAIC,OAAO,GAADX,OAAIpB,GAAK,KACjCI,EAAcT,EAAQqC,QAAOC,IAAA,IAAC,SAAEC,GAAUD,EAAA,OAAKH,EAAMK,KAAKD,EAAS,GACvE,CAEA7B,EAAeD,EACnB,CACAI,EAAcR,EAAM,EAiCkFD,YAAaA,EAAaC,MAAOO,EAAY6B,OA9BjIC,KAClB7B,EAAcR,EAAM,IA8BXC,GACGc,EAAAA,EAAAA,KAAA,MAAII,UAAWE,EAAOiB,aAAarB,UAC/BF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,iBApBO,IAAvBb,EAAYU,OACL,MAGPC,EAAAA,EAAAA,KAAA,MAAIwB,IAAK3B,EAAYO,UAAS,GAAAC,OAAKC,EAAOiB,aAAY,KAAAlB,OAAIjB,GAAYkB,EAAOE,WAAYN,SACzE,OAAXb,QAAW,IAAXA,OAAW,EAAXA,EAAaoC,KAAI,CAAAC,EAAsBC,KAAK,IAA1B,SAAER,EAAQ,MAAElC,GAAOyC,EAAA,OAClC1B,EAAAA,EAAAA,KAAA,MAAI4B,MAAsB,KAAfpC,GAAqBmC,GAA0B,OAAlBxC,QAAkB,IAAlBA,OAAkB,EAAlBA,EAAoBY,QAAS,CAAE8B,MAAO,WAAc,CAAC,EAAGC,GAAIjD,IAAuBI,EAAQ,SAAW,GAAgBA,MAAOA,EAAO8C,QAAUnB,GAf3KoB,EAACb,EAAUlC,UACpBgD,IAAVhD,IACAK,EAAe,IACfG,EAAc0B,GACdrC,EAAgB,CAAEgC,OAAQ,CAAE7B,WAChC,EAUwM+C,CAAmBb,EAAUlC,GAAOiB,SAC3NiB,GADkJlC,EAElJ,UAoBzB,C","sources":["webpack://quotes/./src/components/organisms/home/mobile/mobile-select/mobile-select.module.css?ae0e","components/organisms/home/mobile/mobile-select/mobile-select.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"typeAheadDropDown\":\"mobile-select_typeAheadDropDown__OL+sR\",\"darkTheme\":\"mobile-select_darkTheme__OMPaO\",\"dropDownList\":\"mobile-select_dropDownList__O49by\",\"active\":\"mobile-select_active__Ts+Jz\"};","import React, { useEffect, useRef, useState } from 'react'\r\nimport { retryTenTimes } from '../../../../../common/utils/apiUtils'\r\nimport styles from './mobile-select.module.css'\r\nconst OutsideAlerter = React.lazy(() => retryTenTimes(() => import(/* webpackChunkName: \"OutsideAlerter\" */ '../../../../../common/components/outside-alerter/outside-alerter')))\r\n\r\nexport default function MobileSelect({ options, currentPhilosopher, onChangeHandler, onFocusHandlerCallback, placeholder, value, isFetchingOptions, recentPhilosophers, darkMode }) {\r\n    const [suggestions, setSuggestions] = useState([])\r\n    const [searchText, setSearchText] = useState([])\r\n    const [isFocused, setIsFocused] = useState(false)\r\n    useEffect(() => setSearchText(value), [value])\r\n    const scollToRef = useRef()\r\n\r\n    useEffect(() => {\r\n        if (isFocused && options.length > 1) {\r\n            setSearchText('')\r\n            setSuggestions(options)\r\n            setIsFocused(false)\r\n        }\r\n    }, [options.length, isFocused])\r\n\r\n    const onFocusHandler = (e) => {\r\n        onFocusHandlerCallback()\r\n        setIsFocused(true)\r\n    }\r\n\r\n    const onTextChange = (e) => {\r\n        const value = e.target.value\r\n        if (value === '') setSuggestions(options)\r\n        else {\r\n            let suggestions = []\r\n            if (value.length > 0) {\r\n                const regex = new RegExp(`${value}`, `i`)\r\n                suggestions = options.filter(({ fullName }) => regex.test(fullName))\r\n            }\r\n\r\n            setSuggestions(suggestions)\r\n        }\r\n        setSearchText(value)\r\n    }\r\n\r\n    const onBlurHandler = () => {\r\n        setSearchText(value)\r\n    }\r\n\r\n    const suggestionSelected = (fullName, value) => {\r\n        if (value !== undefined) {\r\n            setSuggestions([])\r\n            setSearchText(fullName)\r\n            onChangeHandler({ target: { value } })\r\n        }\r\n    }\r\n\r\n    const renderSuggestions = () => {\r\n        if (suggestions.length === 0) {\r\n            return null\r\n        }\r\n        return (\r\n            <ul ref={scollToRef} className={`${styles.dropDownList} ${darkMode && styles.darkTheme}`}>\r\n                {suggestions?.map(({ fullName, value }, index) => (\r\n                    <li style={searchText === '' && index < recentPhilosophers?.length ? { color: '#FF00FF' } : {}} id={currentPhilosopher === value ? 'active' : ''} key={value} value={value} onClick={(e) => suggestionSelected(fullName, value)}>\r\n                        {fullName}\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <OutsideAlerter callback={() => setSuggestions([])}>\r\n            <div className={`${styles.typeAheadDropDown} ${darkMode ? styles.darkTheme : ''}`}>\r\n                <input name=\"search-philosopher\" type=\"text\" onFocus={onFocusHandler} onChange={onTextChange} placeholder={placeholder} value={searchText} onBlur={onBlurHandler} />\r\n                {isFetchingOptions ? (\r\n                    <ul className={styles.dropDownList}>\r\n                        <li>Loading...</li>\r\n                    </ul>\r\n                ) : (\r\n                    renderSuggestions()\r\n                )}\r\n            </div>\r\n        </OutsideAlerter>\r\n    )\r\n}\r\n"],"names":["OutsideAlerter","React","retryTenTimes","MobileSelect","_ref","options","currentPhilosopher","onChangeHandler","onFocusHandlerCallback","placeholder","value","isFetchingOptions","recentPhilosophers","darkMode","suggestions","setSuggestions","useState","searchText","setSearchText","isFocused","setIsFocused","useEffect","scollToRef","useRef","length","_jsx","callback","children","_jsxs","className","concat","styles","typeAheadDropDown","darkTheme","name","type","onFocus","e","onChange","target","regex","RegExp","filter","_ref2","fullName","test","onBlur","onBlurHandler","dropDownList","ref","map","_ref3","index","style","color","id","onClick","suggestionSelected","undefined"],"sourceRoot":""}