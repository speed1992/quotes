{"version":3,"file":"static/js/MobileMenu.68df4248.chunk.js","mappings":"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","sources":["webpack://quotes/./src/common/small-loader/small-loader.module.css?1d92","common/small-loader/small-loader.js","webpack://quotes/./src/components/organisms/home/mobile/mobile-menu/mobile-menu.module.css?6dff","components/organisms/home/mobile/mobile-menu/mobile-menu.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"loader\":\"small-loader_loader__Bfz9o\",\"spin\":\"small-loader_spin__Fo7bZ\",\"darkTheme\":\"small-loader_darkTheme__xBV+h\"};","import React from 'react'\nimport styles from './small-loader.module.css'\n\nconst SmallLoader = ({ darkMode }) => <span className={`${styles.loader} ${darkMode ? styles.darkTheme : ''}`}> </span>\n\nexport default SmallLoader\n","// extracted by mini-css-extract-plugin\nexport default {\"darkTheme\":\"mobile-menu_darkTheme__7nZ95\",\"lightTheme\":\"mobile-menu_lightTheme__benFJ\",\"slide_menu\":\"mobile-menu_slide_menu__r8BpI\",\"voiceSpeed\":\"mobile-menu_voiceSpeed__UVmaK\",\"userName\":\"mobile-menu_userName__ACZGf\",\"userInput\":\"mobile-menu_userInput__5sXrh\",\"voices\":\"mobile-menu_voices__MVFVx\",\"backupNote\":\"mobile-menu_backupNote__5AAxy\",\"textCenter\":\"mobile-menu_textCenter__Yzz5o\",\"paddingTop\":\"mobile-menu_paddingTop__XF4-r\",\"leftMargin\":\"mobile-menu_leftMargin__6JtNg\"};","import React, { useCallback, useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { setCurrentModalName } from '../../../../../common/components/modal/modalRedux'\nimport useSnackbar from '../../../../../common/components/snackbar/useSnackbar'\nimport SmallLoader from '../../../../../common/small-loader/small-loader'\nimport { retryTenTimes } from '../../../../../common/utils/apiUtils'\nimport { checkQueryParams } from '../../../../../common/utils/urlUtils'\nimport { WordLengthSearch } from '../../../tools/wordLengthSearch/wordLengthSearch'\nimport { ALPHABETICAL, LATEST } from '../../home-page/constants/constants'\nimport { setAutoPopulateWordCountRedux, setEndRedux, setStartRedux, setVoiceSpeedRedux, setVoiceTypeRedux } from '../../home-page/homePageRedux/homePageRedux'\nimport styles from './mobile-menu.module.css'\nconst BuildInfo = React.lazy(() => retryTenTimes(() => import(/* webpackChunkName: \"BuildInfo\" */ '../../../tools/build-info/build-info')))\nconst LoginRegister = React.lazy(() => retryTenTimes(() => import(/* webpackChunkName: \"LoginRegister\" */ '../login-register/login-register')))\nconst OutsideAlerter = React.lazy(() => retryTenTimes(() => import(/* webpackChunkName: \"OutsideAlerter\" */ '../../../../../common/components/outside-alerter/outside-alerter')))\n\nfunction MobileMenu({ markedMode, setMarkedMode, visible, toggleVisible, darkMode, setDarkMode, setSorting, sorting, userName, setUserName, setMarkedQuotes, isLoggedIn, setIsLoggedIn, password, setPassword, setIsFetching }) {\n    const voiceSpeed = useSelector(({ philosophersData: { voiceSpeed } }) => voiceSpeed)\n    const voiceType = useSelector(({ philosophersData: { voiceType } }) => voiceType)\n    const populateWordCount = useSelector(({ philosophersData: { populateWordCount } }) => populateWordCount)\n    const markedQuotes = useSelector(({ philosophersData: { markedQuotes } }) => markedQuotes)\n    const [voices, setVoices] = useState([])\n    const [openSnackbar] = useSnackbar()\n\n    const dispatch = useDispatch()\n\n    const onClickSortButtonHandler = (event) => {\n        const id = event.target.id\n\n        if (id === LATEST) setSorting(LATEST)\n        else setSorting(ALPHABETICAL)\n    }\n\n    useEffect(() => {\n        function setSpeech() {\n            return new Promise(function (resolve) {\n                let synth = window.speechSynthesis\n                let id\n\n                id = setInterval(() => {\n                    if (synth.getVoices().length !== 0) {\n                        resolve(synth.getVoices())\n                        clearInterval(id)\n                    }\n                }, 10)\n            })\n        }\n\n        let s = setSpeech()\n        s.then((voices) => setVoices(voices))\n    }, [])\n\n    return (\n        <OutsideAlerter callback={useCallback(() => toggleVisible(false), [toggleVisible])}>\n            <ul className={`${styles.slide_menu} ${darkMode ? styles.darkTheme : styles.lightTheme}`} id=\"slide_menu\" style={{ display: visible ? 'block' : 'none' }}>\n                <li>\n                    <div>Words Count</div> <div>Start & End</div>\n                    <WordLengthSearch isStartFeatureEnabled={true} />\n                    <button\n                        className={styles.leftMargin}\n                        onClick={() => {\n                            if (!populateWordCount) {\n                                dispatch(setStartRedux(1))\n                                dispatch(setEndRedux(''))\n                            }\n                        }}\n                    >\n                        Reset\n                    </button>\n                </li>\n                <li key=\"6\">\n                    <button onClick={useCallback(() => dispatch(setCurrentModalName('Report')), [])}>Open Report</button>\n                </li>\n                <li key=\"2\">\n                    <label htmlFor=\"marked-mode\">Marked Mode</label>\n                    <input\n                        id=\"marked-mode\"\n                        type=\"checkbox\"\n                        checked={markedMode}\n                        onChange={({ target: { checked } }) => {\n                            setMarkedMode(checked)\n                            dispatch(setAutoPopulateWordCountRedux(false))\n                            if (!checked) {\n                                dispatch(setStartRedux(1))\n                                dispatch(setEndRedux(''))\n                            }\n                        }}\n                    />\n                </li>\n                {markedMode && (\n                    <li key=\"16\">\n                        Auto Set Minimum Word Count\n                        <input\n                            type=\"checkbox\"\n                            checked={populateWordCount}\n                            onChange={({ target: { checked } }) => {\n                                dispatch(setAutoPopulateWordCountRedux(checked))\n                                if (!checked) {\n                                    dispatch(setStartRedux(1))\n                                    dispatch(setEndRedux(''))\n                                }\n                            }}\n                        />\n                    </li>\n                )}\n                <li key=\"3\">\n                    <label htmlFor=\"dark-mode\">Dark Mode</label>\n                    <input id=\"dark-mode\" type=\"checkbox\" checked={darkMode} onChange={({ target: { checked } }) => setDarkMode(checked)} />\n                </li>\n                <li key=\"17\">\n                    <button onClick={useCallback(() => dispatch(setCurrentModalName('Exclusions')), [])}>Manage Filters</button>\n                </li>\n                <li key=\"4\">\n                    Voice Speed[1-20]\n                    <input onChange={(event) => dispatch(setVoiceSpeedRedux(event.target.value / 10))} className={styles.voiceSpeed} type=\"number\" value={voiceSpeed ? voiceSpeed * 10 : ''} />\n                </li>\n                <li key=\"5\">\n                    <div>Available Voices</div>\n                    {voices?.length !== 0 ? (\n                        <select\n                            onChange={(event) => {\n                                dispatch(setVoiceTypeRedux(event?.target?.value))\n                                speechSynthesis.cancel()\n                            }}\n                            className={styles.voices}\n                            value={voiceType}\n                        >\n                            {voices?.map((voice, index) => (\n                                <option value={index} key={voice?.name}>\n                                    {voice?.name}\n                                </option>\n                            ))}\n                        </select>\n                    ) : (\n                        <div className={`${styles.textCenter} ${styles.paddingTop}`}>\n                            <SmallLoader darkMode />\n                        </div>\n                    )}\n                </li>\n\n                <li key=\"1\">\n                    Sort philosophers\n                    <div>\n                        <input type=\"radio\" id={LATEST} name=\"sortType\" onClick={onClickSortButtonHandler} defaultChecked={sorting === LATEST} />\n                        <label htmlFor={LATEST}>Latest</label>\n                    </div>\n                    <div>\n                        <input type=\"radio\" id={ALPHABETICAL} name=\"sortType\" onClick={onClickSortButtonHandler} defaultChecked={sorting === ALPHABETICAL} />\n                        <label htmlFor={ALPHABETICAL}>Alphabetical</label>\n                    </div>\n                </li>\n\n                <li key=\"7\">\n                    <LoginRegister {...{ setUserName, userName, openSnackbar, isLoggedIn, setIsLoggedIn, setMarkedQuotes, markedQuotes, password, setPassword, setIsFetching }} />\n                    {!isLoggedIn && <div className={styles.backupNote}>You can login to backup your marked quotes in database in case browser data gets deleted.</div>}\n                </li>\n\n                <li key=\"8\">\n                    <BuildInfo />\n                </li>\n                {checkQueryParams('dev') && (\n                    <li key=\"9\">\n                        <button onClick={useCallback(() => dispatch(setCurrentModalName('Logs')), [])}>Open Dev Logs</button>\n                    </li>\n                )}\n            </ul>\n        </OutsideAlerter>\n    )\n}\n\nexport default MobileMenu\n"],"names":["_ref","darkMode","_jsx","className","styles","children","BuildInfo","React","retryTenTimes","LoginRegister","OutsideAlerter","markedMode","setMarkedMode","visible","toggleVisible","setDarkMode","setSorting","sorting","userName","setUserName","setMarkedQuotes","isLoggedIn","setIsLoggedIn","password","setPassword","setIsFetching","voiceSpeed","useSelector","_ref2","philosophersData","voiceType","_ref3","populateWordCount","_ref4","markedQuotes","_ref5","voices","setVoices","useState","openSnackbar","useSnackbar","dispatch","useDispatch","onClickSortButtonHandler","event","target","id","LATEST","ALPHABETICAL","useEffect","Promise","resolve","synth","window","speechSynthesis","setInterval","getVoices","length","clearInterval","then","callback","useCallback","_jsxs","style","display","WordLengthSearch","isStartFeatureEnabled","onClick","setStartRedux","setEndRedux","setCurrentModalName","htmlFor","type","checked","onChange","_ref6","setAutoPopulateWordCountRedux","_ref7","_ref8","setVoiceSpeedRedux","value","_event$target","setVoiceTypeRedux","cancel","map","voice","index","name","SmallLoader","defaultChecked","checkQueryParams"],"sourceRoot":""}