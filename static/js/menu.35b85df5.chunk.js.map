{"version":3,"file":"static/js/menu.35b85df5.chunk.js","mappings":"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","sources":["webpack://quotes/./src/common/small-loader/small-loader.module.css?1d92","common/small-loader/small-loader.js","webpack://quotes/./src/components/organisms/home/mobile/mobile-menu/mobile-menu.module.css?6dff","components/organisms/home/mobile/mobile-menu/mobile-menu.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"loader\":\"small-loader_loader__Bfz9o\",\"spin\":\"small-loader_spin__Fo7bZ\",\"darkTheme\":\"small-loader_darkTheme__xBV+h\"};","import React from 'react'\nimport styles from './small-loader.module.css'\n\nconst SmallLoader = ({ darkMode }) => <span className={`${styles.loader} ${darkMode ? styles.darkTheme : ''}`}> </span>\n\nexport default SmallLoader\n","// extracted by mini-css-extract-plugin\nexport default {\"darkTheme\":\"mobile-menu_darkTheme__7nZ95\",\"lightTheme\":\"mobile-menu_lightTheme__benFJ\",\"slide_menu\":\"mobile-menu_slide_menu__r8BpI\",\"voiceSpeed\":\"mobile-menu_voiceSpeed__UVmaK\",\"userName\":\"mobile-menu_userName__ACZGf\",\"userInput\":\"mobile-menu_userInput__5sXrh\",\"voices\":\"mobile-menu_voices__MVFVx\",\"backupNote\":\"mobile-menu_backupNote__5AAxy\",\"textCenter\":\"mobile-menu_textCenter__Yzz5o\",\"paddingTop\":\"mobile-menu_paddingTop__XF4-r\"};","import React, { useCallback, useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { setCurrentModalName } from '../../../../../common/components/modal/modalRedux'\nimport useSnackbar from '../../../../../common/components/snackbar/useSnackbar'\nimport SmallLoader from '../../../../../common/small-loader/small-loader'\nimport { retryTenTimes } from '../../../../../common/utils/apiUtils'\nimport { ALPHABETICAL, LATEST } from '../../home-page/constants/constants'\nimport { setVoiceSpeedRedux, setVoiceTypeRedux } from '../../home-page/homePageRedux/homePageRedux'\nimport styles from './mobile-menu.module.css'\nconst BuildInfo = React.lazy(() => retryTenTimes(() => import('../../../tools/build-info/build-info')))\nconst LoginRegister = React.lazy(() => retryTenTimes(() => import('../login-register/login-register')))\nconst OutsideAlerter = React.lazy(() => retryTenTimes(() => import('../../../../../common/components/outside-alerter/outside-alerter')))\n\nfunction MobileMenu({ markedMode, setMarkedMode, visible, toggleVisible, darkMode, setDarkMode, setSorting, sorting, userName, setUserName, setMarkedQuotes, isLoggedIn, setIsLoggedIn, password, setPassword, setIsFetching }) {\n    const voiceSpeed = useSelector(({ philosophersData: { voiceSpeed } }) => voiceSpeed)\n    const voiceType = useSelector(({ philosophersData: { voiceType } }) => voiceType)\n    const markedQuotes = useSelector(({ philosophersData: { markedQuotes } }) => markedQuotes)\n    const [voices, setVoices] = useState([])\n    const [openSnackbar] = useSnackbar()\n\n    const dispatch = useDispatch()\n\n    const onClickSortButtonHandler = (event) => {\n        const id = event.target.id\n\n        if (id === LATEST) setSorting(LATEST)\n        else setSorting(ALPHABETICAL)\n    }\n\n    useEffect(() => {\n        function setSpeech() {\n            return new Promise(function (resolve) {\n                let synth = window.speechSynthesis\n                let id\n\n                id = setInterval(() => {\n                    if (synth.getVoices().length !== 0) {\n                        resolve(synth.getVoices())\n                        clearInterval(id)\n                    }\n                }, 10)\n            })\n        }\n\n        let s = setSpeech()\n        s.then((voices) => setVoices(voices))\n    }, [])\n\n    return (\n        <OutsideAlerter callback={useCallback(() => toggleVisible(false), [toggleVisible])}>\n            <ul className={`${styles.slide_menu} ${darkMode ? styles.darkTheme : styles.lightTheme}`} id=\"slide_menu\" style={{ display: visible ? 'block' : 'none' }}>\n                <li key=\"1\">\n                    Sort philosophers\n                    <div>\n                        <input type=\"radio\" id={LATEST} name=\"sortType\" onClick={onClickSortButtonHandler} defaultChecked={sorting === LATEST} />\n                        <label htmlFor={LATEST}>Latest</label>\n                    </div>\n                    <div>\n                        <input type=\"radio\" id={ALPHABETICAL} name=\"sortType\" onClick={onClickSortButtonHandler} defaultChecked={sorting === ALPHABETICAL} />\n                        <label htmlFor={ALPHABETICAL}>Alphabetical</label>\n                    </div>\n                </li>\n                <li key=\"2\">\n                    Marked Mode\n                    <input type=\"checkbox\" checked={markedMode} onChange={({ target: { checked } }) => setMarkedMode(checked)} />\n                </li>\n                <li key=\"3\">\n                    Dark Mode\n                    <input type=\"checkbox\" checked={darkMode} onChange={({ target: { checked } }) => setDarkMode(checked)} />\n                </li>\n                <li key=\"4\">\n                    Voice Speed[1-20]\n                    <input onChange={(event) => dispatch(setVoiceSpeedRedux(event.target.value / 10))} className={styles.voiceSpeed} type=\"number\" value={voiceSpeed ? voiceSpeed * 10 : ''} />\n                </li>\n                <li key=\"5\">\n                    <div>Available Voices</div>\n                    {voices?.length !== 0 ? (\n                        <select\n                            onChange={(event) => {\n                                dispatch(setVoiceTypeRedux(event?.target?.value))\n                                speechSynthesis.cancel()\n                            }}\n                            className={styles.voices}\n                            value={voiceType}\n                        >\n                            {voices?.map((voice, index) => (\n                                <option value={index} key={voice?.name}>\n                                    {voice?.name}\n                                </option>\n                            ))}\n                        </select>\n                    ) : (\n                        <div className={`${styles.textCenter} ${styles.paddingTop}`}>\n                            <SmallLoader darkMode />\n                        </div>\n                    )}\n                </li>\n                <li key=\"6\">\n                    <button onClick={useCallback(() => dispatch(setCurrentModalName('Report')), [])}>Open Report</button>\n                </li>\n                <li key=\"7\">\n                    <LoginRegister {...{ setUserName, userName, openSnackbar, isLoggedIn, setIsLoggedIn, setMarkedQuotes, markedQuotes, password, setPassword, setIsFetching }} />\n                    {!isLoggedIn && <div className={styles.backupNote}>You can login to backup your marked quotes in database in case browser data gets deleted.</div>}\n                </li>\n                <li key=\"8\">\n                    <BuildInfo />\n                </li>\n            </ul>\n        </OutsideAlerter>\n    )\n}\n\nexport default MobileMenu\n"],"names":["darkMode","className","styles","BuildInfo","React","retryTenTimes","LoginRegister","OutsideAlerter","markedMode","setMarkedMode","visible","toggleVisible","setDarkMode","setSorting","sorting","userName","setUserName","setMarkedQuotes","isLoggedIn","setIsLoggedIn","password","setPassword","setIsFetching","voiceSpeed","useSelector","philosophersData","voiceType","markedQuotes","useState","voices","setVoices","useSnackbar","openSnackbar","dispatch","useDispatch","onClickSortButtonHandler","event","target","id","LATEST","ALPHABETICAL","useEffect","Promise","resolve","synth","window","speechSynthesis","setInterval","getVoices","length","clearInterval","then","callback","useCallback","style","display","type","name","onClick","defaultChecked","htmlFor","checked","onChange","setVoiceSpeedRedux","value","setVoiceTypeRedux","cancel","map","voice","index","setCurrentModalName"],"sourceRoot":""}