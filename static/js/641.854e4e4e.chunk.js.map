{"version":3,"file":"static/js/641.854e4e4e.chunk.js","mappings":"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","sources":["components/organisms/home/mobile/mobile-menu/utils/utils.js","components/organisms/home/mobile/login-register/login-register.js"],"sourcesContent":["import { retryTenTimes } from '../../../../../../common/utils/apiUtils'\r\n\r\nexport const sendUserDetails = async ({ userName, markedQuotes, openSnackbar }) => {\r\n    let response = await retryTenTimes(\r\n        async () =>\r\n            await fetch('https://quotes-backend.vercel.app/api/markedQuotes/backup', {\r\n                method: 'post',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({\r\n                    userName,\r\n                    markedQuotes,\r\n                    dateSynced: Date.now(),\r\n                }),\r\n            })\r\n    )\r\n\r\n    response = await response.json()\r\n    openSnackbar('Auto-Sync :' + JSON.stringify(response))\r\n}\r\n\r\nexport const getUserDetails = async ({ userName, markedQuotes, openSnackbar, setMarkedQuotes }) => {\r\n    let response = await retryTenTimes(\r\n        async () =>\r\n            await fetch('https://quotes-backend.vercel.app/api/markedQuotes/restore', {\r\n                method: 'post',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({\r\n                    userName,\r\n                }),\r\n            })\r\n    )\r\n\r\n    response = await response.json()\r\n    if (response?.ok) {\r\n        try {\r\n            const markedQuotesFromServer = response?.results?.[0]?.markedQuotes\r\n            const markedQuotesFromServerCount = Object.values(markedQuotesFromServer).flat().length\r\n            if (markedQuotesFromServer && markedQuotesFromServerCount > 0) {\r\n                return { markedQuotesFromServer, dateFromServer: response?.results?.[0]?.dateSynced }\r\n                // setMarkedQuotes(response?.results?.[0]?.markedQuotes)\r\n            }\r\n        } catch (error) {\r\n            openSnackbar(JSON.stringify(error))\r\n        }\r\n    } else {\r\n        openSnackbar(JSON.stringify(response.error))\r\n    }\r\n}\r\n\r\nexport const loginRegister = async ({ apiCallType, userName, password, setIsLoggedIn, openSnackbar }) => {\r\n    const capitalizedUserName = userName.charAt(0).toUpperCase() + userName.slice(1)\r\n    let response\r\n    if (apiCallType === 'login') {\r\n        response = await retryTenTimes(\r\n            async () =>\r\n                await fetch('https://quotes-backend.vercel.app/api/user/login', {\r\n                    method: 'post',\r\n                    headers: { 'Content-Type': 'application/json' },\r\n                    body: JSON.stringify({\r\n                        userName,\r\n                        password,\r\n                    }),\r\n                })\r\n        )\r\n    } else {\r\n        response = await retryTenTimes(\r\n            async () =>\r\n                await fetch('https://quotes-backend.vercel.app/api/user/create', {\r\n                    method: 'post',\r\n                    headers: { 'Content-Type': 'application/json' },\r\n                    body: JSON.stringify({\r\n                        userName,\r\n                        password,\r\n                    }),\r\n                })\r\n        )\r\n    }\r\n\r\n    response = await response.json()\r\n\r\n    if (response?.ok) {\r\n        setIsLoggedIn(true)\r\n        openSnackbar(capitalizedUserName + ' ' + JSON.stringify(response.serverResponse))\r\n    } else {\r\n        openSnackbar(JSON.stringify(response.error))\r\n    }\r\n}\r\n","import { useEffect } from 'react'\r\nimport { getUserDetails, loginRegister, sendUserDetails } from '../mobile-menu/utils/utils'\r\n\r\nconst LoginRegister = ({ setUserName, userName, isLoggedIn, setIsLoggedIn, openSnackbar, markedQuotes, setMarkedQuotes, password, setPassword }) => {\r\n    const capitalizedUserName = userName.charAt(0).toUpperCase() + userName.slice(1)\r\n\r\n    useEffect(() => {\r\n        if (isLoggedIn) {\r\n            ;(async () => {\r\n                const markedQuoteClientCount = Object.values(markedQuotes).flat().length\r\n                let { markedQuotesFromServer, dateFromServer } = await getUserDetails({ userName, markedQuotes, openSnackbar, setMarkedQuotes })\r\n                if (markedQuotesFromServer) {\r\n                    const markedQuotesFromServerCount = Object.values(markedQuotesFromServer).flat().length\r\n                    if (markedQuotesFromServerCount > markedQuoteClientCount) {\r\n                        setMarkedQuotes(markedQuotesFromServer)\r\n                        openSnackbar('Auto-Sync :' + 'Restored all marked quotes!', 2000)\r\n                    } else if (markedQuoteClientCount > markedQuotesFromServerCount) {\r\n                        var currentClientDate = new Date()\r\n                        currentClientDate.setHours(0, 0, 0, 0)\r\n                        dateFromServer = new Date(dateFromServer)\r\n                        dateFromServer.setHours(0, 0, 0, 0)\r\n                        if (currentClientDate > dateFromServer) {\r\n                            await sendUserDetails({ userName, markedQuotes, openSnackbar })\r\n                        }\r\n                    }\r\n                }\r\n            })()\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <>\r\n            {!isLoggedIn ? (\r\n                <>\r\n                    Username\r\n                    <input type=\"text\" className=\"userInput\" onChange={(e) => setUserName(e.target.value)} value={userName} />\r\n                    Password\r\n                    <input type=\"password\" className=\"userInput\" onChange={(e) => setPassword(e.target.value)} value={password} />\r\n                    <button className=\"menuBtn\" onClick={() => loginRegister({ apiCallType: 'login', userName, password, setIsLoggedIn, openSnackbar })}>\r\n                        Login\r\n                    </button>\r\n                    <button className=\"menuBtn\" onClick={() => loginRegister({ apiCallType: 'register', userName, password, setIsLoggedIn, openSnackbar })}>\r\n                        Register\r\n                    </button>\r\n                </>\r\n            ) : (\r\n                <>\r\n                    <div className=\"userName\">Hi {capitalizedUserName}!</div>\r\n                    <button className=\"menuBtn\" onClick={() => setIsLoggedIn(false)}>\r\n                        Logout\r\n                    </button>\r\n                </>\r\n            )}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default LoginRegister\r\n"],"names":["sendUserDetails","userName","markedQuotes","openSnackbar","retryTenTimes","fetch","method","headers","body","JSON","stringify","dateSynced","Date","now","response","json","getUserDetails","setMarkedQuotes","ok","markedQuotesFromServer","results","markedQuotesFromServerCount","Object","values","flat","length","dateFromServer","error","loginRegister","apiCallType","password","setIsLoggedIn","capitalizedUserName","charAt","toUpperCase","slice","serverResponse","setUserName","isLoggedIn","setPassword","useEffect","markedQuoteClientCount","currentClientDate","setHours","className","onClick","type","onChange","e","target","value"],"sourceRoot":""}