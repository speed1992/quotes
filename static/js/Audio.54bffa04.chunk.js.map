{"version":3,"file":"static/js/Audio.54bffa04.chunk.js","mappings":"+JAqBA,SAASA,EAAaC,EAASC,EAAYC,EAAWC,GAClD,IAAIC,EAAQ,IAAIC,yBAAyBL,GAMzC,OALAI,EAAME,KAAOL,EACbG,EAAMG,MAAQJ,EAAOD,GACrBE,EAAMI,KAAOL,EAAOD,GAAWM,KAC/BC,OAAOC,gBAAgBC,MAAMP,GAEtB,IAAIQ,SAAQ,CAACC,EAASC,IAAYV,EAAMW,MAAQF,GAC3D,C,aCzBA,MAOA,EAPcG,IAAqF,IAApF,MAAEC,EAAK,YAAEC,EAAW,eAAEC,EAAc,kBAAEC,EAAiB,QAAEC,EAAO,WAAEpB,GAAYe,EACzF,MAAMd,GAAYoB,EAAAA,EAAAA,KAAaC,GAAUA,EAAMC,iBAAiBtB,YAE1DuB,GAAcC,EAAAA,EAAAA,cAAY,IDL7BC,eAAoBV,EAAOC,EAAajB,EAAYC,EAAWmB,EAASD,GAC3E,MAAMQ,EAAQnB,OAAOC,gBACjBmB,EAAaD,EAAME,SAEjB3B,EAASyB,EAAMG,YAErB,IAAIC,EAASA,OACbA,IAEA,IAAIC,EAAI,IAAIrB,SAASC,GAAamB,EAASnB,IAE3C,IAAKgB,EACD,IAAK,IAAIK,EAAIjB,EAAOiB,GAAe,OAAXhB,QAAW,IAAXA,OAAW,EAAXA,EAAaiB,QAAQD,IACzCd,EAAkBc,IAClBE,EAAAA,EAAAA,IAAqBf,EAASa,EAAGhB,SAC3BN,QAAQyB,KAAK,CAACJ,EAAGlC,EAAamB,EAAYgB,GAAU,MAAGjC,EAAYC,EAAWC,IAEhG,CCZ0CmC,CAAKrB,EAAOC,EAAajB,EAAYC,EAAWmB,EAASD,IAAoB,CAACF,EAAaD,EAAOI,EAASF,EAAgBC,EAAmBnB,EAAYC,IAEhM,OAAOqC,EAAAA,EAAAA,MAAA,UAAQC,QAAS9B,gBAAgBoB,SAAW,IAAMpB,gBAAgBsB,SAAWP,EAAYgB,SAAA,CAAE/B,gBAAgBoB,SAAW,OAAS,OAAO,WAAe,C","sources":["components/organisms/tools/audio/utils/speechUtils.js","components/organisms/tools/audio/audio.jsx"],"sourcesContent":["import { scrollToMemorizedRow } from '../../../../../common/utils/utils'\r\n\r\nexport async function play(index, currentData, voiceSpeed, voiceType, listRef, setScrollPosition) {\r\n    const synth = window.speechSynthesis,\r\n        isSpeaking = synth.speaking\r\n\r\n    const voices = synth.getVoices()\r\n\r\n    let cancel = () => {}\r\n    cancel()\r\n\r\n    let p = new Promise((resolve) => (cancel = resolve))\r\n\r\n    if (!isSpeaking)\r\n        for (let i = index; i < currentData?.length; i++) {\r\n            setScrollPosition(i)\r\n            scrollToMemorizedRow(listRef, i, currentData)\r\n            await Promise.race([p, getNextAudio(currentData[i]['quote'], voiceSpeed, voiceType, voices)])\r\n        }\r\n}\r\n\r\nfunction getNextAudio(message, voiceSpeed, voiceType, voices) {\r\n    let audio = new SpeechSynthesisUtterance(message)\r\n    audio.rate = voiceSpeed\r\n    audio.voice = voices[voiceType]\r\n    audio.lang = voices[voiceType].lang\r\n    window.speechSynthesis.speak(audio)\r\n\r\n    return new Promise((resolve, reject) => (audio.onend = resolve))\r\n}\r\n","import React, { useCallback } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { play } from './utils/speechUtils'\r\n\r\nconst Audio = ({ index, currentData, scrollPosition, setScrollPosition, listRef, voiceSpeed }) => {\r\n    const voiceType = useSelector((state) => state.philosophersData.voiceType)\r\n\r\n    const playHandler = useCallback(() => play(index, currentData, voiceSpeed, voiceType, listRef, setScrollPosition), [currentData, index, listRef, scrollPosition, setScrollPosition, voiceSpeed, voiceType])\r\n\r\n    return <button onClick={speechSynthesis.speaking ? () => speechSynthesis.cancel() : playHandler}>{speechSynthesis.speaking ? 'Stop' : 'Play'} Audio</button>\r\n}\r\nexport default Audio\r\n"],"names":["getNextAudio","message","voiceSpeed","voiceType","voices","audio","SpeechSynthesisUtterance","rate","voice","lang","window","speechSynthesis","speak","Promise","resolve","reject","onend","_ref","index","currentData","scrollPosition","setScrollPosition","listRef","useSelector","state","philosophersData","playHandler","useCallback","async","synth","isSpeaking","speaking","getVoices","cancel","p","i","length","scrollToMemorizedRow","race","play","_jsxs","onClick","children"],"sourceRoot":""}