{"version":3,"file":"static/js/Modal.195e0153.chunk.js","mappings":"+JACA,SAAgB,eAAiB,8BAA8B,MAAQ,qBAAqB,gBAAkB,+BAA+B,UAAY,yBAAyB,SAAW,wBAAwB,MAAQ,sB,uBCK7N,MAiBA,EAjBcA,IAA0B,IAAzB,SAAEC,EAAQ,MAAEC,GAAOF,EAC9B,MAAMG,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,KAAaC,IAAK,IAAAC,EAAA,OAAU,OAALD,QAAK,IAALA,GAAuB,QAAlBC,EAALD,EAAOE,wBAAgB,IAAAD,OAAlB,EAALA,EAAyBH,QAAQ,IAEzE,OACIK,EAAAA,EAAAA,MAAA,OAAKC,UAAS,GAAAC,OAAKC,EAAOC,eAAc,KAAAF,OAAIP,EAAWQ,EAAOR,SAAWQ,EAAOE,WAAYd,SAAA,EACxFS,EAAAA,EAAAA,MAAA,OAAKC,UAAWE,EAAOG,SAASf,SAAA,EAC5BgB,EAAAA,EAAAA,KAAA,QAAMN,UAAWE,EAAOX,MAAMD,SAAEC,KAChCe,EAAAA,EAAAA,KAAA,UAAQN,UAAS,GAAAC,OAAKC,EAAOK,MAAK,KAAAN,QAAIO,EAAAA,EAAAA,MAAcN,EAAOO,gBAAkB,IAAMC,SAASC,EAAAA,EAAAA,cAAY,IAAMnB,GAASoB,EAAAA,EAAAA,IAAoB,IAAK,MAAKtB,SAAC,SAIzJA,IACC,C,ySCjBP,MAAMuB,iBAAoBC,IACzBA,EAAQC,SACRD,EAAQC,QAAQC,YAAY,EAChC,EAGSC,qBAAuBA,CAACH,EAASI,EAAgBC,MAC3C,OAAXA,QAAW,IAAXA,OAAW,EAAXA,EAAaC,QAAS,GAAKN,EAAQC,eACZM,IAAnBH,GAAmD,cAAnBA,GAAkCA,GAAkBA,EAAiB,EACrGJ,EAAQC,QAAQC,YAAYE,GAE5BL,iBAAiBC,GAEzB,EAGSQ,gBAAkBA,CAACR,EAASS,EAAcJ,EAAaK,KAChE,MAAMC,EAAUF,EAAaC,GAC7B,IAAe,OAAXL,QAAW,IAAXA,OAAW,EAAXA,EAAaC,QAAS,GAAKN,EAAQC,QACnC,QAAgBM,IAAZI,GAAqC,cAAZA,GAA2BA,GAAWA,EAAU,EAAG,CAC5E,MAAMC,EAAQP,EAAYQ,WAAUtC,IAAa,IAAZ,GAAEuC,GAAIvC,EACvC,OAAOuC,IAAOH,CAAO,IAErBC,GAAS,GAAGZ,EAAQC,QAAQC,YAAYU,EAChD,MACIb,iBAAiBC,EAEzB,EAGSe,OAASC,QAAiD,IAAhD,WAAEC,WAAU,YAAEZ,YAAW,cAAEa,eAAeF,MAC7D,OAAO,IAAIG,SAASC,eACIb,IAAhBF,cACAgB,iDAAAA,EAAOC,YAAY,CAAEjB,wBAAaY,sBAAYC,4BAAeK,WAAY,qBACzEF,iDAAAA,EAAOG,UAAaC,QAChB,MAAMC,yBAA2BC,KAAKC,MAAMC,KAAK,IAAD1C,OAAKwC,KAAKG,UAAUL,MAAMM,MAAK,OAC/EX,QAAQM,yBAAyB,EAEzC,GACF,EAGOM,SAAWA,IAAMC,OAAOC,YAAc,IAEtCxC,UAAYA,IAAMuC,OAAOC,YAAc,G,iBC9C7C,IAAIb,E,iBACPY,OAAOE,OACPd,EAAS,IAAIc,OAAO,IAAIC,IAAI,mBAE5BC,MAAM,4C","sources":["webpack://quotes/./src/common/components/modal/modal.module.css?0533","common/components/modal/modal.jsx","common/utils/utils.js","common/web-workers/worker.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"modalContainer\":\"modal_modalContainer__3m8jF\",\"close\":\"modal_close__43oiV\",\"desktopCloseBtn\":\"modal_desktopCloseBtn__kjVr0\",\"lightMode\":\"modal_lightMode__854yT\",\"titleBar\":\"modal_titleBar__dY+Og\",\"title\":\"modal_title__xmK-V\"};","import { useCallback } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { isDesktop } from '../../utils/utils'\r\nimport styles from './modal.module.css'\r\nimport { setCurrentModalName } from './modalRedux'\r\n\r\nconst Modal = ({ children, title }) => {\r\n    const dispatch = useDispatch()\r\n    const darkMode = useSelector((state) => state?.philosophersData?.darkMode)\r\n\r\n    return (\r\n        <div className={`${styles.modalContainer} ${darkMode ? styles.darkMode : styles.lightMode}`}>\r\n            <div className={styles.titleBar}>\r\n                <span className={styles.title}>{title}</span>\r\n                <button className={`${styles.close} ${isDesktop() ? styles.desktopCloseBtn : ''}`} onClick={useCallback(() => dispatch(setCurrentModalName(''), []))}>\r\n                    X\r\n                </button>\r\n            </div>\r\n            {children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Modal\r\n","import { worker } from '../web-workers/worker'\r\n\r\nexport const scrollToFirstRow = (listRef) => {\r\n    if (listRef.current) {\r\n        listRef.current.scrollToRow(0)\r\n    }\r\n}\r\n\r\nexport const scrollToMemorizedRow = (listRef, scrollPosition, currentData) => {\r\n    if (currentData?.length > 0 && listRef.current) {\r\n        if (scrollPosition !== undefined && scrollPosition !== 'undefined' && scrollPosition && scrollPosition > 0) {\r\n            listRef.current.scrollToRow(scrollPosition)\r\n        } else {\r\n            scrollToFirstRow(listRef)\r\n        }\r\n    }\r\n}\r\n\r\nexport const scrollToQuoteId = (listRef, scrollObject, currentData, currentPhilosopher) => {\r\n    const quoteId = scrollObject[currentPhilosopher]\r\n    if (currentData?.length > 0 && listRef.current) {\r\n        if (quoteId !== undefined && quoteId !== 'undefined' && quoteId && quoteId > 0) {\r\n            const index = currentData.findIndex(({ id }) => {\r\n                return id === quoteId\r\n            })\r\n            if (index > -1) listRef.current.scrollToRow(index)\r\n        } else {\r\n            scrollToFirstRow(listRef)\r\n        }\r\n    }\r\n}\r\n\r\nexport const search = ({ searchText, currentData, searchFilters }) => {\r\n    return new Promise((resolve) => {\r\n        if (currentData !== undefined) {\r\n            worker.postMessage({ currentData, searchText, searchFilters, filterName: 'searchTermFilter' })\r\n            worker.onmessage = (event) => {\r\n                const filteredQuotesFromWorker = JSON.parse(eval(`(${JSON.stringify(event.data)})`))\r\n                resolve(filteredQuotesFromWorker)\r\n            }\r\n        }\r\n    })\r\n}\r\n\r\nexport const isMobile = () => window.innerWidth <= 600\r\n\r\nexport const isDesktop = () => window.innerWidth >= 600\r\n","export let worker\r\nif (window.Worker) {\r\n    worker = new Worker(new URL('./filter-worker.js', import.meta.url))\r\n} else {\r\n    alert(\"Your browser doesn't support web workers.\")\r\n}\r\n"],"names":["_ref","children","title","dispatch","useDispatch","darkMode","useSelector","state","_state$philosophersDa","philosophersData","_jsxs","className","concat","styles","modalContainer","lightMode","titleBar","_jsx","close","isDesktop","desktopCloseBtn","onClick","useCallback","setCurrentModalName","scrollToFirstRow","listRef","current","scrollToRow","scrollToMemorizedRow","scrollPosition","currentData","length","undefined","scrollToQuoteId","scrollObject","currentPhilosopher","quoteId","index","findIndex","id","search","_ref2","searchText","searchFilters","Promise","resolve","worker","postMessage","filterName","onmessage","event","filteredQuotesFromWorker","JSON","parse","eval","stringify","data","isMobile","window","innerWidth","Worker","URL","alert"],"sourceRoot":""}