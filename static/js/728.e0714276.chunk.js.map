{"version":3,"file":"static/js/728.e0714276.chunk.js","mappings":"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","sources":["common/utils/commonUtils.js","common/utils/localStorageUtils.js","common/utils/staticDataUtils.js","common/utils/utils.js","common/web-workers/worker.js","components/organisms/analysis/table/TableBody.js","components/organisms/analysis/table/TableHead.js","components/organisms/analysis/table/useSortableTable.js","components/organisms/analysis/table/table.jsx","components/organisms/analysis/report/report.js","components/organisms/analysis/report/utils/utils.js","common/utils/lazyLoadUtils.js","common/utils/objectUtils.js","components/organisms/home/desktop/desktop-header/utils/utils.js","components/organisms/home/home-page/constants/constants.js","components/organisms/home/home-page/utils/utils.js","components/organisms/home/quotes-list/utils/utils.js"],"sourcesContent":["export const isUndefined = (value) => typeof value === 'undefined'\r\nexport const isObjEmpty = (obj) => Object.values(obj).length === 0 && obj.constructor === Object\r\n\r\nexport function uuidv4() {\r\n    return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, (c) => (c ^ (crypto.getRandomValues(new Uint8Array(1))[0] & (15 >> (c / 4)))).toString(16))\r\n}\r\n","import { useEffect, useState } from 'react'\r\n\r\nexport function getStorageValue(key, defaultValue) {\r\n    const saved = localStorage.getItem(key)\r\n    const initial = JSON.parse(saved)\r\n    if (initial === undefined || initial === 'undefined' || initial === 'null' || initial === null) {\r\n        return defaultValue\r\n    } else return initial\r\n}\r\n\r\nexport function setStorageValue(key, value) {\r\n    localStorage.setItem(key, JSON.stringify(value))\r\n}\r\n\r\nexport const useLocalStorage = (key, defaultValue) => {\r\n    const [value, setValue] = useState(() => {\r\n        return getStorageValue(key, defaultValue)\r\n    })\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem(key, JSON.stringify(value))\r\n    }, [key, value])\r\n\r\n    return [value, setValue]\r\n}\r\n","import { getStorageValue } from './localStorageUtils'\r\n\r\nexport const removeReadData = ({ index, currentPhilosopher, markedMode, markedQuotes = {}, setMarkedQuotes, currentData, setCurrentData }) => {\r\n    let newMarkedQuotes = JSON.parse(JSON.stringify(markedQuotes))\r\n    let readQuotesArray = []\r\n\r\n    const READ_ARRAY_LOCALSTORAGE_KEY = `${currentPhilosopher}-MARKED_AS_READ`\r\n    readQuotesArray = getStorageValue(READ_ARRAY_LOCALSTORAGE_KEY, [])\r\n\r\n    if (markedQuotes && markedQuotes[currentPhilosopher] !== undefined) {\r\n        readQuotesArray = [...readQuotesArray, ...markedQuotes[currentPhilosopher]]\r\n    }\r\n\r\n    readQuotesArray = [...new Set(readQuotesArray)]\r\n\r\n    if (index) {\r\n        readQuotesArray.push(index)\r\n    }\r\n\r\n    newMarkedQuotes[currentPhilosopher] = readQuotesArray\r\n    setMarkedQuotes(newMarkedQuotes)\r\n\r\n    const newData = currentData.filter(({ id }, _) => readQuotesArray.indexOf(id) === -1)\r\n    setCurrentData(JSON.parse(JSON.stringify(newData)))\r\n}\r\n","import { worker } from '../web-workers/worker'\r\n\r\nexport const scrollToFirstRow = (listRef) => {\r\n    if (listRef.current) {\r\n        listRef.current.scrollToRow(0)\r\n    }\r\n}\r\n\r\nexport const scrollToMemorizedRow = (listRef, scrollPosition, currentData) => {\r\n    if (currentData.length > 0 && listRef.current) {\r\n        if (scrollPosition !== undefined && scrollPosition !== 'undefined' && scrollPosition && scrollPosition > 0) {\r\n            listRef.current.scrollToRow(scrollPosition)\r\n        } else {\r\n            scrollToFirstRow(listRef)\r\n        }\r\n    }\r\n}\r\n\r\nexport const search = ({ searchText, currentData, setCurrentData }) => {\r\n    return new Promise((resolve) => {\r\n        if (currentData !== undefined) {\r\n            worker.postMessage({ currentData, searchText, filterName: 'searchTermFilter' })\r\n            worker.onmessage = (event) => {\r\n                const filteredQuotesFromWorker = JSON.parse(eval(`(${JSON.stringify(event.data)})`))\r\n                console.log(filteredQuotesFromWorker)\r\n                resolve(filteredQuotesFromWorker)\r\n            }\r\n        }\r\n    })\r\n}\r\n\r\nexport const isMobile = () => window.innerWidth <= 600\r\n\r\nexport const isDesktop = () => window.innerWidth >= 600\r\n","export let worker\r\nif (window.Worker) {\r\n    worker = new Worker(new URL('./filter-worker.js', import.meta.url))\r\n} else {\r\n    alert(\"Your browser doesn't support web workers.\")\r\n}\r\n","const TableBody = ({ tableData, columns }) => {\r\n    return (\r\n        <tbody>\r\n            {tableData.map((data) => {\r\n                return (\r\n                    <tr key={data.id}>\r\n                        {columns.map(({ accessor }) => {\r\n                            const tData = data[accessor] ? data[accessor] : '——'\r\n                            return <td key={accessor}>{tData}</td>\r\n                        })}\r\n                    </tr>\r\n                )\r\n            })}\r\n        </tbody>\r\n    )\r\n}\r\n\r\nexport default TableBody\r\n","import { useState } from 'react'\r\n\r\nconst TableHead = ({ columns, handleSorting }) => {\r\n    const [sortField, setSortField] = useState('')\r\n    const [order, setOrder] = useState('asc')\r\n\r\n    const handleSortingChange = (accessor) => {\r\n        const sortOrder = accessor === sortField && order === 'asc' ? 'desc' : 'asc'\r\n        setSortField(accessor)\r\n        setOrder(sortOrder)\r\n        handleSorting(accessor, sortOrder)\r\n    }\r\n\r\n    return (\r\n        <thead>\r\n            <tr>\r\n                {columns.map(({ label, accessor, sortable }) => {\r\n                    const cl = sortable ? (sortField === accessor && order === 'asc' ? 'up' : sortField === accessor && order === 'desc' ? 'down' : 'default') : ''\r\n                    return (\r\n                        <th key={accessor} onClick={sortable ? () => handleSortingChange(accessor) : null} className={cl}>\r\n                            {label}\r\n                        </th>\r\n                    )\r\n                })}\r\n            </tr>\r\n        </thead>\r\n    )\r\n}\r\n\r\nexport default TableHead\r\n","import { useState } from 'react'\r\n\r\nfunction getDefaultSorting(defaultTableData, columns) {\r\n    const sorted = [...defaultTableData].sort((a, b) => {\r\n        const filterColumn = columns.filter((column) => column.sortbyOrder)\r\n\r\n        let { accessor = 'id', sortbyOrder = 'asc' } = Object.assign({}, ...filterColumn)\r\n\r\n        if (a[accessor] === null) return 1\r\n        if (b[accessor] === null) return -1\r\n        if (a[accessor] === null && b[accessor] === null) return 0\r\n\r\n        const ascending = a[accessor].toString().localeCompare(b[accessor].toString(), 'en', {\r\n            numeric: true,\r\n        })\r\n\r\n        return sortbyOrder === 'asc' ? ascending : -ascending\r\n    })\r\n    return sorted\r\n}\r\n\r\nexport const useSortableTable = (data, columns) => {\r\n    const [tableData, setTableData] = useState(getDefaultSorting(data, columns))\r\n\r\n    const handleSorting = (sortField, sortOrder) => {\r\n        if (sortField) {\r\n            const sorted = [...tableData].sort((a, b) => {\r\n                if (a[sortField] === null) return 1\r\n                if (b[sortField] === null) return -1\r\n                if (a[sortField] === null && b[sortField] === null) return 0\r\n                return (\r\n                    a[sortField].toString().localeCompare(b[sortField].toString(), 'en', {\r\n                        numeric: true,\r\n                    }) * (sortOrder === 'asc' ? 1 : -1)\r\n                )\r\n            })\r\n            setTableData(sorted)\r\n        }\r\n    }\r\n\r\n    return [tableData, handleSorting]\r\n}\r\n","import './table.css'\r\nimport TableBody from './TableBody'\r\nimport TableHead from './TableHead'\r\nimport { useSortableTable } from './useSortableTable'\r\n\r\nconst Table = ({ caption, data, columns }) => {\r\n    const [tableData, handleSorting] = useSortableTable(data, columns)\r\n\r\n    return (\r\n        <>\r\n            <table className=\"table\">\r\n                {caption && <caption>{caption}</caption>}\r\n                <TableHead {...{ columns, handleSorting }} />\r\n                <TableBody {...{ columns, tableData }} />\r\n            </table>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Table\r\n","import { useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { onFocusHandler as getPhilosopherJSON } from '../../home/desktop/desktop-header/utils/utils'\r\nimport { setOptionsRedux, setOriginalOptionsRedux } from '../../home/home-page/homePageRedux/homePageRedux'\r\nimport { setDarkModeClassOnHTMLTag } from '../../home/home-page/utils/utils'\r\nimport Table from '../table/table'\r\nimport columns from './columns.json'\r\nimport { createData } from './utils/utils'\r\n\r\nconst Report = () => {\r\n    const [data, setData] = useState([])\r\n    const dispatch = useDispatch()\r\n    const markedQuotes = useSelector((state) => state.philosophersData.markedQuotes)\r\n    const options = useSelector((state) => state.philosophersData.options)\r\n    const darkMode = useSelector((state) => state.philosophersData.darkMode)\r\n    const originalOptions = useSelector((state) => state?.philosophersData?.originalOptions)\r\n    const setOriginalOptions = (value) => dispatch(setOriginalOptionsRedux(value))\r\n    const setOptions = (value) => dispatch(setOptionsRedux(value))\r\n    const sorting = useSelector((state) => state.philosophersData.sorting)\r\n\r\n    useEffect(() => {\r\n        ;(async () => {\r\n            await getPhilosopherJSON({ options, setOptions, originalOptions, setOriginalOptions, sorting })\r\n        })()\r\n\r\n        createData({ markedQuotes, options, setData })\r\n    }, [options])\r\n\r\n    useEffect(() => {\r\n        setDarkModeClassOnHTMLTag(darkMode)\r\n    }, [darkMode])\r\n\r\n    return data.length > 0 ? (\r\n        <Table data={data} columns={columns} />\r\n    ) : (\r\n        <>\r\n            <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', height: '100vh', fontSize: '2rem', margin: '3rem' }}>No records found!</div>\r\n            <div style={{ fontSize: '2rem', margin: '3rem' }}>Please use, marked mode feature, mark quotes as read and come back.</div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Report\r\n","import { getPhilosopherObjectIndex } from '../../../../../common/static/utils/utils'\r\nimport { isUndefined, uuidv4 } from '../../../../../common/utils/commonUtils'\r\nimport { getPhilosopherFullName } from '../../../home/quotes-list/utils/utils'\r\n\r\nexport const createData = ({ markedQuotes, options, setData }) => {\r\n    const data = []\r\n    let sum = 0\r\n    for (const key in markedQuotes) {\r\n        if (markedQuotes.hasOwnProperty(key) && getPhilosopherObjectIndex(key, options) !== -1) {\r\n            let readCount = 0\r\n            if (!isUndefined(markedQuotes[key])) {\r\n                readCount = markedQuotes[key].length\r\n                sum += readCount\r\n            }\r\n            const obj = { philosopher: getPhilosopherFullName({ currentPhilosopher: key, options }), readCount: readCount, id: uuidv4() }\r\n            data.push(obj)\r\n        }\r\n    }\r\n    const obj = { philosopher: 'Total Read', readCount: sum, id: uuidv4() }\r\n    data.push(obj)\r\n    setData(data)\r\n}\r\n","import { ALPHABETICAL, LATEST } from '../../components/organisms/home/home-page/constants/constants'\r\nimport { STATIC_OPTIONS } from '../../components/organisms/home/home-page/homePageRedux/initialState'\r\nimport { bringIntoAlphabeticalOrder, bringIntoOriginalOrder } from '../../components/organisms/home/home-page/utils/utils'\r\nimport { merge } from './objectUtils'\r\n\r\nexport const addOptionsDataIntoRedux = ({ newOptions, oldOptions, oldOriginalOptions, setOptions, setOriginalOptions }) => {\r\n    console.log('newOptions', newOptions, 'oldOptions', oldOptions)\r\n    let resultantOptions\r\n    resultantOptions = [...oldOptions, ...newOptions]\r\n    setOptions(resultantOptions)\r\n    setOriginalOptions([...STATIC_OPTIONS, ...newOptions])\r\n}\r\n\r\nexport const addResponseOptionsDataIntoRedux = ({ newOptions, oldOptions, oldOriginalOptions, setOptions, setOriginalOptions, sorting }) => {\r\n    const originalOptions = [...STATIC_OPTIONS, ...newOptions]\r\n    let resultantOptions = merge(oldOptions, [...originalOptions])\r\n    if (sorting === LATEST) {\r\n        resultantOptions = bringIntoOriginalOrder(originalOptions, resultantOptions)\r\n    } else if (sorting === ALPHABETICAL) {\r\n        resultantOptions = bringIntoAlphabeticalOrder(resultantOptions)\r\n    }\r\n    setOptions([...resultantOptions])\r\n    setOriginalOptions(originalOptions)\r\n}\r\n","import { getPhilosopherObjectIndex } from '../static/utils/utils'\r\n\r\nexport const merge = (oldOptions, newOptions) => {\r\n    let newOptionsCopy = JSON.parse(JSON.stringify(newOptions))\r\n    newOptionsCopy.forEach((element, newOptionindex) => {\r\n        const oldOptionIndex = getPhilosopherObjectIndex(element.value, oldOptions)\r\n        if (oldOptionIndex !== -1) {\r\n            newOptionsCopy[newOptionindex].quotes = oldOptions[oldOptionIndex].quotes\r\n        }\r\n    })\r\n    return newOptionsCopy\r\n}\r\n","import { getPhilosopherQuotes, lazyLoadAsset } from '../../../../../../common/static/utils/utils'\r\nimport { retryTenTimes } from '../../../../../../common/utils/apiUtils'\r\nimport { addResponseOptionsDataIntoRedux } from '../../../../../../common/utils/lazyLoadUtils'\r\nimport { scrollToMemorizedRow } from '../../../../../../common/utils/utils'\r\nimport { changeQuotesData } from '../../../quotes-list/utils/utils'\r\n\r\nexport function onPhilosopherSelectChange({ philosopher, listRef, setIsFetching, setStart, setEnd, setSearchText, setCurrentPhilosopher, currentData, setCurrentData, options, setOptions, setQuotesLoaded, markedMode, markedQuotes, setMarkedQuotes }) {\r\n    function callback() {\r\n        setCurrentPhilosopher(philosopher)\r\n        changeQuotesData({ philosopher, currentData, setCurrentData, options }, { markedMode, markedQuotes, setMarkedQuotes })\r\n        scrollToMemorizedRow(listRef, currentData, philosopher)\r\n        setIsFetching(false)\r\n    }\r\n    setStart(1)\r\n    setEnd('')\r\n    setSearchText('')\r\n    setIsFetching(true)\r\n\r\n    if (!getPhilosopherQuotes({ philosopher, options })) {\r\n        lazyLoadAsset(philosopher, { options, setOptions }, setQuotesLoaded, []).then(callback)\r\n    } else {\r\n        callback()\r\n    }\r\n}\r\n\r\nexport const onFocusHandler = async ({ options, setOptions, isFetchingOptions, setIsFetchingOptions, originalOptions, setOriginalOptions, sorting }) => {\r\n    // if (options.length === 1) {\r\n    setIsFetchingOptions && setIsFetchingOptions(true)\r\n    let response = await retryTenTimes(() => fetch('https://cdn.jsdelivr.net/gh/speed1992/quotes/src/common/static/philosophers-data.json'))\r\n    // let response = await retryTenTimes(() => fetch('https://raw.githubusercontent.com/speed1992/quotes/main/src/common/static/philosophers-data.json'))\r\n    response = await response.json()\r\n    addResponseOptionsDataIntoRedux({ newOptions: response, oldOptions: options, oldOriginalOptions: originalOptions, setOptions, setOriginalOptions, sorting })\r\n    setIsFetchingOptions && setIsFetchingOptions(false)\r\n    // }\r\n}\r\n","export const LATEST = 'latest'\r\nexport const ALPHABETICAL = 'alphabetical'\r\n","import { getPhilosopherData } from '../../../../../common/static/utils/utils'\r\n\r\nexport const setDarkModeClassOnHTMLTag = (value, className = 'darkTheme') => {\r\n    var root = document.getElementsByTagName('html')[0]\r\n    if (value) {\r\n        root.classList.add(className)\r\n    } else {\r\n        root.classList.remove(className)\r\n    }\r\n}\r\n\r\nexport const bringIntoOriginalOrder = (originalOptions, newOptions) => originalOptions.map((item) => getPhilosopherData({ philosopher: item.value, options: newOptions })).reverse()\r\n\r\nexport const bringIntoAlphabeticalOrder = (options) => [...options].sort((a, b) => a.fullName.localeCompare(b.fullName))\r\n","import { isObjEmpty } from '../../../../../common/utils/commonUtils'\r\nimport { removeReadData } from '../../../../../common/utils/staticDataUtils'\r\nimport { worker } from '../../../../../common/web-workers/worker'\r\n\r\nexport const changeQuotesData = ({ currentPhilosopher, currentData, setCurrentData, options }, { markedMode = null, markedQuotes, setMarkedQuotes }) => {\r\n    if (currentData) setCurrentData(currentData)\r\n    if (markedMode !== undefined && markedMode) removeReadData({ currentPhilosopher, markedMode, markedQuotes, setMarkedQuotes, currentData, setCurrentData })\r\n}\r\n\r\nexport const getPhilosopherFullName = ({ currentPhilosopher, options }) => {\r\n    const currentIndex = options.filter(({ value }) => currentPhilosopher === value)\r\n    if (!isObjEmpty(currentIndex)) return currentIndex && currentIndex[0].fullName\r\n}\r\n\r\nexport const getPhilosopherFullName_i10n = ({ currentPhilosopher, options }) => {\r\n    const currentIndex = options.filter(({ value }) => currentPhilosopher === value)\r\n    if (!isObjEmpty(currentIndex)) return currentIndex && currentIndex[0].fullNameInOtherLanguages\r\n}\r\n\r\nexport const searchByWordLength = async (start, end, quotes, { markedMode, markedQuotes, setMarkedQuotes }, { setCurrentData, currentPhilosopher }) => {\r\n    return new Promise((resolve) => {\r\n        if (quotes !== undefined) {\r\n            if (typeof start === 'string' && start.trim() === '') start = 0\r\n            worker.postMessage({ quotes, end, start, filterName: 'wordCountFilter' })\r\n            worker.onmessage = (event) => {\r\n                const newData = JSON.parse(eval(`(${JSON.stringify(event.data)})`))\r\n                console.log(newData)\r\n                changeQuotesData({ currentData: newData, setCurrentData, currentPhilosopher }, { markedMode, markedQuotes, setMarkedQuotes })\r\n                resolve()\r\n            }\r\n        }\r\n    })\r\n}\r\n\r\nexport function getWordCount(str) {\r\n    return str.split(' ').filter(function (n) {\r\n        return n !== ''\r\n    }).length\r\n}\r\n"],"names":["isUndefined","value","isObjEmpty","obj","Object","values","length","constructor","uuidv4","replace","c","crypto","getRandomValues","Uint8Array","toString","getStorageValue","key","defaultValue","saved","localStorage","getItem","initial","JSON","parse","undefined","removeReadData","index","currentPhilosopher","markedMode","markedQuotes","setMarkedQuotes","currentData","setCurrentData","newMarkedQuotes","stringify","readQuotesArray","READ_ARRAY_LOCALSTORAGE_KEY","Set","push","newData","filter","_","id","indexOf","scrollToFirstRow","listRef","current","scrollToRow","scrollToMemorizedRow","scrollPosition","search","searchText","Promise","resolve","worker","filterName","event","filteredQuotesFromWorker","eval","data","console","log","isMobile","window","innerWidth","isDesktop","Worker","URL","alert","tableData","columns","map","accessor","tData","handleSorting","useState","sortField","setSortField","order","setOrder","label","sortable","cl","onClick","sortOrder","handleSortingChange","className","useSortableTable","defaultTableData","sort","a","b","filterColumn","column","sortbyOrder","assign","ascending","localeCompare","numeric","getDefaultSorting","setTableData","sorted","caption","setData","dispatch","useDispatch","useSelector","state","philosophersData","options","darkMode","originalOptions","setOriginalOptions","setOriginalOptionsRedux","setOptions","setOptionsRedux","sorting","useEffect","getPhilosopherJSON","sum","hasOwnProperty","getPhilosopherObjectIndex","readCount","philosopher","getPhilosopherFullName","createData","setDarkModeClassOnHTMLTag","style","display","alignItems","justifyContent","height","fontSize","margin","addResponseOptionsDataIntoRedux","newOptions","oldOptions","oldOriginalOptions","STATIC_OPTIONS","resultantOptions","newOptionsCopy","forEach","element","newOptionindex","oldOptionIndex","quotes","merge","LATEST","bringIntoOriginalOrder","ALPHABETICAL","bringIntoAlphabeticalOrder","onPhilosopherSelectChange","setIsFetching","setStart","setEnd","setSearchText","setCurrentPhilosopher","setQuotesLoaded","callback","changeQuotesData","getPhilosopherQuotes","lazyLoadAsset","then","onFocusHandler","isFetchingOptions","setIsFetchingOptions","retryTenTimes","fetch","response","json","root","document","getElementsByTagName","classList","add","remove","item","getPhilosopherData","reverse","fullName","currentIndex","getPhilosopherFullName_i10n","fullNameInOtherLanguages","searchByWordLength","start","end","trim","getWordCount","str","split","n"],"sourceRoot":""}