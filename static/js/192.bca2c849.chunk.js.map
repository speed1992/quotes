{"version":3,"file":"static/js/192.bca2c849.chunk.js","mappings":"mIA6BA,UA3BsB,SAAC,GAA8E,IAG7FA,EAHiBC,EAA2E,EAA3EA,SAAUC,EAAiE,EAAjEA,aAAcC,EAAmD,EAAnDA,aAAcC,EAAqC,EAArCA,gBAAiBC,EAAoB,EAApBA,cACtEC,EAAsBL,EAASM,OAAO,GAAGC,cAAgBP,EAASQ,MAAM,GAG9E,IACIT,EAAmBU,OAAOC,OAAOT,GAAcU,OAAOC,OACxD,MAAOC,GACLC,QAAQC,IAAIF,GAEhB,OACI,iCACI,iBAAKG,UAAU,WAAf,gBAA8BX,EAA9B,OACCN,EAAmB,IAChB,mBAAQiB,UAAU,UAAUC,QAAS,kBAAMC,EAAAA,EAAAA,IAAgB,CAAElB,SAAAA,EAAUC,aAAAA,EAAcC,aAAAA,KAArF,qBAIJ,mBAAQc,UAAU,UAAUC,QAAS,kBAAME,EAAAA,EAAAA,IAAe,CAAEnB,SAAAA,EAAUC,aAAAA,EAAcC,aAAAA,EAAcC,gBAAAA,KAAlG,sBAGA,mBAAQa,UAAU,UAAUC,QAAS,kBAAMb,GAAc,IAAzD,yB,gJCpBCc,EAAe,mCAAG,kGAASlB,EAAT,EAASA,SAAUC,EAAnB,EAAmBA,aAAcC,EAAjC,EAAiCA,aAAjC,UACNkB,EAAAA,EAAAA,KAAa,iBAC9B,8FACUC,MAAM,4DAA6D,CACrEC,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAU,CACjB1B,SAAAA,EACAC,aAAAA,EACA0B,WAAYC,KAAKC,UAP7B,oFAFuB,cACvBC,EADuB,gBAcVA,EAASC,OAdC,OAc3BD,EAd2B,OAe3B5B,EAAauB,KAAKC,UAAUI,IAfD,2CAAH,sDAkBfX,EAAc,mCAAG,oGAASnB,EAAT,EAASA,SAAT,EAAmBC,aAAcC,EAAjC,EAAiCA,aAAcC,EAA/C,EAA+CA,gBAA/C,UACLiB,EAAAA,EAAAA,KAAa,iBAC9B,8FACUC,MAAM,6DAA8D,CACtEC,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAU,CACjB1B,SAAAA,MALZ,oFAFsB,cACtB8B,EADsB,gBAYTA,EAASC,OAZA,OAY1BD,EAZ0B,OAa1B,UAAIA,SAAJ,OAAI,EAAUE,IACV7B,EAAgB2B,EAASG,QAAQ,GAAGhC,cACpCC,EAAa,8BAA+B,MAE5CA,EAAauB,KAAKC,UAAUI,EAASjB,QAjBf,2CAAH,sDAqBdqB,EAAa,mCAAG,sGAASC,EAAT,EAASA,YAAanC,EAAtB,EAAsBA,SAAUoC,EAAhC,EAAgCA,SAAUhC,EAA1C,EAA0CA,cAAeF,EAAzD,EAAyDA,aAC5EG,EAAsBL,EAASM,OAAO,GAAGC,cAAgBP,EAASQ,MAAM,GAE1D,UAAhB2B,EAHqB,iCAIJf,EAAAA,EAAAA,KAAa,iBAC1B,8FACUC,MAAM,mDAAoD,CAC5DC,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAU,CACjB1B,SAAAA,EACAoC,SAAAA,MANZ,oFALiB,OAIrBN,EAJqB,gDAgBJV,EAAAA,EAAAA,KAAa,iBAC1B,8FACUC,MAAM,oDAAqD,CAC7DC,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAU,CACjB1B,SAAAA,EACAoC,SAAAA,MANZ,oFAjBiB,QAgBrBN,EAhBqB,gCA6BRA,EAASC,OA7BD,QA6BzBD,EA7ByB,OA+BzB,UAAIA,SAAJ,OAAI,EAAUE,IACV5B,GAAc,GACdF,EAAaG,EAAsB,IAAMoB,KAAKC,UAAUI,EAASO,kBAEjEnC,EAAauB,KAAKC,UAAUI,EAASjB,QAnChB,4CAAH","sources":["components/organisms/home/mobile/backup-restore/backup-restore.js","components/organisms/home/mobile/mobile-menu/utils/utils.js"],"sourcesContent":["import { getUserDetails, sendUserDetails } from '../mobile-menu/utils/utils'\r\n\r\nconst BackupRestore = ({ userName, markedQuotes, openSnackbar, setMarkedQuotes, setIsLoggedIn }) => {\r\n    const capitalizedUserName = userName.charAt(0).toUpperCase() + userName.slice(1)\r\n\r\n    let markedQuoteCount\r\n    try {\r\n        markedQuoteCount = Object.values(markedQuotes).flat().length\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n    return (\r\n        <>\r\n            <div className=\"userName\">Hi {capitalizedUserName}!</div>\r\n            {markedQuoteCount > 0 && (\r\n                <button className=\"menuBtn\" onClick={() => sendUserDetails({ userName, markedQuotes, openSnackbar })}>\r\n                    Backup\r\n                </button>\r\n            )}\r\n            <button className=\"menuBtn\" onClick={() => getUserDetails({ userName, markedQuotes, openSnackbar, setMarkedQuotes })}>\r\n                Restore\r\n            </button>\r\n            <button className=\"menuBtn\" onClick={() => setIsLoggedIn(false)}>\r\n                Logout\r\n            </button>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default BackupRestore\r\n","import { retryTenTimes } from '../../../../../../common/utils/apiUtils'\r\n\r\nexport const sendUserDetails = async ({ userName, markedQuotes, openSnackbar }) => {\r\n    let response = await retryTenTimes(\r\n        async () =>\r\n            await fetch('https://quotes-backend.vercel.app/api/markedQuotes/backup', {\r\n                method: 'post',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({\r\n                    userName,\r\n                    markedQuotes,\r\n                    dateSynced: Date.now(),\r\n                }),\r\n            })\r\n    )\r\n\r\n    response = await response.json()\r\n    openSnackbar(JSON.stringify(response))\r\n}\r\n\r\nexport const getUserDetails = async ({ userName, markedQuotes, openSnackbar, setMarkedQuotes }) => {\r\n    let response = await retryTenTimes(\r\n        async () =>\r\n            await fetch('https://quotes-backend.vercel.app/api/markedQuotes/restore', {\r\n                method: 'post',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({\r\n                    userName,\r\n                }),\r\n            })\r\n    )\r\n\r\n    response = await response.json()\r\n    if (response?.ok) {\r\n        setMarkedQuotes(response.results[0].markedQuotes)\r\n        openSnackbar('Restored all marked quotes!', 2000)\r\n    } else {\r\n        openSnackbar(JSON.stringify(response.error))\r\n    }\r\n}\r\n\r\nexport const loginRegister = async ({ apiCallType, userName, password, setIsLoggedIn, openSnackbar }) => {\r\n    const capitalizedUserName = userName.charAt(0).toUpperCase() + userName.slice(1)\r\n    let response\r\n    if (apiCallType === 'login') {\r\n        response = await retryTenTimes(\r\n            async () =>\r\n                await fetch('https://quotes-backend.vercel.app/api/user/login', {\r\n                    method: 'post',\r\n                    headers: { 'Content-Type': 'application/json' },\r\n                    body: JSON.stringify({\r\n                        userName,\r\n                        password,\r\n                    }),\r\n                })\r\n        )\r\n    } else {\r\n        response = await retryTenTimes(\r\n            async () =>\r\n                await fetch('https://quotes-backend.vercel.app/api/user/create', {\r\n                    method: 'post',\r\n                    headers: { 'Content-Type': 'application/json' },\r\n                    body: JSON.stringify({\r\n                        userName,\r\n                        password,\r\n                    }),\r\n                })\r\n        )\r\n    }\r\n\r\n    response = await response.json()\r\n\r\n    if (response?.ok) {\r\n        setIsLoggedIn(true)\r\n        openSnackbar(capitalizedUserName + ' ' + JSON.stringify(response.serverResponse))\r\n    } else {\r\n        openSnackbar(JSON.stringify(response.error))\r\n    }\r\n}\r\n"],"names":["markedQuoteCount","userName","markedQuotes","openSnackbar","setMarkedQuotes","setIsLoggedIn","capitalizedUserName","charAt","toUpperCase","slice","Object","values","flat","length","error","console","log","className","onClick","sendUserDetails","getUserDetails","retryTenTimes","fetch","method","headers","body","JSON","stringify","dateSynced","Date","now","response","json","ok","results","loginRegister","apiCallType","password","serverResponse"],"sourceRoot":""}