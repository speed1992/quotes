{"version":3,"file":"static/js/MobileSelect.2f5e0f1d.chunk.js","mappings":"qJACA,SAAgB,kBAAoB,yCAAyC,UAAY,iCAAiC,aAAe,oCAAoC,OAAS,+B,aCEtL,MAAMA,EAAiBC,EAAAA,MAAW,KAAMC,EAAAA,EAAAA,KAAc,IAAM,iCAE7C,SAASC,EAAYC,GAA6J,IAA5J,QAAEC,EAAO,mBAAEC,EAAkB,gBAAEC,EAAe,uBAAEC,EAAsB,YAAEC,EAAW,MAAEC,EAAK,kBAAEC,EAAiB,mBAAEC,EAAkB,SAAEC,EAAQ,WAAEC,GAAYV,EAC1L,MAAOW,EAAaC,IAAkBC,EAAAA,EAAAA,UAAS,KACxCC,EAAYC,IAAiBF,EAAAA,EAAAA,UAAS,KACtCG,EAAWC,IAAgBJ,EAAAA,EAAAA,WAAS,IAC3CK,EAAAA,EAAAA,YAAU,IAAMH,EAAcT,IAAQ,CAACA,IACvC,MAAMa,GAAaC,EAAAA,EAAAA,WAEnBF,EAAAA,EAAAA,YAAU,KACFF,GAAaf,EAAQoB,OAAS,IAC9BN,EAAc,IACdH,EAAeX,GACfgB,GAAa,GACjB,GACD,CAAChB,EAAQoB,OAAQL,IAqDpB,OACIM,EAAAA,EAAAA,KAAC1B,EAAc,CAAC2B,SAAUA,IAAMX,EAAe,IAAIY,UAC/CC,EAAAA,EAAAA,MAAA,OAAKC,UAAS,GAAAC,OAAKC,EAAOC,kBAAiB,KAAAF,OAAIlB,EAAWmB,EAAOE,UAAY,IAAKN,SAAA,EAC9EF,EAAAA,EAAAA,KAAA,SAAOS,KAAK,qBAAqBC,KAAK,OAAOC,QAtDjCC,IACpB9B,IACAa,GAAa,EAAK,EAoD4DkB,SAjD5DD,IAClB,MAAM5B,EAAQ4B,EAAEE,OAAO9B,MACvB,GAAc,KAAVA,EAAcM,EAAeX,OAC5B,CACD,IAAIU,EAAc,GAClB,GAAIL,EAAMe,OAAS,EAAG,CAClB,MAAMgB,EAAQ,IAAIC,OAAO,GAADX,OAAIrB,GAAK,KACjCK,EAAcV,EAAQsC,QAAOC,IAAA,IAAC,SAAEC,GAAUD,EAAA,OAAKH,EAAMK,KAAKD,EAAS,GACvE,CAEA7B,EAAeD,EACnB,CACAI,EAAcT,EAAM,EAqCkFD,YAAaA,EAAaC,MAAOQ,EAAY6B,OAlCjIC,KAClB7B,EAAcT,EAAM,IAkCXC,GACGe,EAAAA,EAAAA,KAAA,MAAII,UAAWE,EAAOiB,aAAarB,UAC/BF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,iBAxBO,IAAvBb,EAAYU,OACL,MAIPC,EAAAA,EAAAA,KAAA,MAAIwB,IAAK3B,EAAYO,UAAS,GAAAC,OAAKC,EAAOiB,aAAY,KAAAlB,OAAIlB,GAAYmB,EAAOE,WAAYN,SACzE,OAAXb,QAAW,IAAXA,OAAW,EAAXA,EAAaoC,KAAI,CAAAC,EAAwCC,KAAW,IAAlD,SAAER,EAAQ,MAAEnC,EAAK,SAAE4C,GAAW,GAAOF,EAEpD,OADAG,QAAQC,IAAI,8BAA+BF,EAAUxC,GAC9CwC,GAAYxC,EAAa,MAC5BY,EAAAA,EAAAA,KAAA,MAAI+B,MAAsB,KAAfvC,GAAqBmC,GAA0B,OAAlBzC,QAAkB,IAAlBA,OAAkB,EAAlBA,EAAoBa,QAAS,CAAEiC,MAAO,WAAc,CAAC,EAAGC,GAAIrD,IAAuBI,EAAQ,SAAW,GAAgBA,MAAOA,EAAOkD,QAAUtB,GAlB/KuB,EAAChB,EAAUnC,UACpBoD,IAAVpD,IACAM,EAAe,IACfG,EAAc0B,GACdtC,EAAgB,CAAEiC,OAAQ,CAAE9B,WAChC,EAa4MmD,CAAmBhB,EAAUnC,GAAOkB,SAC3NiB,GADkJnC,EAG1J,UAoBrB,C","sources":["webpack://quotes/./src/components/organisms/home/mobile/mobile-select/mobile-select.module.css?ae0e","components/organisms/home/mobile/mobile-select/mobile-select.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"typeAheadDropDown\":\"mobile-select_typeAheadDropDown__OL+sR\",\"darkTheme\":\"mobile-select_darkTheme__OMPaO\",\"dropDownList\":\"mobile-select_dropDownList__O49by\",\"active\":\"mobile-select_active__Ts+Jz\"};","import React, { useEffect, useRef, useState } from 'react'\r\nimport { retryTenTimes } from '../../../../../common/utils/apiUtils'\r\nimport styles from './mobile-select.module.css'\r\nconst OutsideAlerter = React.lazy(() => retryTenTimes(() => import(/* webpackChunkName: \"OutsideAlerter\" */ '../../../../../common/components/outside-alerter/outside-alerter')))\r\n\r\nexport default function MobileSelect({ options, currentPhilosopher, onChangeHandler, onFocusHandlerCallback, placeholder, value, isFetchingOptions, recentPhilosophers, darkMode, markedMode }) {\r\n    const [suggestions, setSuggestions] = useState([])\r\n    const [searchText, setSearchText] = useState([])\r\n    const [isFocused, setIsFocused] = useState(false)\r\n    useEffect(() => setSearchText(value), [value])\r\n    const scollToRef = useRef()\r\n\r\n    useEffect(() => {\r\n        if (isFocused && options.length > 1) {\r\n            setSearchText('')\r\n            setSuggestions(options)\r\n            setIsFocused(false)\r\n        }\r\n    }, [options.length, isFocused])\r\n\r\n    const onFocusHandler = (e) => {\r\n        onFocusHandlerCallback()\r\n        setIsFocused(true)\r\n    }\r\n\r\n    const onTextChange = (e) => {\r\n        const value = e.target.value\r\n        if (value === '') setSuggestions(options)\r\n        else {\r\n            let suggestions = []\r\n            if (value.length > 0) {\r\n                const regex = new RegExp(`${value}`, `i`)\r\n                suggestions = options.filter(({ fullName }) => regex.test(fullName))\r\n            }\r\n\r\n            setSuggestions(suggestions)\r\n        }\r\n        setSearchText(value)\r\n    }\r\n\r\n    const onBlurHandler = () => {\r\n        setSearchText(value)\r\n    }\r\n\r\n    const suggestionSelected = (fullName, value) => {\r\n        if (value !== undefined) {\r\n            setSuggestions([])\r\n            setSearchText(fullName)\r\n            onChangeHandler({ target: { value } })\r\n        }\r\n    }\r\n\r\n    const renderSuggestions = () => {\r\n        if (suggestions.length === 0) {\r\n            return null\r\n        }\r\n\r\n        return (\r\n            <ul ref={scollToRef} className={`${styles.dropDownList} ${darkMode && styles.darkTheme}`}>\r\n                {suggestions?.map(({ fullName, value, disabled = false }, index) => {\r\n                    console.log('@dev disabled && markedMode', disabled, markedMode)\r\n                    return disabled && markedMode ? null : (\r\n                        <li style={searchText === '' && index < recentPhilosophers?.length ? { color: '#FF00FF' } : {}} id={currentPhilosopher === value ? 'active' : ''} key={value} value={value} onClick={(e) => suggestionSelected(fullName, value)}>\r\n                            {fullName}\r\n                        </li>\r\n                    )\r\n                })}\r\n            </ul>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <OutsideAlerter callback={() => setSuggestions([])}>\r\n            <div className={`${styles.typeAheadDropDown} ${darkMode ? styles.darkTheme : ''}`}>\r\n                <input name=\"search-philosopher\" type=\"text\" onFocus={onFocusHandler} onChange={onTextChange} placeholder={placeholder} value={searchText} onBlur={onBlurHandler} />\r\n                {isFetchingOptions ? (\r\n                    <ul className={styles.dropDownList}>\r\n                        <li>Loading...</li>\r\n                    </ul>\r\n                ) : (\r\n                    renderSuggestions()\r\n                )}\r\n            </div>\r\n        </OutsideAlerter>\r\n    )\r\n}\r\n"],"names":["OutsideAlerter","React","retryTenTimes","MobileSelect","_ref","options","currentPhilosopher","onChangeHandler","onFocusHandlerCallback","placeholder","value","isFetchingOptions","recentPhilosophers","darkMode","markedMode","suggestions","setSuggestions","useState","searchText","setSearchText","isFocused","setIsFocused","useEffect","scollToRef","useRef","length","_jsx","callback","children","_jsxs","className","concat","styles","typeAheadDropDown","darkTheme","name","type","onFocus","e","onChange","target","regex","RegExp","filter","_ref2","fullName","test","onBlur","onBlurHandler","dropDownList","ref","map","_ref3","index","disabled","console","log","style","color","id","onClick","suggestionSelected","undefined"],"sourceRoot":""}