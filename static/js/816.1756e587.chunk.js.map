{"version":3,"file":"static/js/816.1756e587.chunk.js","mappings":"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","sources":["webpack://quotes/./src/common/small-loader/small-loader.module.css?1d92","common/small-loader/small-loader.js","common/utils/ruleEngine.js","webpack://quotes/./src/components/organisms/home/row/styles/row.module.css?d653","components/organisms/home/row/row.js","common/utils/debounce.js","components/organisms/analysis/no-search-results/no-search-results.jsx","components/organisms/home/quotes-list/utils/listUtils.js","components/organisms/home/quotes-list/utils/ruleEngine/rules.js","components/organisms/home/quotes-list/quotes-list.jsx","components/organisms/home/row/utils/utils.js","common/utils/stringUtils.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"loader\":\"small-loader_loader__ulY5G\",\"spin\":\"small-loader_spin__SOsfI\",\"darkTheme\":\"small-loader_darkTheme__z-xia\"};","import React from 'react'\r\nimport styles from './small-loader.module.css'\r\n\r\nconst SmallLoader = ({ darkMode }) => <span className={`${styles.loader} ${darkMode ? styles.darkTheme : ''}`}> </span>\r\n\r\nexport default SmallLoader\r\n","export const ruleEngine = {\r\n    makeDecision: function (rules, { value, params }) {\r\n        for (let i = 0; i <= rules.length; i++) {\r\n            const returnValue = rules[i](value, params)\r\n            if (returnValue) return returnValue\r\n        }\r\n    },\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"actionItems\":\"row_actionItems__Y-npM\",\"row\":\"row_row__G696K\",\"quoteDescription\":\"row_quoteDescription__tvqXE\"};","import React, { Suspense, useCallback, useState } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { setCurrentModalName } from '../../../../common/components/modal/modalRedux'\r\nimport useSnackbar from '../../../../common/components/snackbar/useSnackbar'\r\nimport SmallLoader from '../../../../common/small-loader/small-loader'\r\nimport { retryTenTimes } from '../../../../common/utils/apiUtils'\r\nimport { isUndefined } from '../../../../common/utils/commonUtils'\r\nimport { debounce } from '../../../../common/utils/debounce'\r\nimport { setQuoteImageData } from '../../analysis/generate-quote-image/generateQuoteImageRedux'\r\nimport styles from './styles/row.module.css'\r\nimport { rowClickHandler } from './utils/utils'\r\nconst MarkAsRead = React.lazy(() => retryTenTimes(() => import('../../tools/mark-as-read/mark-as-read')))\r\nconst Translate = React.lazy(() => retryTenTimes(() => import('../../tools/translate/translate')))\r\nconst Audio = React.lazy(() => retryTenTimes(() => import('../../tools/audio/audio')))\r\n\r\nconst Row = ({ data: { searchText, start, end, philosopherFullName, philosopherFullName_i10n, markedMode, currentQuote, currentPhilosopher, markedQuotes, setMarkedQuotes, currentData, setCurrentData, index, scrollPosition, setScrollPosition, listRef, darkMode, voiceSpeed, minMode }, style }) => {\r\n    const [isLocalFetching, setIsLocalFetching] = useState({ button: '', status: false })\r\n    const [AIResponse, setAIResponse] = useState(null)\r\n    const [openSnackbar] = useSnackbar()\r\n    const { quote: quotationText, id: quotationId } = currentQuote\r\n    const propsToSend = { openSnackbar, searchText, start, end, philosopherFullName, index, philosopherFullName_i10n, darkMode, setIsLocalFetching }\r\n    const [localTranslateKey, setLocalTranslateKey] = useState(false)\r\n    const debouncedHandler = useCallback(\r\n        debounce(() => setScrollPosition(parseInt(quotationId)), 500),\r\n        [quotationId, setScrollPosition]\r\n    )\r\n    const dispatch = useDispatch()\r\n    const rowHandler = useCallback(() => rowClickHandler({ quote: quotationText, openSnackbar, philosopherFullName }), [openSnackbar, philosopherFullName, quotationText])\r\n\r\n    if (!isUndefined(currentQuote))\r\n        return (\r\n            <div role=\"row\" className={styles.row} key={index} style={style} onMouseMove={debouncedHandler} onTouchStart={debouncedHandler}>\r\n                {AIResponse ? (\r\n                    <>\r\n                        <div>{AIResponse}</div>\r\n                        <div className={styles.quoteDescription}>\r\n                            <button onClick={() => setAIResponse(null)}>Close Description</button>\r\n                        </div>\r\n                    </>\r\n                ) : (\r\n                    <>\r\n                        <div role=\"columnheader\" className=\"row\">\r\n                            <span onClick={rowHandler}>{`${index + 1}. \"${quotationText}\" ― ${philosopherFullName}`}</span>\r\n                        </div>\r\n                        <div role=\"columnheader\" className=\"row\">\r\n                            {localTranslateKey ? <Translate inputText={quotationText} {...propsToSend} /> : null}\r\n                        </div>\r\n\r\n                        <div role=\"columnheader\" className={styles.actionItems}>\r\n                            <button\r\n                                onClick={() => {\r\n                                    dispatch(setQuoteImageData({ quotationText, philosopherFullName, signature: 'Instagram: @philosophizetruth' }))\r\n                                    dispatch(setCurrentModalName('Image'))\r\n                                }}\r\n                                style={{ textDecoration: 'none', color: darkMode ? '#fff' : '#000' }}\r\n                            >\r\n                                Download\r\n                            </button>\r\n                            {!minMode && <Audio index={index} currentData={currentData} scrollPosition={scrollPosition} setScrollPosition={setScrollPosition} listRef={listRef} voiceSpeed={voiceSpeed} />}\r\n                            {markedMode && (\r\n                                <Suspense fallback={''}>\r\n                                    <MarkAsRead index={quotationId} currentPhilosopher={currentPhilosopher} markedQuotes={markedQuotes} setMarkedQuotes={setMarkedQuotes} currentData={currentData} setCurrentData={setCurrentData} setLocalTranslateKey={setLocalTranslateKey} />\r\n                                </Suspense>\r\n                            )}\r\n                            {!minMode && (\r\n                                <>\r\n                                    <button onClick={() => setLocalTranslateKey(true)}>Translate {isLocalFetching.button === 'translate' && isLocalFetching.status && <SmallLoader darkMode />}</button>\r\n                                    <button\r\n                                        onClick={() => {\r\n                                            dispatch(setQuoteImageData({ quotationText, philosopherFullName, signature: 'Instagram: @philosophizetruth', share: true }))\r\n                                            dispatch(setCurrentModalName('Image'))\r\n                                        }}\r\n                                        style={{ textDecoration: 'none', color: darkMode ? '#fff' : '#000' }}\r\n                                    >\r\n                                        Share\r\n                                    </button>\r\n                                </>\r\n                            )}\r\n                            {/* <button\r\n                                onClick={async () => {\r\n                                    setIsLocalFetching({ button: 'describe_quote', status: true })\r\n                                    const options = {\r\n                                        method: 'POST',\r\n                                        url: 'https://api.edenai.run/v2/text/topic_extraction',\r\n                                        headers: {\r\n                                            authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNGM1ZWJjMTktMGZlMi00NmU0LWJjM2QtOThkOTdiNTcyYWYxIiwidHlwZSI6ImFwaV90b2tlbiJ9.fQIkRStyHmpBofuqfieRHCnB5y0hhtSeLRh689nWHSs',\r\n                                            'Content-Type': 'application/json',\r\n                                        },\r\n                                        data: {\r\n                                            show_original_response: false,\r\n                                            fallback_providers: '',\r\n                                            providers: 'google, ibm, openai',\r\n                                            text: `${quotationText} ${philosopherFullName}\r\n                                            What is the meaning of this quote`,\r\n                                            language: 'en',\r\n                                        },\r\n                                    }\r\n\r\n                                    let str = ''\r\n                                    let response = await retryTenTimes(() =>\r\n                                        fetch(options.url, {\r\n                                            method: options.method,\r\n                                            headers: {\r\n                                                'Content-Type': 'application/json',\r\n                                                authorization: options.headers.authorization,\r\n                                            },\r\n                                            body: JSON.stringify(options.data),\r\n                                        })\r\n                                    )\r\n                                    response = await response.json()\r\n\r\n                                    const reponsesInArray = Object.values(response)\r\n                                    reponsesInArray.forEach((val) => {\r\n                                        if (val.items[0]?.category) str += `${val.items[0]?.category}`\r\n                                    })\r\n\r\n                                    setIsLocalFetching({ button: '', status: false })\r\n                                    setAIResponse(JSON.stringify(str.replace(/\\n/g, '')))\r\n                                }}\r\n                            >\r\n                                Describe {isLocalFetching?.button === 'describe_quote' && isLocalFetching?.status && <SmallLoader darkMode />}\r\n                            </button> */}\r\n                        </div>\r\n                    </>\r\n                )}\r\n            </div>\r\n        )\r\n}\r\n\r\nexport default Row\r\n","export function debounce(func, delay) {\r\n    let timer\r\n    return function () {\r\n        const context = this\r\n        const args = arguments\r\n        clearTimeout(timer)\r\n        timer = setTimeout(function () {\r\n            func.apply(context, args)\r\n        }, delay)\r\n    }\r\n}\r\n","import React from 'react'\r\n\r\nconst NoSearchResults = () => (\r\n    <>\r\n        <h4>No search results found!</h4>\r\n\r\n        <div>Guidlines:</div>\r\n\r\n        <div>1. Please check spelling of your search text.</div>\r\n\r\n        <div> 2. Try searching a smaller and a more generic word.</div>\r\n    </>\r\n)\r\nexport default NoSearchResults\r\n","import React from 'react'\r\nimport NoSearchResults from '../../../analysis/no-search-results/no-search-results'\r\n\r\nexport function NoRowsRenderer() {\r\n    return <NoSearchResults />\r\n}\r\n","export const rules = [\r\n    function (value, { start }) {\r\n        if (start <= 20) return 500\r\n    },\r\n    function (value, { start }) {\r\n        if (start > 20 && start <= 40) return 600\r\n    },\r\n    function (value, { start }) {\r\n        if (start > 40 && start <= 60) return 1000\r\n    },\r\n    function (value, { start }) {\r\n        if (start > 60 && start <= 100) return 1400\r\n    },\r\n    function (value, { start }) {\r\n        if (start > 100) return 2000\r\n    },\r\n    function () {\r\n        return 800\r\n    },\r\n]\r\n","import React, { useEffect } from 'react'\r\nimport List from 'react-virtualized/dist/commonjs/List'\r\nimport { ruleEngine } from '../../../../common/utils/ruleEngine'\r\nimport { isDesktop, scrollToQuoteId } from '../../../../common/utils/utils'\r\nimport Row from '../row/row'\r\nimport { NoRowsRenderer } from './utils/listUtils'\r\nimport { rules } from './utils/ruleEngine/rules'\r\nimport { getPhilosopherFullName, getPhilosopherFullName_i10n } from './utils/utils'\r\n\r\nfunction QuotesList({ listRef, width, height, searchText, start, end, markedMode, currentData, setCurrentData, options, currentPhilosopher, markedQuotes, setMarkedQuotes, scrollPosition, setScrollPosition, darkMode, scheduledPosts, setScheduledQuotes, rowsRendered, setRowsRendered, voiceSpeed, minMode }) {\r\n    const philosopherFullName = getPhilosopherFullName({ currentPhilosopher, options })\r\n    const philosopherFullName_i10n = getPhilosopherFullName_i10n({ currentPhilosopher, options })\r\n\r\n    useEffect(() => {\r\n        if (rowsRendered) {\r\n            scrollToQuoteId(listRef, scrollPosition, currentData, currentPhilosopher)\r\n        }\r\n    }, [rowsRendered, currentPhilosopher])\r\n\r\n    useEffect(() => {\r\n        if (listRef.current) {\r\n            scrollToQuoteId(listRef, scrollPosition, currentData, currentPhilosopher)\r\n        }\r\n    }, [listRef?.current])\r\n\r\n    function rowRenderer({ index, ...others }) {\r\n        return <Row data={{ searchText, start, end, philosopherFullName, philosopherFullName_i10n, markedMode, currentData, setCurrentData, currentQuote: currentData[index], index, currentPhilosopher, markedQuotes, setMarkedQuotes, scrollPosition, setScrollPosition, darkMode, listRef, scheduledPosts, setScheduledQuotes, rowsRendered, setRowsRendered, voiceSpeed, minMode }} {...others} />\r\n    }\r\n\r\n    return currentPhilosopher !== undefined && currentData !== undefined && <List height={height} rowCount={currentData?.length} rowHeight={ruleEngine.makeDecision(rules, { params: { start } })} width={width} ref={listRef} rowRenderer={rowRenderer} noRowsRenderer={currentPhilosopher !== undefined && currentData !== undefined ? NoRowsRenderer : null} style={{ padding: '1rem', textAlign: isDesktop() && 'center' }} />\r\n}\r\n\r\nexport default QuotesList\r\n","import { insert, setCharAt } from '../../../../../common/utils/stringUtils'\r\n\r\nexport function copyQuoteText(quoteText, philosopherFullName) {\r\n    if (philosopherFullName.toLowerCase().trim() === 'all') {\r\n        let splittingIndex = quoteText.lastIndexOf('― ')\r\n        let updatedQuoteText = setCharAt(quoteText, splittingIndex - 1, '')\r\n        updatedQuoteText = '\"' + updatedQuoteText\r\n        updatedQuoteText = insert(updatedQuoteText, splittingIndex, '\"\\n\\n')\r\n        navigator.clipboard.writeText(updatedQuoteText)\r\n    } else navigator.clipboard.writeText(`\"${quoteText}\"\\n\\n${philosopherFullName}`)\r\n}\r\n\r\nexport function rowClickHandler({ openSnackbar, philosopherFullName, quote }) {\r\n    copyQuoteText(quote, philosopherFullName)\r\n    openSnackbar('Quote Text Copied!')\r\n}\r\n\r\nexport function devModeSignature() {\r\n    return isAppInDevMode() ? <>dev-mode</> : null\r\n}\r\n\r\nexport function isAppInDevMode() {\r\n    return process.env.NODE_ENV !== 'production'\r\n}\r\n\r\nexport function rowClickHandlerFoBothQuotes({ openSnackbar, quote: { hindi, english }, philosopherNames: { englishFullname, hindiFullname }, index }, event) {\r\n    event.stopPropagation()\r\n    copyBothQuotesText({ hindiQuote: hindi, englishQuote: english }, { englishFullname, hindiFullname })\r\n    openSnackbar('Quote Text Copied!')\r\n}\r\n\r\nexport const copyBothQuotesText = ({ englishQuote, hindiQuote }, { englishFullname, hindiFullname }) => navigator.clipboard.writeText(`\"${hindiQuote}\"\\n\\n― ${hindiFullname}\\n\\n\\n\"${englishQuote}\"\\n\\n― ${englishFullname}`)\r\n\r\nexport function copyURL(openSnackbar, callback) {\r\n    callback()\r\n    navigator.clipboard.writeText(window.location.href.toString())\r\n    openSnackbar('Quote Link Copied. You can now share!')\r\n}\r\n","export function insert(str, index, value) {\r\n    return str.substr(0, index) + value + str.substr(index);\r\n}\r\n\r\nexport function setCharAt(str, index, chr) {\r\n    if (index > str.length - 1) return str;\r\n    return str.substring(0, index) + chr + str.substring(index + 1);\r\n}"],"names":["_ref","darkMode","_jsx","className","concat","styles","children","ruleEngine","makeDecision","rules","value","params","i","length","returnValue","MarkAsRead","React","retryTenTimes","Translate","Audio","data","searchText","start","end","philosopherFullName","philosopherFullName_i10n","markedMode","currentQuote","currentPhilosopher","markedQuotes","setMarkedQuotes","currentData","setCurrentData","index","scrollPosition","setScrollPosition","listRef","voiceSpeed","minMode","style","isLocalFetching","setIsLocalFetching","useState","button","status","AIResponse","setAIResponse","openSnackbar","useSnackbar","quote","quotationText","id","quotationId","propsToSend","localTranslateKey","setLocalTranslateKey","debouncedHandler","useCallback","func","delay","timer","context","this","args","arguments","clearTimeout","setTimeout","apply","debounce","parseInt","dispatch","useDispatch","rowHandler","rowClickHandler","isUndefined","role","onMouseMove","onTouchStart","_jsxs","_Fragment","onClick","inputText","setQuoteImageData","signature","setCurrentModalName","textDecoration","color","Suspense","fallback","SmallLoader","share","NoSearchResults","NoRowsRenderer","_ref2","_ref3","_ref4","_ref5","width","height","options","scheduledPosts","setScheduledQuotes","rowsRendered","setRowsRendered","getPhilosopherFullName","getPhilosopherFullName_i10n","useEffect","scrollToQuoteId","current","undefined","List","rowCount","rowHeight","ref","rowRenderer","others","Row","noRowsRenderer","padding","textAlign","isDesktop","quoteText","toLowerCase","trim","splittingIndex","lastIndexOf","updatedQuoteText","chr","str","substring","substr","insert","navigator","clipboard","writeText","copyQuoteText"],"sourceRoot":""}