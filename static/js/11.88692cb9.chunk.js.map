{"version":3,"file":"static/js/11.88692cb9.chunk.js","mappings":"mIAAO,IAAMA,EAAa,CACtBC,aAAc,SAAUC,EAAV,GACV,IAD+C,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,OAC3BC,EAAI,EAAGA,GAAKH,EAAMI,OAAQD,IAAK,CACpC,IAAME,EAAcL,EAAMG,GAAGF,EAAOC,GACpC,GAAIG,EAAa,OAAOA,M,kECJvBL,EAAQ,CACjB,SAAUM,GACN,GAAIA,GAAS,GAAI,OAAO,KAE5B,SAAUA,GACN,GAAIA,EAAQ,IAAMA,GAAS,GAAI,OAAO,KAE1C,SAAUA,GACN,GAAIA,EAAQ,IAAMA,GAAS,GAAI,OAAO,KAE1C,SAAUA,GACN,GAAIA,EAAQ,IAAMA,GAAS,GAAI,OAAO,KAE1C,SAAUA,GACN,GAAIA,EAAQ,IAAMA,GAAS,GAAI,OAAO,KAE1C,SAAUA,GACN,GAAIA,EAAQ,IAAMA,GAAS,GAAI,OAAO,KAE1C,SAAUA,GACN,GAAIA,EAAQ,IAAMA,GAAS,GAAI,OAAO,KAE1C,SAAUA,GACN,GAAIA,EAAQ,IAAMA,GAAS,GAAI,OAAO,KAE1C,SAAUA,GACN,GAAIA,EAAQ,GAAI,OAAO,KAE3B,WACI,OAAO,IC1BFC,EAAiB,SAACC,GAC3B,IAAMF,EAAQE,EAAMC,MAAM,KAAKL,OAC/B,MAAM,GAAN,OAAUN,EAAAA,EAAAA,aAAwBE,EAAO,CAAEC,MAAOK,EAAOJ,OAAQ,OAAjE,S,qECYJ,UAbuB,SAAC,GAAD,IAAGQ,EAAH,EAAGA,UAAWC,EAAd,EAAcA,cAAeC,EAA7B,EAA6BA,oBAAqBC,EAAlD,EAAkDA,UAAWC,EAA7D,EAA6DA,UAA7D,OACnB,gBAAKC,UAAS,UAAKC,EAAAA,EAAAA,aAAsBC,IAAKP,EAA9C,UACI,iBAAKK,UAAS,UAAKC,EAAAA,EAAAA,eAAL,KAA+BE,MAAO,CAAEC,UAAUZ,EAAAA,EAAAA,GAAeI,IAA/E,WACK,gBAAKI,UAAWC,EAAAA,EAAAA,QAAgBI,IAAKR,EAAqBS,IAAKC,EAAAA,KAAAA,CAAQ,KAA0DR,MAClI,iBAAKC,UAAS,UAAKC,EAAAA,EAAAA,UAAL,YAAyBA,EAAAA,EAAAA,gBAAvC,WACI,eAAGD,UAAS,UAAKC,EAAAA,EAAAA,uBAAjB,UAAiD,IAAEL,EAAc,QACjE,cAAGI,UAAS,UAAKC,EAAAA,EAAAA,uBAAjB,SAAkDJ,QAEtD,gBAAKG,UAAS,UAAKC,EAAAA,EAAAA,WAAnB,SAAwCH,W,mBCXpD,KAAgB,eAAiB,2CAA2C,UAAY,sCAAsC,QAAU,oCAAoC,aAAe,yCAAyC,aAAe,yCAAyC,UAAY,sCAAsC,sBAAwB,kDAAkD,eAAiB,2CAA2C,YAAc","sources":["common/utils/ruleEngine.js","components/organisms/analysis/generate-quote-image/utils/ruleEngine/rules/rules.js","components/organisms/analysis/generate-quote-image/utils/fontutils.js","components/organisms/analysis/quote-with-image/quote-with-image.jsx","webpack://quotes/./src/components/organisms/analysis/generate-quote-image/generateQuoteImage.module.css?32d1"],"sourcesContent":["export const ruleEngine = {\n    makeDecision: function (rules, { value, params }) {\n        for (let i = 0; i <= rules.length; i++) {\n            const returnValue = rules[i](value, params)\n            if (returnValue) return returnValue\n        }\n    },\n}\n","export const rules = [\n    function (words) {\n        if (words <= 15) return 2.3\n    },\n    function (words) {\n        if (words > 15 && words <= 30) return 2.1\n    },\n    function (words) {\n        if (words > 30 && words <= 40) return 1.9\n    },\n    function (words) {\n        if (words > 40 && words <= 50) return 1.8\n    },\n    function (words) {\n        if (words > 50 && words <= 60) return 1.7\n    },\n    function (words) {\n        if (words > 60 && words <= 70) return 1.6\n    },\n    function (words) {\n        if (words > 70 && words <= 80) return 1.5\n    },\n    function (words) {\n        if (words > 80 && words <= 90) return 1.4\n    },\n    function (words) {\n        if (words > 90) return 1.3\n    },\n    function () {\n        return 2.0\n    },\n]\n","import { ruleEngine } from '../../../../../common/utils/ruleEngine'\nimport { rules } from './ruleEngine/rules/rules'\n\nexport const autoAdjustFont = (quote) => {\n    const words = quote.split(' ').length\n    return `${ruleEngine.makeDecision(rules, { value: words, params: null })}rem`\n}\n","import React from 'react'\nimport styles from '../generate-quote-image/generateQuoteImage.module.css'\nimport { autoAdjustFont } from '../generate-quote-image/utils/fontutils'\n\nconst QuoteWithImage = ({ exportRef, quotationText, philosopherFullName, signature, imageName }) => (\n    <div className={`${styles.borderWhite}`} ref={exportRef}>\n        <div className={`${styles.fontFredericka} `} style={{ fontSize: autoAdjustFont(quotationText) }}>\n            {<img className={styles.phImage} alt={philosopherFullName} src={require('../../../../common/static/assets/images/philosophers/' + imageName)} />}\n            <div className={`${styles.alignment} ${styles.quotationColor}`}>\n                <p className={`${styles.backgroundTransparent}`}>\"{quotationText}\"</p>\n                <p className={`${styles.backgroundTransparent}`}>{philosopherFullName}</p>\n            </div>\n            <div className={`${styles.signature}`}>{signature}</div>\n        </div>\n    </div>\n)\n\nexport default QuoteWithImage\n","// extracted by mini-css-extract-plugin\nexport default {\"fontFredericka\":\"generateQuoteImage_fontFredericka__0UhqQ\",\"alignment\":\"generateQuoteImage_alignment__5vbMn\",\"phImage\":\"generateQuoteImage_phImage__H9XsL\",\"alignmentOld\":\"generateQuoteImage_alignmentOld__1JQl5\",\"fullWidthOld\":\"generateQuoteImage_fullWidthOld__+H9Dx\",\"signature\":\"generateQuoteImage_signature__1nVnt\",\"backgroundTransparent\":\"generateQuoteImage_backgroundTransparent__dsccY\",\"quotationColor\":\"generateQuoteImage_quotationColor__GVQtu\",\"borderWhite\":\"generateQuoteImage_borderWhite__IjC6e\"};"],"names":["ruleEngine","makeDecision","rules","value","params","i","length","returnValue","words","autoAdjustFont","quote","split","exportRef","quotationText","philosopherFullName","signature","imageName","className","styles","ref","style","fontSize","alt","src","require"],"sourceRoot":""}