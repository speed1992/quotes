{"version":3,"file":"static/js/438.3e8ce46a.chunk.js","mappings":"gNAOMA,EAAaC,EAAAA,MAAW,kBAAMC,EAAAA,EAAAA,KAAc,kBAAM,6BAAmE,GAAC,IACtHC,EAAaF,EAAAA,MAAW,kBAAMC,EAAAA,EAAAA,KAAc,kBAAM,6BAAiD,GAAC,IACpGE,EAAgBH,EAAAA,MAAW,kBAAMC,EAAAA,EAAAA,KAAc,kBAAM,6BAAyD,GAAC,IAC/GG,EAAcJ,EAAAA,MAAW,kBAAMC,EAAAA,EAAAA,KAAc,kBAAM,6BAAqD,GAAC,IAuC/G,UArCA,SAAqBI,GAA8iB,IAA3iBC,EAAOD,EAAPC,QAASC,EAAaF,EAAbE,cAAeC,EAAUH,EAAVG,WAAYC,EAAKJ,EAALI,MAAOC,EAAGL,EAAHK,IAAKC,EAAQN,EAARM,SAAUC,EAAMP,EAANO,OAAQC,EAAUR,EAAVQ,WAAYC,EAAaT,EAAbS,cAAeC,EAAUV,EAAVU,WAAYC,EAAaX,EAAbW,cAAeC,EAAYZ,EAAZY,aAAcC,EAAWb,EAAXa,YAAaC,EAAcd,EAAdc,eAAgBC,EAAkBf,EAAlBe,mBAAoBC,EAAYhB,EAAZgB,aAAcC,EAAqBjB,EAArBiB,sBAAuBC,EAAOlB,EAAPkB,QAASC,EAAUnB,EAAVmB,WAAYC,EAAQpB,EAARoB,SAAUC,EAAWrB,EAAXqB,YAAaC,EAAUtB,EAAVsB,WAAYC,EAAOvB,EAAPuB,QAASC,EAAiBxB,EAAjBwB,kBAAmBC,EAAoBzB,EAApByB,qBAAsBC,EAAe1B,EAAf0B,gBAAiBC,EAAkB3B,EAAlB2B,mBAAoBC,EAAQ5B,EAAR4B,SAAUC,EAAW7B,EAAX6B,YAAaC,EAAe9B,EAAf8B,gBAAiBC,EAAU/B,EAAV+B,WAAYC,EAAahC,EAAbgC,cAAeC,EAAQjC,EAARiC,SAAUC,EAAWlC,EAAXkC,YAAaC,EAAcnC,EAAdmC,eAAgBC,EAAepC,EAAfoC,gBAAiBC,EAAQrC,EAARqC,SAAUC,EAAWtC,EAAXsC,YAAaC,EAAkBvC,EAAlBuC,mBAAoBC,EAAqBxC,EAArBwC,sBAC/hBC,GAAc,CAAErC,MAAAA,EAAOC,IAAAA,EAAKC,SAAAA,EAAUC,OAAAA,EAAQL,cAAAA,EAAeY,eAAAA,GACnE4B,IAAiCC,EAAAA,EAAAA,WAAS,GAAMC,IAAAC,EAAAA,EAAAA,GAAAH,GAAA,GAAzCI,GAAOF,GAAA,GAAEG,GAAaH,GAAA,GAE7B,OACII,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAAA,EAAOC,OAAOC,SAAA,EAC1BJ,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAAA,EAAOG,aAAaD,SAAA,CAC/BN,KACGQ,EAAAA,EAAAA,KAACC,EAAAA,SAAQ,CAAAH,UACLE,EAAAA,EAAAA,KAACE,EAAAA,EAAa,CAAAJ,UACVE,EAAAA,EAAAA,KAAC5D,EAAU,CAACgB,WAAYA,EAAYC,cAAeA,EAAemC,QAASA,GAAS5B,QAASA,EAASC,WAAYA,EAAY4B,cAAeA,GAAe3B,SAAUA,EAAUC,YAAaA,EAAaC,WAAYA,EAAYC,QAASA,EAASK,SAAUA,EAAUC,YAAaA,EAAaC,gBAAiBA,EAAuBC,WAAAA,EAAYC,cAAAA,EAAeC,SAAAA,EAAUC,YAAAA,EAAazB,cAAAA,SAIxY6C,EAAAA,EAAAA,KAAA,OAAKG,MAAO,CAAEC,YAAa,SAAUC,aAAc,UAAYC,QAAS,kBAAMb,IAAeD,GAAQ,EAACM,SAAC,eAI3GE,EAAAA,EAAAA,KAAA,OAAKL,UAAWC,EAAAA,EAAOG,aAAaD,UAChCE,EAAAA,EAAAA,KAACO,EAAAA,GAAgBC,EAAAA,EAAAA,GAAA,CAACC,UAAU,EAAM9D,QAASA,GAAawC,QAE5Da,EAAAA,EAAAA,KAAA,OAAKL,UAAWC,EAAAA,EAAOG,aAAaD,UAChCE,EAAAA,EAAAA,KAAA,SAAOU,KAAK,cAAc,cAAY,cAAcf,UAAWC,EAAAA,EAAOe,WAAYC,KAAK,OAAOC,YAAY,cAAcC,MAAOjE,EAAYkE,SAAU,SAAAC,GAAA,IAAaF,EAAKE,EAAfC,OAAUH,MAAK,OAASlE,EAAckE,EAAM,OAExMd,EAAAA,EAAAA,KAAA,OAAKL,UAAWC,EAAAA,EAAOG,aAAaD,UAChCE,EAAAA,EAAAA,KAACkB,EAAAA,EAAM,CAACjC,mBAAoBA,EAAoBwB,UAAU,EAAMvC,kBAAmBA,EAAmBN,QAASA,EAASH,mBAAoBA,EAAoB0D,uBAAwB,kBAAMC,EAAAA,EAAAA,GAAe,CAAExD,QAAAA,EAASC,WAAAA,EAAYY,WAAAA,EAAYO,YAAAA,EAAad,kBAAAA,EAAmBC,qBAAAA,EAAsBC,gBAAAA,EAAiBC,mBAAAA,EAAoBJ,QAAAA,EAASc,SAAAA,GAAW,EAAEsC,gBAAiB,SAAAC,GAAA,IAAoBC,EAAWD,EAA5BL,OAAUH,MAAK,OAAsBU,EAAAA,EAAAA,GAA0B,CAAED,YAAAA,EAAa5E,QAAAA,EAASQ,cAAAA,EAAeH,SAAAA,EAAUC,OAAAA,EAAQL,cAAAA,EAAee,sBAAAA,EAAuBH,eAAAA,EAAgBI,QAAAA,EAASC,WAAAA,EAAYgB,eAAAA,EAAgBC,gBAAAA,EAAiBG,mBAAAA,EAAoBC,sBAAAA,GAAwB,EAAEpB,SAAUA,OAErpBkC,EAAAA,EAAAA,KAACC,EAAAA,SAAQ,CAACwB,SAAU,GAAG3B,UACnBJ,EAAAA,EAAAA,MAACnD,EAAU,CAAAuD,SAAA,EACPE,EAAAA,EAAAA,KAACvD,EAAW,CAACW,WAAYA,EAAYsE,MAAkB,OAAXnE,QAAW,IAAXA,OAAW,EAAXA,EAAaoE,SACxDvE,IAAc4C,EAAAA,EAAAA,KAACxD,EAAa,CAACU,WAAYA,EAAYK,YAAaA,EAAaG,aAAcA,EAAcJ,aAAcA,EAAcG,mBAAoBA,EAAoBS,kBAAmBA,WAKvN,C,2EC5CM0D,EAAgBvF,EAAAA,MAAW,kBAAMC,EAAAA,EAAAA,KAAc,kBAAM,uEAA0D,GAAC,IAChHuF,EAAexF,EAAAA,MAAW,kBAAMC,EAAAA,EAAAA,KAAc,kBAAM,6BAAuD,GAAC,IA6BlH,IA3Be,SAAHI,GAA6I,IAADoF,EAAAC,EAAtInE,EAAOlB,EAAPkB,QAASH,EAAkBf,EAAlBe,mBAAoB4D,EAAe3E,EAAf2E,gBAAiBF,EAAsBzE,EAAtByE,uBAAwBV,EAAQ/D,EAAR+D,SAAUvC,EAAiBxB,EAAjBwB,kBAAmBe,EAAkBvC,EAAlBuC,mBAAoBnB,EAAQpB,EAARoB,SAC/HkE,GAAkCC,EAAAA,EAAAA,GAAOrE,GAE7B,OAAlBqB,QAAkB,IAAlBA,GACa,QADK6C,EAAlB7C,EACMiD,eAAO,IAAAJ,GACE,QADFC,EADbD,EAEMK,iBAAS,IAAAJ,GAFfA,EAGMK,SAAQ,SAACC,EAAYC,GACnB,IAAMC,EAAWP,EAAmCQ,WAAU,SAACC,GAAE,OAAKA,EAAG3B,QAAUuB,CAAU,IACvFK,EAAcV,EAAmCW,OAAOJ,EAAU,GACxEP,EAAmCY,QAAQF,EAAY,GAC3D,IAcJ,OAAOjF,IAA6B,OAAPG,QAAO,IAAPA,OAAO,EAAPA,EAAS+D,QAAS,IAXvClB,GACOT,EAAAA,EAAAA,KAACC,EAAAA,SAAQ,CAACwB,SAAU,GAAG3B,SAAErC,IAAsBuC,EAAAA,EAAAA,KAAC6B,EAAY,CAAC5C,mBAAoBA,EAAoBkC,uBAAwBA,EAAwBE,gBAAiBA,EAAiB5D,mBAAoBA,EAAoBqD,OAAO+B,EAAAA,EAAAA,IAA8BpF,EAAoBuE,GAAqCnB,YAAa,qBAAsBjD,QAASoE,EAAoC9D,kBAAmBA,EAAmBJ,SAAUA,OAGhckC,EAAAA,EAAAA,KAACC,EAAAA,SAAQ,CAACwB,SAAU,GAAG3B,UACnBE,EAAAA,EAAAA,KAAC4B,EAAa,CAACR,eAAgBD,EAAwBE,gBAAiBA,EAAiBzD,QAASoE,EAAoCvE,mBAAoBA,EAAoBS,kBAAmBA,MAOrN,C,iGC5BM4E,EAA0BzG,EAAAA,MAAW,kBAAMC,EAAAA,EAAAA,KAAc,kBAAM,qDAAkF,GAAC,IAEjJ,SAASiE,EAAgB7D,GAA6D,IAA1DI,EAAKJ,EAALI,MAAOC,EAAGL,EAAHK,IAAKC,EAAQN,EAARM,SAAUC,EAAMP,EAANO,OAAqBP,EAAbE,cAe7D,OAfoFF,EAAR+D,UAIhEf,EAAAA,EAAAA,MAAAqD,EAAAA,SAAA,CAAAjD,SAAA,EACIJ,EAAAA,EAAAA,MAAA,SAAOsD,GAAG,WAAWrD,UAAWC,EAAAA,EAAOqD,SAAUC,QAAQ,MAAKpD,SAAA,CAAC,QACrD,QAEVE,EAAAA,EAAAA,KAAA,SAAOgD,GAAG,MAAMrD,UAAWC,EAAAA,EAAOuD,WAAsBzC,KAAK,MAAME,KAAK,SAASwC,IAAI,IAAItC,MAAO/D,EAAKgE,SAAU,SAAAC,GAAA,IAAaF,EAAKE,EAAfC,OAAUH,MAAK,OAAS7D,EAAO6D,EAAM,GAArG,WAInDd,EAAAA,EAAAA,KAAC8C,EAAuB,CAAChG,MAAOA,EAAOE,SAAUA,EAAUD,IAAKA,EAAKE,OAAQA,GAIhG,C,qBCpBA,KAAgB,WAAa,qCAAqC,SAAW,mC","sources":["components/organisms/home/mobile/mobile-header/mobile-header.jsx","components/organisms/tools/select/select.js","components/organisms/tools/wordLengthSearch/wordLengthSearch.js","webpack://quotes/./src/components/organisms/tools/wordLengthSearch/wordLengthSearch.module.css?7b27"],"sourcesContent":["import React, { Suspense, useState } from 'react'\r\nimport ErrorBoundary from '../../../../../common/components/error-boundary/error-boundary'\r\nimport { retryTenTimes } from '../../../../../common/utils/apiUtils'\r\nimport Select from '../../../tools/select/select'\r\nimport { WordLengthSearch } from '../../../tools/wordLengthSearch/wordLengthSearch'\r\nimport { onFocusHandler, onPhilosopherSelectChange } from '../../desktop/desktop-header/utils/utils'\r\nimport styles from '../../header-layout/header-layout.module.css'\r\nconst MobileMenu = React.lazy(() => retryTenTimes(() => import(/* webpackChunkName: \"menu\" */ '../mobile-menu/mobile-menu')))\r\nconst Breadcrumb = React.lazy(() => retryTenTimes(() => import('../../../analysis/breadcrumb/breadcrumb')))\r\nconst UnreadCounter = React.lazy(() => retryTenTimes(() => import('../../../analysis/unread-counter/unread-counter')))\r\nconst QuotesFound = React.lazy(() => retryTenTimes(() => import('../../../analysis/quotes-found/quotes-found')))\r\n\r\nfunction MobileHeader({ listRef, setSearchText, searchText, start, end, setStart, setEnd, isFetching, setIsFetching, markedMode, setMarkedMode, markedQuotes, currentData, setCurrentData, currentPhilosopher, originalData, setCurrentPhilosopher, options, setOptions, darkMode, setDarkMode, setSorting, sorting, isFetchingOptions, setIsFetchingOptions, originalOptions, setOriginalOptions, userName, setUserName, setMarkedQuotes, isLoggedIn, setIsLoggedIn, password, setPassword, scrollPosition, setRowsRendered, syncDate, setSyncDate, recentPhilosophers, setRecentPhilosophers }) {\r\n    const propsToSend = { start, end, setStart, setEnd, setSearchText, setCurrentData }\r\n    const [visible, toggleVisible] = useState(false)\r\n\r\n    return (\r\n        <div className={styles.header}>\r\n            <div className={styles.mobileColumn}>\r\n                {visible && (\r\n                    <Suspense>\r\n                        <ErrorBoundary>\r\n                            <MobileMenu markedMode={markedMode} setMarkedMode={setMarkedMode} visible={visible} options={options} setOptions={setOptions} toggleVisible={toggleVisible} darkMode={darkMode} setDarkMode={setDarkMode} setSorting={setSorting} sorting={sorting} userName={userName} setUserName={setUserName} setMarkedQuotes={setMarkedQuotes} {...{ isLoggedIn, setIsLoggedIn, password, setPassword, setIsFetching }} />\r\n                        </ErrorBoundary>\r\n                    </Suspense>\r\n                )}\r\n                <div style={{ paddingLeft: '0.5rem', paddingRight: '0.5rem' }} onClick={() => toggleVisible(!visible)}>\r\n                    â˜°\r\n                </div>\r\n            </div>\r\n            <div className={styles.mobileColumn}>\r\n                <WordLengthSearch isMobile={true} listRef={listRef} {...propsToSend} />\r\n            </div>\r\n            <div className={styles.mobileColumn}>\r\n                <input name=\"search-text\" data-testid=\"search-text\" className={styles.wordSearch} type=\"text\" placeholder=\"Search word\" value={searchText} onChange={({ target: { value } }) => setSearchText(value)} />\r\n            </div>\r\n            <div className={styles.mobileColumn}>\r\n                <Select recentPhilosophers={recentPhilosophers} isMobile={true} isFetchingOptions={isFetchingOptions} options={options} currentPhilosopher={currentPhilosopher} onFocusHandlerCallback={() => onFocusHandler({ options, setOptions, isLoggedIn, setSyncDate, isFetchingOptions, setIsFetchingOptions, originalOptions, setOriginalOptions, sorting, syncDate })} onChangeHandler={({ target: { value: philosopher } }) => onPhilosopherSelectChange({ philosopher, listRef, setIsFetching, setStart, setEnd, setSearchText, setCurrentPhilosopher, setCurrentData, options, setOptions, scrollPosition, setRowsRendered, recentPhilosophers, setRecentPhilosophers })} darkMode={darkMode} />\r\n            </div>\r\n            <Suspense fallback={''}>\r\n                <Breadcrumb>\r\n                    <QuotesFound markedMode={markedMode} found={currentData?.length} />\r\n                    {markedMode && <UnreadCounter isFetching={isFetching} currentData={currentData} originalData={originalData} markedQuotes={markedQuotes} currentPhilosopher={currentPhilosopher} isFetchingOptions={isFetchingOptions} />}\r\n                </Breadcrumb>\r\n            </Suspense>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MobileHeader\r\n","import React, { Suspense } from 'react'\r\nimport { getCurrentPhilosopherFullname } from '../../../../common/static/utils/utils'\r\nimport { retryTenTimes } from '../../../../common/utils/apiUtils'\r\nconst DesktopSelect = React.lazy(() => retryTenTimes(() => import('../../home/desktop/desktop-select/desktop-select')))\r\nconst MobileSelect = React.lazy(() => retryTenTimes(() => import('../../home/mobile/mobile-select/mobile-select')))\r\n\r\nconst Select = ({ options, currentPhilosopher, onChangeHandler, onFocusHandlerCallback, isMobile, isFetchingOptions, recentPhilosophers, darkMode }) => {\r\n    const optionsWithRecentPhilosophersOnTop = [...options]\r\n\r\n    recentPhilosophers\r\n        ?.slice()\r\n        ?.reverse()\r\n        ?.forEach((recentItem, index) => {\r\n            const foundIdx = optionsWithRecentPhilosophersOnTop.findIndex((el) => el.value === recentItem) // -> foundIdx = 3\r\n            const removedItem = optionsWithRecentPhilosophersOnTop.splice(foundIdx, 1)\r\n            optionsWithRecentPhilosophersOnTop.unshift(removedItem[0])\r\n        })\r\n\r\n    const renderSelect = () => {\r\n        if (isMobile) {\r\n            return <Suspense fallback={''}>{currentPhilosopher && <MobileSelect recentPhilosophers={recentPhilosophers} onFocusHandlerCallback={onFocusHandlerCallback} onChangeHandler={onChangeHandler} currentPhilosopher={currentPhilosopher} value={getCurrentPhilosopherFullname(currentPhilosopher, optionsWithRecentPhilosophersOnTop)} placeholder={'Search philosopher'} options={optionsWithRecentPhilosophersOnTop} isFetchingOptions={isFetchingOptions} darkMode={darkMode} />}</Suspense>\r\n        } else {\r\n            return (\r\n                <Suspense fallback={''}>\r\n                    <DesktopSelect onFocusHandler={onFocusHandlerCallback} onChangeHandler={onChangeHandler} options={optionsWithRecentPhilosophersOnTop} currentPhilosopher={currentPhilosopher} isFetchingOptions={isFetchingOptions} />\r\n                </Suspense>\r\n            )\r\n        }\r\n    }\r\n\r\n    return currentPhilosopher && options?.length > 0 && renderSelect()\r\n}\r\n\r\nexport default Select\r\n","import React from 'react'\r\nimport { retryTenTimes } from '../../../../common/utils/apiUtils'\r\nimport styles from './wordLengthSearch.module.css'\r\nconst DesktopWordLengthSearch = React.lazy(() => retryTenTimes(() => import('../../home/desktop/desktop-word-length-search/desktop-word-length-search')))\r\n\r\nexport function WordLengthSearch({ start, end, setStart, setEnd, setSearchText, isMobile }) {\r\n    const renderComponent = () => {\r\n        if (isMobile) {\r\n            return (\r\n                <>\r\n                    <label id=\"labelEnd\" className={styles.labelEnd} htmlFor=\"end\">\r\n                        Words{' '}\r\n                    </label>\r\n                    <input id=\"end\" className={styles.smallInput} key=\"end\" name=\"end\" type=\"number\" min=\"0\" value={end} onChange={({ target: { value } }) => setEnd(value)} />\r\n                </>\r\n            )\r\n        } else {\r\n            return <DesktopWordLengthSearch start={start} setStart={setStart} end={end} setEnd={setEnd} />\r\n        }\r\n    }\r\n    return renderComponent()\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"smallInput\":\"wordLengthSearch_smallInput__oXkfQ\",\"labelEnd\":\"wordLengthSearch_labelEnd__dDyyn\"};"],"names":["MobileMenu","React","retryTenTimes","Breadcrumb","UnreadCounter","QuotesFound","_ref","listRef","setSearchText","searchText","start","end","setStart","setEnd","isFetching","setIsFetching","markedMode","setMarkedMode","markedQuotes","currentData","setCurrentData","currentPhilosopher","originalData","setCurrentPhilosopher","options","setOptions","darkMode","setDarkMode","setSorting","sorting","isFetchingOptions","setIsFetchingOptions","originalOptions","setOriginalOptions","userName","setUserName","setMarkedQuotes","isLoggedIn","setIsLoggedIn","password","setPassword","scrollPosition","setRowsRendered","syncDate","setSyncDate","recentPhilosophers","setRecentPhilosophers","propsToSend","_useState","useState","_useState2","_slicedToArray","visible","toggleVisible","_jsxs","className","styles","header","children","mobileColumn","_jsx","Suspense","ErrorBoundary","style","paddingLeft","paddingRight","onClick","WordLengthSearch","_objectSpread","isMobile","name","wordSearch","type","placeholder","value","onChange","_ref2","target","Select","onFocusHandlerCallback","onFocusHandler","onChangeHandler","_ref3","philosopher","onPhilosopherSelectChange","fallback","found","length","DesktopSelect","MobileSelect","_recentPhilosophers$s","_recentPhilosophers$s2","optionsWithRecentPhilosophersOnTop","_toConsumableArray","slice","reverse","forEach","recentItem","index","foundIdx","findIndex","el","removedItem","splice","unshift","getCurrentPhilosopherFullname","DesktopWordLengthSearch","_Fragment","id","labelEnd","htmlFor","smallInput","min"],"sourceRoot":""}