{"version":3,"file":"static/js/816.c9f7cb1b.chunk.js","mappings":"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","sources":["webpack://quotes/./src/common/small-loader/small-loader.module.css?1d92","common/small-loader/small-loader.js","common/utils/ruleEngine.js","webpack://quotes/./src/components/organisms/home/row/styles/row.module.css?d653","components/organisms/home/row/row.js","common/utils/debounce.js","components/organisms/analysis/no-search-results/no-search-results.jsx","components/organisms/home/quotes-list/utils/listUtils.js","components/organisms/home/quotes-list/utils/ruleEngine/rules.js","components/organisms/home/quotes-list/quotes-list.jsx","components/organisms/home/row/utils/utils.js","common/utils/stringUtils.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"loader\":\"small-loader_loader__Bfz9o\",\"spin\":\"small-loader_spin__Fo7bZ\",\"darkTheme\":\"small-loader_darkTheme__xBV+h\"};","import React from 'react'\nimport styles from './small-loader.module.css'\n\nconst SmallLoader = ({ darkMode }) => <span className={`${styles.loader} ${darkMode ? styles.darkTheme : ''}`}> </span>\n\nexport default SmallLoader\n","export const ruleEngine = {\n    makeDecision: function (rules, { value, params }) {\n        for (let i = 0; i <= rules.length; i++) {\n            const returnValue = rules[i](value, params)\n            if (returnValue) return returnValue\n        }\n    },\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"actionItems\":\"row_actionItems__rUr+U\",\"row\":\"row_row__pRmi1\",\"quoteDescription\":\"row_quoteDescription__4a59b\"};","import React, { Suspense, useCallback, useState } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { setCurrentModalName } from '../../../../common/components/modal/modalRedux'\nimport useSnackbar from '../../../../common/components/snackbar/useSnackbar'\nimport SmallLoader from '../../../../common/small-loader/small-loader'\nimport { retryTenTimes } from '../../../../common/utils/apiUtils'\nimport { isUndefined } from '../../../../common/utils/commonUtils'\nimport { debounce } from '../../../../common/utils/debounce'\nimport { setQuoteImageData } from '../../analysis/generate-quote-image/generateQuoteImageRedux'\nimport styles from './styles/row.module.css'\nimport { rowClickHandler } from './utils/utils'\nconst MarkAsRead = React.lazy(() => retryTenTimes(() => import('../../tools/mark-as-read/mark-as-read')))\nconst Translate = React.lazy(() => retryTenTimes(() => import('../../tools/translate/translate')))\nconst Audio = React.lazy(() => retryTenTimes(() => import('../../tools/audio/audio')))\n\nconst Row = ({ data: { searchText, start, end, philosopherFullName, philosopherFullName_i10n, markedMode, currentQuote, currentPhilosopher, markedQuotes, setMarkedQuotes, currentData, setCurrentData, index, scrollPosition, setScrollPosition, listRef, darkMode, voiceSpeed, minMode }, style }) => {\n    const [isLocalFetching, setIsLocalFetching] = useState({ button: '', status: false })\n    const [AIResponse, setAIResponse] = useState(null)\n    const [openSnackbar] = useSnackbar()\n    const { quote: quotationText, id: quotationId } = currentQuote\n    const propsToSend = { openSnackbar, searchText, start, end, philosopherFullName, index, philosopherFullName_i10n, darkMode, setIsLocalFetching }\n    const [localTranslateKey, setLocalTranslateKey] = useState(false)\n    const debouncedHandler = useCallback(\n        debounce(() => setScrollPosition(parseInt(quotationId)), 500),\n        [quotationId, setScrollPosition]\n    )\n    const dispatch = useDispatch()\n    const rowHandler = useCallback(() => rowClickHandler({ quote: quotationText, openSnackbar, philosopherFullName }), [openSnackbar, philosopherFullName, quotationText])\n\n    if (!isUndefined(currentQuote))\n        return (\n            <div role=\"row\" className={styles.row} key={index} style={style} onMouseMove={debouncedHandler} onTouchStart={debouncedHandler}>\n                {AIResponse ? (\n                    <>\n                        <div>{AIResponse}</div>\n                        <div className={styles.quoteDescription}>\n                            <button onClick={() => setAIResponse(null)}>Close Description</button>\n                        </div>\n                    </>\n                ) : (\n                    <>\n                        <div role=\"columnheader\" className=\"row\">\n                            <span onClick={rowHandler}>{`${index + 1}. \"${quotationText}\" ― ${philosopherFullName}`}</span>\n                        </div>\n                        <div role=\"columnheader\" className=\"row\">\n                            {localTranslateKey ? <Translate inputText={quotationText} {...propsToSend} /> : null}\n                        </div>\n\n                        <div role=\"columnheader\" className={styles.actionItems}>\n                            <button\n                                onClick={() => {\n                                    dispatch(setQuoteImageData({ quotationText, philosopherFullName, signature: 'Instagram: @philosophizetruth' }))\n                                    dispatch(setCurrentModalName('Image'))\n                                }}\n                                style={{ textDecoration: 'none', color: darkMode ? '#fff' : '#000' }}\n                            >\n                                Download\n                            </button>\n                            {!minMode && <Audio index={index} currentData={currentData} scrollPosition={scrollPosition} setScrollPosition={setScrollPosition} listRef={listRef} voiceSpeed={voiceSpeed} />}\n                            {markedMode && (\n                                <Suspense fallback={''}>\n                                    <MarkAsRead index={quotationId} currentPhilosopher={currentPhilosopher} markedQuotes={markedQuotes} setMarkedQuotes={setMarkedQuotes} currentData={currentData} setCurrentData={setCurrentData} setLocalTranslateKey={setLocalTranslateKey} />\n                                </Suspense>\n                            )}\n                            {!minMode && (\n                                <>\n                                    <button onClick={() => setLocalTranslateKey(true)}>Translate {isLocalFetching.button === 'translate' && isLocalFetching.status && <SmallLoader darkMode />}</button>\n                                    <button\n                                        onClick={() => {\n                                            dispatch(setQuoteImageData({ quotationText, philosopherFullName, signature: 'Instagram: @philosophizetruth', share: true }))\n                                            dispatch(setCurrentModalName('Image'))\n                                        }}\n                                        style={{ textDecoration: 'none', color: darkMode ? '#fff' : '#000' }}\n                                    >\n                                        Share\n                                    </button>\n                                </>\n                            )}\n/*                            <button\n                                onClick={async () => {\n                                    setIsLocalFetching({ button: 'describe_quote', status: true })\n                                    const options = {\n                                        method: 'POST',\n                                        url: 'https://api.edenai.run/v2/text/topic_extraction',\n                                        headers: {\n                                            authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNGM1ZWJjMTktMGZlMi00NmU0LWJjM2QtOThkOTdiNTcyYWYxIiwidHlwZSI6ImFwaV90b2tlbiJ9.fQIkRStyHmpBofuqfieRHCnB5y0hhtSeLRh689nWHSs',\n                                            'Content-Type': 'application/json',\n                                        },\n                                        data: {\n                                            show_original_response: false,\n                                            fallback_providers: '',\n                                            providers: 'google, ibm, openai',\n                                            text: `${quotationText} ${philosopherFullName}\n                                            What is the meaning of this quote`,\n                                            language: 'en',\n                                        },\n                                    }\n\n                                    let str = ''\n                                    let response = await retryTenTimes(() =>\n                                        fetch(options.url, {\n                                            method: options.method,\n                                            headers: {\n                                                'Content-Type': 'application/json',\n                                                authorization: options.headers.authorization,\n                                            },\n                                            body: JSON.stringify(options.data),\n                                        })\n                                    )\n                                    response = await response.json()\n\n                                    const reponsesInArray = Object.values(response)\n                                    reponsesInArray.forEach((val) => {\n                                        if (val.items[0]?.category) str += `${val.items[0]?.category}`\n                                    })\n\n                                    setIsLocalFetching({ button: '', status: false })\n                                    setAIResponse(JSON.stringify(str.replace(/\\n/g, '')))\n                                }}\n                            >\n                                Describe {isLocalFetching?.button === 'describe_quote' && isLocalFetching?.status && <SmallLoader darkMode />}\n                            </button>*/\n                        </div>\n                    </>\n                )}\n            </div>\n        )\n}\n\nexport default Row\n","export function debounce(func, delay) {\n    let timer\n    return function () {\n        const context = this\n        const args = arguments\n        clearTimeout(timer)\n        timer = setTimeout(function () {\n            func.apply(context, args)\n        }, delay)\n    }\n}\n","import React from 'react'\n\nconst NoSearchResults = () => (\n    <>\n        <h4>No search results found!</h4>\n\n        <div>Guidlines:</div>\n\n        <div>1. Please check spelling of your search text.</div>\n\n        <div> 2. Try searching a smaller and a more generic word.</div>\n    </>\n)\nexport default NoSearchResults\n","import React from 'react'\nimport NoSearchResults from '../../../analysis/no-search-results/no-search-results'\n\nexport function NoRowsRenderer() {\n    return <NoSearchResults />\n}\n","export const rules = [\n    function (value, { start }) {\n        if (start <= 20) return 500\n    },\n    function (value, { start }) {\n        if (start > 20 && start <= 40) return 600\n    },\n    function (value, { start }) {\n        if (start > 40 && start <= 60) return 1000\n    },\n    function (value, { start }) {\n        if (start > 60 && start <= 100) return 1400\n    },\n    function (value, { start }) {\n        if (start > 100) return 2000\n    },\n    function () {\n        return 800\n    },\n]\n","import React, { useEffect } from 'react'\nimport List from 'react-virtualized/dist/commonjs/List'\nimport { ruleEngine } from '../../../../common/utils/ruleEngine'\nimport { isDesktop, scrollToQuoteId } from '../../../../common/utils/utils'\nimport Row from '../row/row'\nimport { NoRowsRenderer } from './utils/listUtils'\nimport { rules } from './utils/ruleEngine/rules'\nimport { getPhilosopherFullName, getPhilosopherFullName_i10n } from './utils/utils'\n\nfunction QuotesList({ listRef, width, height, searchText, start, end, markedMode, currentData, setCurrentData, options, currentPhilosopher, markedQuotes, setMarkedQuotes, scrollPosition, setScrollPosition, darkMode, scheduledPosts, setScheduledQuotes, rowsRendered, setRowsRendered, voiceSpeed, minMode }) {\n    const philosopherFullName = getPhilosopherFullName({ currentPhilosopher, options })\n    const philosopherFullName_i10n = getPhilosopherFullName_i10n({ currentPhilosopher, options })\n\n    useEffect(() => {\n        if (rowsRendered) {\n            scrollToQuoteId(listRef, scrollPosition, currentData, currentPhilosopher)\n        }\n    }, [rowsRendered, currentPhilosopher])\n\n    useEffect(() => {\n        if (listRef.current) {\n            scrollToQuoteId(listRef, scrollPosition, currentData, currentPhilosopher)\n        }\n    }, [listRef?.current])\n\n    function rowRenderer({ index, ...others }) {\n        return <Row data={{ searchText, start, end, philosopherFullName, philosopherFullName_i10n, markedMode, currentData, setCurrentData, currentQuote: currentData[index], index, currentPhilosopher, markedQuotes, setMarkedQuotes, scrollPosition, setScrollPosition, darkMode, listRef, scheduledPosts, setScheduledQuotes, rowsRendered, setRowsRendered, voiceSpeed, minMode }} {...others} />\n    }\n\n    return currentPhilosopher !== undefined && currentData !== undefined && <List height={height} rowCount={currentData?.length} rowHeight={ruleEngine.makeDecision(rules, { params: { start } })} width={width} ref={listRef} rowRenderer={rowRenderer} noRowsRenderer={currentPhilosopher !== undefined && currentData !== undefined ? NoRowsRenderer : null} style={{ padding: '1rem', textAlign: isDesktop() && 'center' }} />\n}\n\nexport default QuotesList\n","import { insert, setCharAt } from '../../../../../common/utils/stringUtils'\n\nexport function copyQuoteText(quoteText, philosopherFullName) {\n    if (philosopherFullName.toLowerCase().trim() === 'all') {\n        let splittingIndex = quoteText.lastIndexOf('― ')\n        let updatedQuoteText = setCharAt(quoteText, splittingIndex - 1, '')\n        updatedQuoteText = '\"' + updatedQuoteText\n        updatedQuoteText = insert(updatedQuoteText, splittingIndex, '\"\\n\\n')\n        navigator.clipboard.writeText(updatedQuoteText)\n    } else navigator.clipboard.writeText(`\"${quoteText}\"\\n\\n${philosopherFullName}`)\n}\n\nexport function rowClickHandler({ openSnackbar, philosopherFullName, quote }) {\n    copyQuoteText(quote, philosopherFullName)\n    openSnackbar('Quote Text Copied!')\n}\n\nexport function devModeSignature() {\n    return isAppInDevMode() ? <>dev-mode</> : null\n}\n\nexport function isAppInDevMode() {\n    return process.env.NODE_ENV !== 'production'\n}\n\nexport function rowClickHandlerFoBothQuotes({ openSnackbar, quote: { hindi, english }, philosopherNames: { englishFullname, hindiFullname }, index }, event) {\n    event.stopPropagation()\n    copyBothQuotesText({ hindiQuote: hindi, englishQuote: english }, { englishFullname, hindiFullname })\n    openSnackbar('Quote Text Copied!')\n}\n\nexport const copyBothQuotesText = ({ englishQuote, hindiQuote }, { englishFullname, hindiFullname }) => navigator.clipboard.writeText(`\"${hindiQuote}\"\\n\\n― ${hindiFullname}\\n\\n\\n\"${englishQuote}\"\\n\\n― ${englishFullname}`)\n\nexport function copyURL(openSnackbar, callback) {\n    callback()\n    navigator.clipboard.writeText(window.location.href.toString())\n    openSnackbar('Quote Link Copied. You can now share!')\n}\n","export function insert(str, index, value) {\n    return str.substr(0, index) + value + str.substr(index);\n}\n\nexport function setCharAt(str, index, chr) {\n    if (index > str.length - 1) return str;\n    return str.substring(0, index) + chr + str.substring(index + 1);\n}"],"names":["darkMode","className","styles","ruleEngine","makeDecision","rules","value","params","i","length","returnValue","MarkAsRead","React","retryTenTimes","Translate","Audio","data","searchText","start","end","philosopherFullName","philosopherFullName_i10n","markedMode","currentQuote","currentPhilosopher","markedQuotes","setMarkedQuotes","currentData","setCurrentData","index","scrollPosition","setScrollPosition","listRef","voiceSpeed","minMode","style","useState","button","status","isLocalFetching","setIsLocalFetching","AIResponse","setAIResponse","useSnackbar","openSnackbar","quotationText","quote","quotationId","id","propsToSend","localTranslateKey","setLocalTranslateKey","debouncedHandler","useCallback","func","delay","timer","context","this","args","arguments","clearTimeout","setTimeout","apply","debounce","parseInt","dispatch","useDispatch","rowHandler","rowClickHandler","isUndefined","role","onMouseMove","onTouchStart","onClick","inputText","setQuoteImageData","signature","setCurrentModalName","textDecoration","color","Suspense","fallback","share","options","method","url","headers","authorization","show_original_response","fallback_providers","providers","text","language","str","fetch","body","JSON","stringify","response","json","Object","values","forEach","val","items","category","replace","NoRowsRenderer","width","height","scheduledPosts","setScheduledQuotes","rowsRendered","setRowsRendered","getPhilosopherFullName","getPhilosopherFullName_i10n","useEffect","scrollToQuoteId","current","undefined","List","rowCount","rowHeight","ref","rowRenderer","others","noRowsRenderer","padding","textAlign","isDesktop","quoteText","toLowerCase","trim","splittingIndex","lastIndexOf","updatedQuoteText","chr","substring","substr","insert","navigator","clipboard","writeText","copyQuoteText"],"sourceRoot":""}