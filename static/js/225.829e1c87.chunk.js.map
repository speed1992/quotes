{"version":3,"file":"static/js/225.829e1c87.chunk.js","mappings":"oLACA,GAAgB,eAAiB,8BAA8B,MAAQ,qBAAqB,gBAAkB,+BAA+B,UAAY,yBAAyB,SAAW,wBAAwB,MAAQ,sB,kBCqB7N,EAhBc,SAAC,GAAmC,IAAjCA,EAAgC,EAAhCA,SAAUC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACxBC,GAAWC,EAAAA,EAAAA,MAEjB,OACI,iBAAKC,UAAS,UAAKC,EAAAA,eAAL,YAA8BJ,EAAWI,EAAAA,SAAkBA,EAAAA,WAAzE,WACI,iBAAKD,UAAWC,EAAAA,SAAhB,WACI,iBAAMD,UAAWC,EAAAA,MAAjB,SAAgCL,KAChC,mBAAQI,UAAS,UAAKC,EAAAA,MAAL,aAAqBC,EAAAA,EAAAA,MAAcD,EAAAA,gBAAyB,IAAME,SAASC,EAAAA,EAAAA,cAAY,kBAAMN,GAASO,EAAAA,EAAAA,IAAoB,IAAK,OAAhJ,SAAsJ,SAIzJV,O,wXCfAW,iBAAmB,SAACC,GACzBA,EAAQC,SACRD,EAAQC,QAAQC,YAAY,IAIvBC,qBAAuB,SAACH,EAASI,EAAgBC,IAC3C,OAAXA,QAAW,IAAXA,OAAA,EAAAA,EAAaC,QAAS,GAAKN,EAAQC,eACZM,IAAnBH,GAAmD,cAAnBA,GAAkCA,GAAkBA,EAAiB,EACrGJ,EAAQC,QAAQC,YAAYE,GAE5BL,iBAAiBC,KAKhBQ,gBAAkB,SAACR,EAASS,EAAcJ,EAAaK,GAChE,IAAMC,EAAUF,EAAaC,GAC7B,IAAe,OAAXL,QAAW,IAAXA,OAAA,EAAAA,EAAaC,QAAS,GAAKN,EAAQC,QACnC,QAAgBM,IAAZI,GAAqC,cAAZA,GAA2BA,GAAWA,EAAU,EAAG,CAC5E,IAAMC,EAAQP,EAAYQ,WAAU,YAChC,OAD4C,EAATC,KACrBH,KAEdC,GAAS,GAAGZ,EAAQC,QAAQC,YAAYU,QAE5Cb,iBAAiBC,IAKhBe,OAAS,SAATA,OAAU,OAAiD,IAA/CC,WAA8C,MAA9CA,WAAYX,YAAkC,MAAlCA,YAAaY,eAAqB,MAArBA,eAC9C,OAAO,IAAIC,SAAQ,SAACC,cACIZ,IAAhBF,cACAe,iDAAAA,EAAAA,YAAmB,CAAEf,YAAAA,YAAaW,WAAAA,WAAYK,WAAY,qBAC1DD,iDAAAA,EAAAA,UAAmB,SAACE,OAChB,IAAMC,yBAA2BC,KAAKC,MAAMC,KAAK,IAAD,OAAKF,KAAKG,UAAUL,MAAMM,MAA1B,OAChDT,QAAQI,gCAMXM,SAAW,kBAAMC,OAAOC,YAAc,KAEtCpC,UAAY,kBAAMmC,OAAOC,YAAc,M,qBC9C7C,IAAIX,E,gCACPU,OAAOE,OACPZ,EAAS,IAAIY,OAAO,IAAIC,IAAI,mBAE5BC,MAAM","sources":["webpack://quotes/./src/common/components/modal/modal.module.css?0533","common/components/modal/modal.jsx","common/utils/utils.js","common/web-workers/worker.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"modalContainer\":\"modal_modalContainer__lvRIc\",\"close\":\"modal_close__w35Nl\",\"desktopCloseBtn\":\"modal_desktopCloseBtn__L8AA3\",\"lightMode\":\"modal_lightMode__ayeZe\",\"titleBar\":\"modal_titleBar__+I0Z-\",\"title\":\"modal_title__ZytCK\"};","import { useCallback } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { isDesktop } from '../../utils/utils'\nimport styles from './modal.module.css'\nimport { setCurrentModalName } from './modalRedux'\n\nconst Modal = ({ children, title, darkMode }) => {\n    const dispatch = useDispatch()\n\n    return (\n        <div className={`${styles.modalContainer} ${darkMode ? styles.darkMode : styles.lightMode}`}>\n            <div className={styles.titleBar}>\n                <span className={styles.title}>{title}</span>\n                <button className={`${styles.close} ${isDesktop() ? styles.desktopCloseBtn : ''}`} onClick={useCallback(() => dispatch(setCurrentModalName(''), []))}>\n                    X\n                </button>\n            </div>\n            {children}\n        </div>\n    )\n}\n\nexport default Modal\n","import { worker } from '../web-workers/worker'\n\nexport const scrollToFirstRow = (listRef) => {\n    if (listRef.current) {\n        listRef.current.scrollToRow(0)\n    }\n}\n\nexport const scrollToMemorizedRow = (listRef, scrollPosition, currentData) => {\n    if (currentData?.length > 0 && listRef.current) {\n        if (scrollPosition !== undefined && scrollPosition !== 'undefined' && scrollPosition && scrollPosition > 0) {\n            listRef.current.scrollToRow(scrollPosition)\n        } else {\n            scrollToFirstRow(listRef)\n        }\n    }\n}\n\nexport const scrollToQuoteId = (listRef, scrollObject, currentData, currentPhilosopher) => {\n    const quoteId = scrollObject[currentPhilosopher]\n    if (currentData?.length > 0 && listRef.current) {\n        if (quoteId !== undefined && quoteId !== 'undefined' && quoteId && quoteId > 0) {\n            const index = currentData.findIndex(({ id }) => {\n                return id === quoteId\n            })\n            if (index > -1) listRef.current.scrollToRow(index)\n        } else {\n            scrollToFirstRow(listRef)\n        }\n    }\n}\n\nexport const search = ({ searchText, currentData, setCurrentData }) => {\n    return new Promise((resolve) => {\n        if (currentData !== undefined) {\n            worker.postMessage({ currentData, searchText, filterName: 'searchTermFilter' })\n            worker.onmessage = (event) => {\n                const filteredQuotesFromWorker = JSON.parse(eval(`(${JSON.stringify(event.data)})`))\n                resolve(filteredQuotesFromWorker)\n            }\n        }\n    })\n}\n\nexport const isMobile = () => window.innerWidth <= 600\n\nexport const isDesktop = () => window.innerWidth >= 600\n","export let worker\nif (window.Worker) {\n    worker = new Worker(new URL('./filter-worker.js', import.meta.url))\n} else {\n    alert(\"Your browser doesn't support web workers.\")\n}\n"],"names":["children","title","darkMode","dispatch","useDispatch","className","styles","isDesktop","onClick","useCallback","setCurrentModalName","scrollToFirstRow","listRef","current","scrollToRow","scrollToMemorizedRow","scrollPosition","currentData","length","undefined","scrollToQuoteId","scrollObject","currentPhilosopher","quoteId","index","findIndex","id","search","searchText","setCurrentData","Promise","resolve","worker","filterName","event","filteredQuotesFromWorker","JSON","parse","eval","stringify","data","isMobile","window","innerWidth","Worker","URL","alert"],"sourceRoot":""}