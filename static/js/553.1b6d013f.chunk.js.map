{"version":3,"file":"static/js/553.1b6d013f.chunk.js","mappings":"0KAmCA,UA9BA,SAAsBA,GAAuE,IAApEC,EAAUD,EAAVC,WAAYC,EAAiBF,EAAjBE,kBAAmBC,EAAYH,EAAZG,aAAcC,EAAkBJ,EAAlBI,mBAClEC,GAAsCC,EAAAA,EAAAA,UAAS,CAAEC,gBAAiB,KAAMC,UAAW,KAAMC,YAAa,OAAOC,GAAAC,EAAAA,EAAAA,GAAAN,EAAA,GAAtGO,EAAWF,EAAA,GAAEG,EAAcH,EAAA,GAC5BI,GAAUC,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMC,iBAAiBH,OAAO,IAC/DI,GAAeC,EAAAA,EAAAA,IAAqB,CAAEC,YAAahB,EAAoBU,QAAAA,KAE7EO,EAAAA,EAAAA,YAAU,WACN,IAAKpB,IAAeC,EAAmB,CACnC,IAAMK,EAA8B,OAAZW,QAAY,IAAZA,OAAY,EAAZA,EAAcI,OAChCd,GAAYe,EAAAA,EAAAA,IAAYpB,EAAaC,IAAuB,EAAID,EAAaC,GAAoBkB,OAGvGT,EAAe,CAAEN,gBAAAA,EAAiBC,UAAAA,EAAWC,YAFzBF,EAAkBC,GAG1C,CACJ,GAAG,CAACJ,EAAoBH,EAAYC,EAAmBC,EAA0B,OAAZe,QAAY,IAAZA,OAAY,EAAZA,EAAcI,SAEnF,IAAQf,EAA4CK,EAA5CL,gBAAiBC,EAA2BI,EAA3BJ,UAAWC,EAAgBG,EAAhBH,YAEpC,OACIe,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACMzB,GAAciB,IACZS,EAAAA,EAAAA,MAAA,QAAAD,SAAA,CACyB,OAApBnB,GAAwB,UAAAqB,OAAcrB,GACxB,OAAdC,GAAkB,UAAAoB,OAAcpB,GAChB,OAAhBC,GAAoB,YAAAmB,OAAgBnB,OAKzD,C","sources":["components/organisms/analysis/unread-counter/unread-counter.js"],"sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { getPhilosopherQuotes } from '../../../../common/static/utils/utils'\r\nimport { isUndefined } from '../../../../common/utils/commonUtils'\r\n\r\nfunction UnreadCounter({ isFetching, isFetchingOptions, markedQuotes, currentPhilosopher }) {\r\n    const [quoteCounts, setQuoteCounts] = useState({ totalQuoteCount: null, readCount: null, unreadCount: null })\r\n    const options = useSelector((state) => state.philosophersData.options)\r\n    const originalData = getPhilosopherQuotes({ philosopher: currentPhilosopher, options })\r\n\r\n    useEffect(() => {\r\n        if (!isFetching && !isFetchingOptions) {\r\n            const totalQuoteCount = originalData?.length\r\n            const readCount = isUndefined(markedQuotes[currentPhilosopher]) ? 0 : markedQuotes[currentPhilosopher].length\r\n            const unreadCount = totalQuoteCount - readCount\r\n\r\n            setQuoteCounts({ totalQuoteCount, readCount, unreadCount })\r\n        }\r\n    }, [currentPhilosopher, isFetching, isFetchingOptions, markedQuotes, originalData?.length])\r\n\r\n    const { totalQuoteCount, readCount, unreadCount } = quoteCounts\r\n\r\n    return (\r\n        <>\r\n            {!isFetching && originalData && (\r\n                <span>\r\n                    {totalQuoteCount !== null && `Total: ${totalQuoteCount}`}\r\n                    {readCount !== null && ` Read: ${readCount}`}\r\n                    {unreadCount !== null && ` Unread: ${unreadCount}`}\r\n                </span>\r\n            )}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default UnreadCounter\r\n"],"names":["_ref","isFetching","isFetchingOptions","markedQuotes","currentPhilosopher","_useState","useState","totalQuoteCount","readCount","unreadCount","_useState2","_slicedToArray","quoteCounts","setQuoteCounts","options","useSelector","state","philosophersData","originalData","getPhilosopherQuotes","philosopher","useEffect","length","isUndefined","_jsx","_Fragment","children","_jsxs","concat"],"sourceRoot":""}