{"version":3,"file":"static/js/17.b2c681ec.chunk.js","mappings":"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","sources":["common/apis/apiEndpoints.js","common/static/utils/utils.js","common/utils/commonUtils.js","common/utils/localStorageUtils.js","common/utils/staticDataUtils.js","common/web-workers/worker.js","common/utils/dateUtils.js","common/utils/lazyLoadUtils.js","common/utils/objectUtils.js","components/organisms/home/desktop/desktop-header/utils/utils.js","components/organisms/home/home-page/constants/constants.js","components/organisms/home/home-page/utils/utils.js","components/organisms/home/mobile/mobile-menu/utils/utils.js","components/organisms/home/quotes-list/utils/utils.js"],"sourcesContent":["const BASEURL = {\r\n    USER_DETAILS: `https://quotes-backend.vercel.app/api`,\r\n    STATIC_ASSETS_BASEURL: `https://cdn.jsdelivr.net/gh/speed1992/quotes/src/common/static`,\r\n}\r\n\r\nexport const API_ENDPOINTS = {\r\n    STATIC_DATA: {\r\n        STATIC_QUOTES: `${BASEURL.STATIC_ASSETS_BASEURL}/assets/quotes/`,\r\n        STATIC_ASSET_GRAPH: `${BASEURL.STATIC_ASSETS_BASEURL}/philosophers-data.json`,\r\n    },\r\n\r\n    MARKED_QUOTES: {\r\n        BACKUP: `${BASEURL.USER_DETAILS}/markedQuotes/backup`,\r\n        RESTORE: `${BASEURL.USER_DETAILS}/markedQuotes/restore`,\r\n    },\r\n\r\n    USER: {\r\n        LOGIN: `${BASEURL.USER_DETAILS}/user/login`,\r\n        CREATE: `${BASEURL.USER_DETAILS}/user/create`,\r\n    },\r\n\r\n    TRANSLATE: `https://translate.argosopentech.com/translate`,\r\n}\r\n","import { API_ENDPOINTS } from '../../apis/apiEndpoints'\r\nimport { retryTenTimes } from '../../utils/apiUtils'\r\n\r\nexport const addPhilosopherNameToQuote = (quote, philosopherFullName) => `${quote} ― ${philosopherFullName}`\r\n\r\nexport const convertQuoteArray = (quoteArr, philosopherFullName) => quoteArr.map((quote) => addPhilosopherNameToQuote(quote, philosopherFullName))\r\n\r\nexport const allocateIdsToData = (data) =>\r\n    data.forEach((element, index) => {\r\n        element.id = index\r\n    })\r\n\r\nexport const doOperationsOnData = ({ data, setData }, sortingMethod) => {\r\n    data = data.slice()\r\n\r\n    if (sortingMethod === 'alphabetical') data.sort((a, b) => a.fullName.localeCompare(b.fullName))\r\n    else data.sort((a, b) => b.id - a.id)\r\n\r\n    setData(data)\r\n}\r\n\r\nexport const addPhilosopherInGlobalData = (philosopherName, { options, setOptions }, quotes) => {\r\n    const newOptions = JSON.parse(JSON.stringify(options))\r\n    if (philosopherName.trim().toLowerCase() === 'all') {\r\n        const index = getPhilosopherObjectIndex(philosopherName, options)\r\n        let existingQuotes\r\n        if (newOptions[index].quotes === undefined) existingQuotes = []\r\n        else {\r\n            existingQuotes = newOptions[index].quotes\r\n        }\r\n        newOptions[index].quotes = [...existingQuotes, ...quotes]\r\n    } else {\r\n        const index = getPhilosopherObjectIndex(philosopherName, options)\r\n        newOptions[index].quotes = quotes\r\n    }\r\n    setOptions(newOptions)\r\n}\r\n\r\nexport const lazyLoadAsset = (philosopherName, { options, setOptions }, setQuotesLoaded, callbacks) => {\r\n    return new Promise((resolve, reject) => {\r\n        const fileName = philosopherName.toLowerCase()\r\n        retryTenTimes(() => fetch(API_ENDPOINTS.STATIC_DATA.STATIC_QUOTES + fileName + '.json'))\r\n            .then((response) => response.json())\r\n            .then((data) => {\r\n                callbacks && callbacks.map((callback) => callback(data))\r\n                addPhilosopherInGlobalData(philosopherName, { options, setOptions }, data)\r\n                setQuotesLoaded(true)\r\n                resolve()\r\n            })\r\n            .catch((e) => reject(e))\r\n    })\r\n}\r\n\r\nexport const getPhilosopherObjectIndex = (philosopher, options) => options.findIndex(({ value }) => value === philosopher)\r\n\r\nexport const getPhilosopherData = ({ philosopher, options }) => options.filter(({ value }) => value === philosopher)[0]\r\n\r\nexport const getPhilosopherQuotes = ({ philosopher, options }) => options.filter(({ value }) => value === philosopher)[0]?.quotes\r\n\r\nexport const getCurrentPhilosopherFullname = (currentPhilosopher, options) => {\r\n    const currentPhilosopherData = options[getPhilosopherObjectIndex(currentPhilosopher, options)]\r\n    return currentPhilosopherData.fullName\r\n}\r\n\r\nexport const doesPhilosopherDataExist = (philosopher, options) => {\r\n    if (options[getPhilosopherObjectIndex(philosopher, options)]) return true\r\n    else return false\r\n}\r\n","export const isUndefined = (value) => typeof value === 'undefined'\r\nexport const isObjEmpty = (obj) => Object.values(obj).length === 0 && obj.constructor === Object\r\n\r\nexport function uuidv4() {\r\n    return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, (c) => (c ^ (crypto.getRandomValues(new Uint8Array(1))[0] & (15 >> (c / 4)))).toString(16))\r\n}\r\n","import { useEffect, useState } from 'react'\r\n\r\nexport function getStorageValue(key, defaultValue) {\r\n    const saved = localStorage.getItem(key)\r\n    const initial = JSON.parse(saved)\r\n    if (initial === undefined || initial === 'undefined' || initial === 'null' || initial === null) {\r\n        return defaultValue\r\n    } else return initial\r\n}\r\n\r\nexport function setStorageValue(key, value) {\r\n    localStorage.setItem(key, JSON.stringify(value))\r\n}\r\n\r\nexport const useLocalStorage = (key, defaultValue) => {\r\n    const [value, setValue] = useState(() => {\r\n        return getStorageValue(key, defaultValue)\r\n    })\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem(key, JSON.stringify(value))\r\n    }, [key, value])\r\n\r\n    return [value, setValue]\r\n}\r\n","import { getStorageValue } from './localStorageUtils'\r\n\r\nexport const removeReadData = ({ index, currentPhilosopher, markedMode, markedQuotes = {}, setMarkedQuotes, currentData, setCurrentData }) => {\r\n    let newMarkedQuotes = JSON.parse(JSON.stringify(markedQuotes))\r\n    let readQuotesArray = []\r\n\r\n    const READ_ARRAY_LOCALSTORAGE_KEY = `${currentPhilosopher}-MARKED_AS_READ`\r\n    readQuotesArray = getStorageValue(READ_ARRAY_LOCALSTORAGE_KEY, [])\r\n\r\n    if (markedQuotes && markedQuotes[currentPhilosopher] !== undefined) {\r\n        readQuotesArray = [...readQuotesArray, ...markedQuotes[currentPhilosopher]]\r\n    }\r\n\r\n    readQuotesArray = [...new Set(readQuotesArray)]\r\n\r\n    if (index) {\r\n        readQuotesArray.push(index)\r\n    }\r\n\r\n    newMarkedQuotes[currentPhilosopher] = readQuotesArray\r\n    setMarkedQuotes(newMarkedQuotes)\r\n\r\n    const newData = currentData.filter(({ id }, _) => readQuotesArray.indexOf(id) === -1)\r\n    setCurrentData(JSON.parse(JSON.stringify(newData)))\r\n}\r\n","export let worker\r\nif (window.Worker) {\r\n    worker = new Worker(new URL('./filter-worker.js', import.meta.url))\r\n} else {\r\n    alert(\"Your browser doesn't support web workers.\")\r\n}\r\n","const CACHE_TIME_IN_DAYS = 1\r\n\r\nexport const isCacheExpired = (startDate) => {\r\n    startDate = new Date(startDate)\r\n    const endDate = new Date()\r\n    const dateDifferenceInMilliSeconds = endDate.getTime() - startDate.getTime()\r\n    const dateDifferenceInDays = Math.floor(dateDifferenceInMilliSeconds / (1000 * 60 * 60 * 24))\r\n    return dateDifferenceInDays >= CACHE_TIME_IN_DAYS\r\n}\r\n","import { ALPHABETICAL, LATEST } from '../../components/organisms/home/home-page/constants/constants'\r\nimport { STATIC_OPTIONS } from '../../components/organisms/home/home-page/homePageRedux/initialState'\r\nimport { bringIntoAlphabeticalOrder, bringIntoOriginalOrder } from '../../components/organisms/home/home-page/utils/utils'\r\nimport { merge } from './objectUtils'\r\n\r\nexport const addOptionsDataIntoRedux = ({ newOptions, oldOptions, oldOriginalOptions, setOptions, setOriginalOptions }) => {\r\n    let resultantOptions\r\n    resultantOptions = [...oldOptions, ...newOptions]\r\n    setOptions(resultantOptions)\r\n    setOriginalOptions([...STATIC_OPTIONS, ...newOptions])\r\n}\r\n\r\nexport const addResponseOptionsDataIntoRedux = ({ newOptions, oldOptions, oldOriginalOptions, setOptions, setOriginalOptions, sorting }) => {\r\n    const originalOptions = [...STATIC_OPTIONS, ...newOptions]\r\n    let resultantOptions = merge(oldOptions, [...originalOptions])\r\n    if (sorting === LATEST) {\r\n        resultantOptions = bringIntoOriginalOrder(originalOptions, resultantOptions)\r\n    } else if (sorting === ALPHABETICAL) {\r\n        resultantOptions = bringIntoAlphabeticalOrder(resultantOptions)\r\n    }\r\n    setOptions([...resultantOptions])\r\n    setOriginalOptions(originalOptions)\r\n}\r\n","import { getPhilosopherObjectIndex } from '../static/utils/utils'\r\n\r\nexport const merge = (oldOptions, newOptions) => {\r\n    let newOptionsCopy = JSON.parse(JSON.stringify(newOptions))\r\n    newOptionsCopy.forEach((element, newOptionindex) => {\r\n        const oldOptionIndex = getPhilosopherObjectIndex(element.value, oldOptions)\r\n        if (oldOptionIndex !== -1) {\r\n            newOptionsCopy[newOptionindex].quotes = oldOptions[oldOptionIndex].quotes\r\n        }\r\n    })\r\n    return newOptionsCopy\r\n}\r\n","import { API_ENDPOINTS } from '../../../../../../common/apis/apiEndpoints'\r\nimport { getPhilosopherQuotes, lazyLoadAsset } from '../../../../../../common/static/utils/utils'\r\nimport { retryTenTimes } from '../../../../../../common/utils/apiUtils'\r\nimport { isCacheExpired } from '../../../../../../common/utils/dateUtils'\r\nimport { addResponseOptionsDataIntoRedux } from '../../../../../../common/utils/lazyLoadUtils'\r\nimport { changeQuotesData } from '../../../quotes-list/utils/utils'\r\n\r\nexport function onPhilosopherSelectChange({ philosopher, listRef, setIsFetching, setStart, setEnd, setSearchText, setCurrentPhilosopher, currentData, setCurrentData, options, setOptions, setQuotesLoaded, markedMode, markedQuotes, setMarkedQuotes, scrollPosition, setRowsRendered }) {\r\n    function callback() {\r\n        setCurrentPhilosopher(philosopher)\r\n        changeQuotesData({ philosopher, currentData, setCurrentData, options }, { markedMode, markedQuotes, setMarkedQuotes })\r\n        setIsFetching(false)\r\n        setRowsRendered(false)\r\n    }\r\n    setStart(1)\r\n    setEnd('')\r\n    setSearchText('')\r\n    setIsFetching(true)\r\n\r\n    if (!getPhilosopherQuotes({ philosopher, options })) {\r\n        lazyLoadAsset(philosopher, { options, setOptions }, setQuotesLoaded, []).then(callback)\r\n    } else {\r\n        callback()\r\n    }\r\n}\r\n\r\nexport const onFocusHandler = async ({ options, setOptions, isLoggedIn, setSyncDate, isFetchingOptions, setIsFetchingOptions, originalOptions, setOriginalOptions, sorting, syncDate }) => {\r\n    if (isCacheExpired(syncDate) || options.length === 1) {\r\n        console.log('syncDate', syncDate, 'isLoggedIn', isLoggedIn, 'setSyncDate', setSyncDate)\r\n        if (isLoggedIn !== true) {\r\n            setSyncDate?.(Date.now())\r\n        }\r\n        setIsFetchingOptions?.(true)\r\n        let response = await retryTenTimes(() => fetch(API_ENDPOINTS.STATIC_DATA.STATIC_ASSET_GRAPH))\r\n        response = await response.json()\r\n        addResponseOptionsDataIntoRedux({ newOptions: response, oldOptions: options, oldOriginalOptions: originalOptions, setOptions, setOriginalOptions, sorting })\r\n        setIsFetchingOptions?.(false)\r\n    }\r\n}\r\n","export const LATEST = 'latest'\r\nexport const ALPHABETICAL = 'alphabetical'\r\n","import { getPhilosopherData } from '../../../../../common/static/utils/utils'\r\nimport { getUserDetails, sendUserDetails } from '../../mobile/mobile-menu/utils/utils'\r\n\r\nexport const setThemeClassNameOnHTMLTag = (value) => {\r\n    var root = document.getElementsByTagName('html')[0]\r\n    root.className = ''\r\n    if (value) {\r\n        root.classList.add('darkTheme')\r\n    } else {\r\n        root.classList.add('lightTheme')\r\n    }\r\n}\r\n\r\nexport const bringIntoOriginalOrder = (originalOptions, newOptions) => originalOptions.map((item) => getPhilosopherData({ philosopher: item.value, options: newOptions })).reverse()\r\n\r\nexport const bringIntoAlphabeticalOrder = (options) => [...options].sort((a, b) => a.fullName.localeCompare(b.fullName))\r\n\r\nexport function getClientSyncDates(syncDate) {\r\n    let currentClientDate = new Date()\r\n    let lastSyncClientDate = new Date(syncDate)\r\n\r\n    currentClientDate.setHours(0, 0, 0, 0)\r\n    currentClientDate = currentClientDate.getTime()\r\n\r\n    lastSyncClientDate = lastSyncClientDate.setHours(0, 0, 0, 0)\r\n    return { currentClientDate, lastSyncClientDate }\r\n}\r\n\r\nexport async function compareWithServerSyncDatesAndMakeAnAPICall(userName, markedQuotes, openSnackbar, setMarkedQuotes, setSyncDate, markedQuoteClientCount, currentClientDate) {\r\n    let { markedQuotesFromServer, dateFromServer } = await getUserDetails({ userName, markedQuotes, openSnackbar, setMarkedQuotes })\r\n    setSyncDate(Date.now())\r\n    if (markedQuotesFromServer) {\r\n        const markedQuotesFromServerCount = Object.values(markedQuotesFromServer).flat().length\r\n        if (markedQuotesFromServerCount > markedQuoteClientCount) {\r\n            setMarkedQuotes(markedQuotesFromServer)\r\n            openSnackbar('Auto-Sync : Restored all marked quotes!', 4000)\r\n        } else if (markedQuoteClientCount > markedQuotesFromServerCount) {\r\n            dateFromServer = new Date(dateFromServer)\r\n            dateFromServer.setHours(0, 0, 0, 0)\r\n            if (currentClientDate > dateFromServer) {\r\n                await sendUserDetails({ userName, markedQuotes, openSnackbar })\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { API_ENDPOINTS } from '../../../../../../common/apis/apiEndpoints'\r\nimport { retryTenTimes } from '../../../../../../common/utils/apiUtils'\r\n\r\nexport const sendUserDetails = async ({ userName, markedQuotes, openSnackbar, setSyncDate }) => {\r\n    await retryTenTimes(async () => {\r\n        return await fetch(API_ENDPOINTS.MARKED_QUOTES.BACKUP, {\r\n            method: 'post',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({\r\n                userName,\r\n                markedQuotes,\r\n                dateSynced: Date.now(),\r\n            }),\r\n        })\r\n    })\r\n}\r\n\r\nexport const getUserDetails = async ({ userName, markedQuotes, openSnackbar, setMarkedQuotes }) => {\r\n    let response = await retryTenTimes(\r\n        async () =>\r\n            await fetch(API_ENDPOINTS.MARKED_QUOTES.RESTORE, {\r\n                method: 'post',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({\r\n                    userName,\r\n                }),\r\n            })\r\n    )\r\n\r\n    response = await response.json()\r\n    if (response?.ok) {\r\n        try {\r\n            const markedQuotesFromServer = response?.results?.[0]?.markedQuotes\r\n            const markedQuotesFromServerCount = Object.values(markedQuotesFromServer).flat().length\r\n            if (markedQuotesFromServer && markedQuotesFromServerCount > 0) {\r\n                return { markedQuotesFromServer, dateFromServer: response?.results?.[0]?.dateSynced }\r\n                // setMarkedQuotes(response?.results?.[0]?.markedQuotes)\r\n            }\r\n        } catch (error) {\r\n            openSnackbar(JSON.stringify(error))\r\n        }\r\n    } else {\r\n        openSnackbar(JSON.stringify(response.error))\r\n    }\r\n}\r\n\r\nexport const loginRegister = async ({ apiCallType, userName, password, setIsLoggedIn, openSnackbar, setIsFetching }) => {\r\n    const capitalizedUserName = userName.charAt(0).toUpperCase() + userName.slice(1)\r\n    let response\r\n    setIsFetching(true)\r\n    if (apiCallType === 'login') {\r\n        response = await retryTenTimes(\r\n            async () =>\r\n                await fetch(API_ENDPOINTS.USER.LOGIN, {\r\n                    method: 'post',\r\n                    headers: { 'Content-Type': 'application/json' },\r\n                    body: JSON.stringify({\r\n                        userName,\r\n                        password,\r\n                    }),\r\n                })\r\n        )\r\n    } else {\r\n        response = await retryTenTimes(\r\n            async () =>\r\n                await fetch(API_ENDPOINTS.USER.CREATE, {\r\n                    method: 'post',\r\n                    headers: { 'Content-Type': 'application/json' },\r\n                    body: JSON.stringify({\r\n                        userName,\r\n                        password,\r\n                    }),\r\n                })\r\n        )\r\n    }\r\n\r\n    response = await response.json()\r\n    setIsFetching(false)\r\n\r\n    if (response?.ok) {\r\n        setIsLoggedIn(true)\r\n        openSnackbar(capitalizedUserName + ' ' + JSON.stringify(response.serverResponse))\r\n    } else {\r\n        openSnackbar(JSON.stringify(response.error))\r\n    }\r\n}\r\n","import { isObjEmpty } from '../../../../../common/utils/commonUtils'\r\nimport { removeReadData } from '../../../../../common/utils/staticDataUtils'\r\nimport { worker } from '../../../../../common/web-workers/worker'\r\n\r\nexport const changeQuotesData = ({ currentPhilosopher, currentData, setCurrentData, options }, { markedMode = null, markedQuotes, setMarkedQuotes }) => {\r\n    if (currentData) setCurrentData(currentData)\r\n    if (markedMode !== undefined && markedMode) removeReadData({ currentPhilosopher, markedMode, markedQuotes, setMarkedQuotes, currentData, setCurrentData })\r\n}\r\n\r\nexport const getPhilosopherFullName = ({ currentPhilosopher, options }) => {\r\n    const currentIndex = options.filter(({ value }) => currentPhilosopher === value)\r\n    if (!isObjEmpty(currentIndex)) return currentIndex && currentIndex[0].fullName\r\n}\r\n\r\nexport const getPhilosopherFullName_i10n = ({ currentPhilosopher, options }) => {\r\n    const currentIndex = options.filter(({ value }) => currentPhilosopher === value)\r\n    if (!isObjEmpty(currentIndex)) return currentIndex && currentIndex[0].fullNameInOtherLanguages\r\n}\r\n\r\nexport const searchByWordLength = async (start, end, quotes, { markedMode, markedQuotes, setMarkedQuotes }, { setCurrentData, currentPhilosopher }) => {\r\n    return new Promise((resolve) => {\r\n        if (quotes !== undefined) {\r\n            if (typeof start === 'string' && start.trim() === '') start = 0\r\n            worker.postMessage({ quotes, end, start, filterName: 'wordCountFilter' })\r\n            worker.onmessage = (event) => {\r\n                const newData = JSON.parse(eval(`(${JSON.stringify(event.data)})`))\r\n                changeQuotesData({ currentData: newData, setCurrentData, currentPhilosopher }, { markedMode, markedQuotes, setMarkedQuotes })\r\n                resolve()\r\n            }\r\n        }\r\n    })\r\n}\r\n\r\nexport function getWordCount(str) {\r\n    return str.split(' ').filter(function (n) {\r\n        return n !== ''\r\n    }).length\r\n}\r\n"],"names":["BASEURL","API_ENDPOINTS","STATIC_DATA","STATIC_QUOTES","concat","STATIC_ASSET_GRAPH","MARKED_QUOTES","BACKUP","RESTORE","USER","LOGIN","CREATE","TRANSLATE","lazyLoadAsset","philosopherName","_ref3","setQuotesLoaded","callbacks","options","setOptions","Promise","resolve","reject","fileName","toLowerCase","retryTenTimes","fetch","then","response","json","data","map","callback","_ref2","quotes","newOptions","JSON","parse","stringify","trim","existingQuotes","index","getPhilosopherObjectIndex","undefined","_toConsumableArray","addPhilosopherInGlobalData","catch","e","philosopher","findIndex","_ref4","value","getPhilosopherData","_ref5","filter","_ref6","getPhilosopherQuotes","_ref7","_options$filter$","_ref8","getCurrentPhilosopherFullname","currentPhilosopher","fullName","doesPhilosopherDataExist","isUndefined","isObjEmpty","obj","Object","values","length","constructor","uuidv4","replace","c","crypto","getRandomValues","Uint8Array","toString","getStorageValue","key","defaultValue","saved","localStorage","getItem","initial","removeReadData","_ref","_ref$markedQuotes","markedMode","markedQuotes","setMarkedQuotes","currentData","setCurrentData","newMarkedQuotes","readQuotesArray","READ_ARRAY_LOCALSTORAGE_KEY","Set","push","newData","_","id","indexOf","worker","window","Worker","URL","alert","isCacheExpired","startDate","Date","dateDifferenceInMilliSeconds","getTime","Math","floor","addResponseOptionsDataIntoRedux","oldOptions","oldOriginalOptions","setOriginalOptions","sorting","originalOptions","STATIC_OPTIONS","resultantOptions","newOptionsCopy","forEach","element","newOptionindex","oldOptionIndex","merge","LATEST","bringIntoOriginalOrder","ALPHABETICAL","bringIntoAlphabeticalOrder","onPhilosopherSelectChange","setIsFetching","listRef","setStart","setEnd","setSearchText","setCurrentPhilosopher","setRowsRendered","scrollPosition","changeQuotesData","onFocusHandler","_asyncToGenerator","_regeneratorRuntime","mark","_callee","isLoggedIn","setSyncDate","setIsFetchingOptions","syncDate","wrap","_context","prev","next","isFetchingOptions","console","log","now","sent","stop","_x","apply","arguments","setThemeClassNameOnHTMLTag","root","document","getElementsByTagName","className","classList","add","item","reverse","sort","a","b","localeCompare","getClientSyncDates","currentClientDate","lastSyncClientDate","setHours","compareWithServerSyncDatesAndMakeAnAPICall","_x2","_x3","_x4","_x5","_x6","_x7","_compareWithServerSyncDatesAndMakeAnAPICall","userName","openSnackbar","markedQuoteClientCount","_yield$getUserDetails","markedQuotesFromServer","dateFromServer","markedQuotesFromServerCount","getUserDetails","flat","sendUserDetails","_callee2","_context2","method","headers","body","dateSynced","abrupt","_callee4","_response","_response2","_response2$results","_response2$results$","_response3","_response3$results","_response3$results$","_context4","_callee3","_context3","ok","results","t0","error","loginRegister","_callee7","_response4","apiCallType","password","setIsLoggedIn","capitalizedUserName","_context7","charAt","toUpperCase","slice","_callee5","_context5","_callee6","_context6","serverResponse","_ref2$markedMode","getPhilosopherFullName","currentIndex","getPhilosopherFullName_i10n","fullNameInOtherLanguages","searchByWordLength","_ref9","start","end","_callee$","postMessage","filterName","onmessage","event","eval","getWordCount","str","split","n"],"sourceRoot":""}