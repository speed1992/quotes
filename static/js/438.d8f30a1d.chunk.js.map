{"version":3,"file":"static/js/438.d8f30a1d.chunk.js","mappings":"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","sources":["components/organisms/home/mobile/mobile-header/mobile-header.jsx","components/organisms/tools/select/select.js","components/organisms/tools/wordLengthSearch/wordLengthSearch.js"],"sourcesContent":["import React, { Suspense, useState } from 'react'\r\nimport { retryTenTimes } from '../../../../../common/utils/apiUtils'\r\nimport Select from '../../../tools/select/select'\r\nimport { WordLengthSearch } from '../../../tools/wordLengthSearch/wordLengthSearch'\r\nimport { onFocusHandler, onPhilosopherSelectChange } from '../../desktop/desktop-header/utils/utils'\r\nconst MobileMenu = React.lazy(() => retryTenTimes(() => import('../mobile-menu/mobile-menu')))\r\nconst Breadcrumb = React.lazy(() => retryTenTimes(() => import('../../../analysis/breadcrumb/breadcrumb')))\r\nconst UnreadCounter = React.lazy(() => retryTenTimes(() => import('../../../analysis/unread-counter/unread-counter')))\r\nconst QuotesFound = React.lazy(() => retryTenTimes(() => import('../../../analysis/quotes-found/quotes-found')))\r\n\r\nfunction MobileHeader({ listRef, setSearchText, searchText, start, end, setStart, setEnd, isFetching, setIsFetching, markedMode, setMarkedMode, markedQuotes, currentData, setCurrentData, currentPhilosopher, originalData, setCurrentPhilosopher, options, setOptions, setQuotesLoaded, darkMode, setDarkMode, setSorting, sorting, isFetchingOptions, setIsFetchingOptions, originalOptions, setOriginalOptions, userName, setUserName, setMarkedQuotes, isLoggedIn, setIsLoggedIn, password, setPassword, scrollPosition, setRowsRendered }) {\r\n    const propsToSend = { start, end, setStart, setEnd, setSearchText, setCurrentData }\r\n    const [visible, toggleVisible] = useState(false)\r\n\r\n    return (\r\n        <div className=\"header\">\r\n            <div className=\"mobile-column\">\r\n                {visible && (\r\n                    <Suspense fallback={''}>\r\n                        <MobileMenu markedMode={markedMode} setMarkedMode={setMarkedMode} visible={visible} options={options} setOptions={setOptions} toggleVisible={toggleVisible} darkMode={darkMode} setDarkMode={setDarkMode} setSorting={setSorting} sorting={sorting} userName={userName} setUserName={setUserName} setMarkedQuotes={setMarkedQuotes} {...{ isLoggedIn, setIsLoggedIn, password, setPassword, setIsFetching }} />\r\n                    </Suspense>\r\n                )}\r\n                <div style={{ paddingLeft: '0.5rem', paddingRight: '0.5rem' }} onClick={() => toggleVisible(!visible)}>\r\n                    â˜°\r\n                </div>\r\n            </div>\r\n            <div className=\"mobile-column\">\r\n                <WordLengthSearch isMobile={true} listRef={listRef} {...propsToSend} />\r\n            </div>\r\n            <div className=\"mobile-column\">\r\n                <input data-testid=\"search-text\" className=\"wordSearch\" type=\"text\" placeholder=\"Search word\" value={searchText} onChange={({ target: { value } }) => setSearchText(value)} />\r\n            </div>\r\n            <div className=\"mobile-column\">\r\n                <Select isMobile={true} isFetchingOptions={isFetchingOptions} options={options} currentPhilosopher={currentPhilosopher} onFocusHandlerCallback={() => onFocusHandler({ options, setOptions, isFetchingOptions, setIsFetchingOptions, originalOptions, setOriginalOptions, sorting })} onChangeHandler={({ target: { value: philosopher } }) => onPhilosopherSelectChange({ philosopher, listRef, setIsFetching, setStart, setEnd, setSearchText, setCurrentPhilosopher, setCurrentData, options, setOptions, setQuotesLoaded, scrollPosition, setRowsRendered })} />\r\n            </div>\r\n            <Suspense fallback={''}>\r\n                <Breadcrumb>\r\n                    <QuotesFound markedMode={markedMode} found={currentData.length} />\r\n                    {markedMode && <UnreadCounter isFetching={isFetching} currentData={currentData} originalData={originalData} markedQuotes={markedQuotes} currentPhilosopher={currentPhilosopher} isFetchingOptions={isFetchingOptions} />}\r\n                </Breadcrumb>\r\n            </Suspense>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MobileHeader\r\n","import React, { Suspense } from 'react'\r\nimport { getCurrentPhilosopherFullname } from '../../../../common/static/utils/utils'\r\nimport { retryTenTimes } from '../../../../common/utils/apiUtils'\r\nimport './select.css'\r\nconst DesktopSelect = React.lazy(() => retryTenTimes(() => import('../../home/desktop/desktop-select/desktop-select')))\r\nconst MobileSelect = React.lazy(() => retryTenTimes(() => import('../../home/mobile/mobile-select/mobile-select')))\r\n\r\nconst Select = ({ options, currentPhilosopher, onChangeHandler, onFocusHandlerCallback, isMobile, isFetchingOptions }) => {\r\n    const renderSelect = () => {\r\n        if (isMobile) {\r\n            return (\r\n                <Suspense fallback={''}>\r\n                    <MobileSelect onFocusHandlerCallback={onFocusHandlerCallback} onChangeHandler={onChangeHandler} currentPhilosopher={currentPhilosopher} value={getCurrentPhilosopherFullname(currentPhilosopher, options)} placeholder={'Search philosopher'} options={options} isFetchingOptions={isFetchingOptions} />\r\n                </Suspense>\r\n            )\r\n        } else {\r\n            return (\r\n                <Suspense fallback={''}>\r\n                    <DesktopSelect onFocusHandler={onFocusHandlerCallback} onChangeHandler={onChangeHandler} options={options} currentPhilosopher={currentPhilosopher} isFetchingOptions={isFetchingOptions} />\r\n                </Suspense>\r\n            )\r\n        }\r\n    }\r\n\r\n    return renderSelect()\r\n}\r\n\r\nexport default Select\r\n","import React from 'react'\r\nimport { retryTenTimes } from '../../../../common/utils/apiUtils'\r\nimport './wordLengthSearch.css'\r\nconst DesktopWordLengthSearch = React.lazy(() => retryTenTimes(() => import('../../home/desktop/desktop-word-length-search/desktop-word-length-search')))\r\n\r\nexport function WordLengthSearch({ start, end, setStart, setEnd, setSearchText, isMobile }) {\r\n    const renderComponent = () => {\r\n        if (isMobile) {\r\n            return (\r\n                <>\r\n                    <label id=\"labelEnd\" for=\"end\">\r\n                        Words{' '}\r\n                    </label>\r\n                    <input id=\"end\" className=\"smallInput\" key=\"end\" name=\"end\" type=\"number\" min=\"0\" value={end} onChange={({ target: { value } }) => setEnd(value)} />\r\n                </>\r\n            )\r\n        } else {\r\n            return <DesktopWordLengthSearch start={start} setStart={setStart} end={end} setEnd={setEnd} />\r\n        }\r\n    }\r\n    return renderComponent()\r\n}\r\n"],"names":["MobileMenu","React","retryTenTimes","Breadcrumb","UnreadCounter","QuotesFound","_ref","listRef","setSearchText","searchText","start","end","setStart","setEnd","isFetching","setIsFetching","markedMode","setMarkedMode","markedQuotes","currentData","setCurrentData","currentPhilosopher","originalData","setCurrentPhilosopher","options","setOptions","setQuotesLoaded","darkMode","setDarkMode","setSorting","sorting","isFetchingOptions","setIsFetchingOptions","originalOptions","setOriginalOptions","userName","setUserName","setMarkedQuotes","isLoggedIn","setIsLoggedIn","password","setPassword","scrollPosition","setRowsRendered","propsToSend","_useState","useState","_useState2","_slicedToArray","visible","toggleVisible","_jsxs","className","children","_jsx","Suspense","fallback","style","paddingLeft","paddingRight","onClick","WordLengthSearch","_objectSpread","isMobile","type","placeholder","value","onChange","_ref2","target","Select","onFocusHandlerCallback","onFocusHandler","onChangeHandler","_ref3","philosopher","onPhilosopherSelectChange","found","length","DesktopSelect","MobileSelect","getCurrentPhilosopherFullname","DesktopWordLengthSearch","_Fragment","id","for","name","min"],"sourceRoot":""}