{"version":3,"file":"static/js/388.fa01b2ae.chunk.js","mappings":"sMAEO,SAAeA,EAAIC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAAA,OAAAC,EAAAC,MAAC,KAADC,UAAA,CAezB,SAAAF,IAAA,OAAAA,GAAAG,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAfM,SAAAC,EAAoBC,EAAOC,EAAaC,EAAYC,EAASC,EAAgBC,GAAiB,IAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAZ,EAAAA,EAAAA,KAAAa,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAO7C,GANhDP,EAAQQ,OAAOC,gBACfR,EAAaD,EAAMU,SAEV,WAAO,CACpBC,GAEIT,EAAI,IAAIU,SAAQ,SAACC,GAAO,OAAeA,CAAO,IAE7CZ,EAAW,CAADI,EAAAE,KAAA,SACFJ,EAAIT,EAAM,KAAD,OAAES,EAAIR,EAAYmB,QAAM,CAAAT,EAAAE,KAAA,SAEO,OAD7CR,EAAkBI,IAClBY,EAAAA,EAAAA,IAAqBlB,EAASM,EAAGR,GAAYU,EAAAE,KAAA,GACvCK,QAAQI,KAAK,CAACd,EAAGe,EAAatB,EAAYQ,GAAU,MAAGP,KAAa,QAHlCO,IAAGE,EAAAE,KAAA,iCAAAF,EAAAa,OAAA,GAAAzB,EAAA,MAKtDL,MAAA,KAAAC,UAAA,CAED,SAAS4B,EAAaE,EAASvB,GAC3B,IAAIwB,EAAQ,IAAIC,yBAAyBF,GAGzC,OAFAC,EAAME,KAAO1B,EACbY,OAAOC,gBAAgBc,MAAMH,GACtB,IAAIR,SAAQ,SAACC,EAASW,GAAM,OAAMJ,EAAMK,MAAQZ,CAAO,GAClE,C,aCdA,EANc,SAAHa,GAA4E,IAAtEhC,EAAKgC,EAALhC,MAAOC,EAAW+B,EAAX/B,YAAaG,EAAc4B,EAAd5B,eAAgBC,EAAiB2B,EAAjB3B,kBAAmBF,EAAO6B,EAAP7B,QAC9DD,GAAa+B,EAAAA,EAAAA,KAAY,SAAAC,GAAiC,OAAAA,EAA9BC,iBAAoBjC,UAA6B,IAEnF,OAAOkC,EAAAA,EAAAA,KAAA,UAAQC,QAASnD,EAAKoD,K,UAAWtC,EAAOC,EAAaC,EAAYC,EAASC,EAAgBC,GAAmBkC,SAAC,cACzH,C","sources":["components/organisms/tools/audio/utils/speechUtils.js","components/organisms/tools/audio/audio.jsx"],"sourcesContent":["import { scrollToMemorizedRow } from '../../../../../common/utils/utils'\r\n\r\nexport async function play(index, currentData, voiceSpeed, listRef, scrollPosition, setScrollPosition) {\r\n    var synth = window.speechSynthesis,\r\n        isSpeaking = synth.speaking\r\n\r\n    let cancel = () => {}\r\n    cancel()\r\n\r\n    let p = new Promise((resolve) => (cancel = resolve))\r\n\r\n    if (!isSpeaking)\r\n        for (let i = index; i < currentData.length; i++) {\r\n            setScrollPosition(i)\r\n            scrollToMemorizedRow(listRef, i, currentData)\r\n            await Promise.race([p, getNextAudio(currentData[i]['quote'], voiceSpeed)])\r\n        }\r\n}\r\n\r\nfunction getNextAudio(message, voiceSpeed) {\r\n    let audio = new SpeechSynthesisUtterance(message)\r\n    audio.rate = voiceSpeed\r\n    window.speechSynthesis.speak(audio)\r\n    return new Promise((resolve, reject) => (audio.onend = resolve))\r\n}\r\n","import React from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { play } from './utils/speechUtils'\r\n\r\nconst Audio = ({ index, currentData, scrollPosition, setScrollPosition, listRef }) => {\r\n    const voiceSpeed = useSelector(({ philosophersData: { voiceSpeed } }) => voiceSpeed)\r\n\r\n    return <button onClick={play.bind(this, index, currentData, voiceSpeed, listRef, scrollPosition, setScrollPosition)}>Play Audio</button>\r\n}\r\n\r\nexport default Audio\r\n"],"names":["play","_x","_x2","_x3","_x4","_x5","_x6","_play","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","index","currentData","voiceSpeed","listRef","scrollPosition","setScrollPosition","synth","isSpeaking","p","i","wrap","_context","prev","next","window","speechSynthesis","speaking","cancel","Promise","resolve","length","scrollToMemorizedRow","race","getNextAudio","stop","message","audio","SpeechSynthesisUtterance","rate","speak","reject","onend","_ref","useSelector","_ref2","philosophersData","_jsx","onClick","bind","children"],"sourceRoot":""}