{"version":3,"file":"static/js/388.33c52b86.chunk.js","mappings":"+MAEO,SAAeA,EAAtB,yDAAO,OAAP,oBAAO,WAAoBC,EAAOC,EAAaC,EAAYC,EAASC,EAAgBC,GAA7E,gFACCC,EAAQC,OAAOC,gBACfC,EAAaH,EAAMI,SAEV,YACbC,GAEIC,EAAI,IAAIC,SAAQ,SAACC,GAAD,OAAuBA,KAEtCL,EATF,iBAUUM,EAAIf,EAVd,YAUqBe,EAAId,EAAYe,QAVrC,wBAWKX,EAAkBU,IAClBE,EAAAA,EAAAA,IAAqBd,EAASY,EAAGd,GAZtC,UAaWY,QAAQK,KAAK,CAACN,EAAGO,EAAalB,EAAYc,GAAZ,MAAyBb,KAblE,QAU6Ca,IAV7C,kFAiBP,SAASI,EAAaC,EAASlB,GAC3B,IAAImB,EAAQ,IAAIC,yBAAyBF,GAGzC,OAFAC,EAAME,KAAOrB,EACbK,OAAOC,gBAAgBgB,MAAMH,GACtB,IAAIR,SAAQ,SAACC,EAASW,GAAV,OAAsBJ,EAAMK,MAAQZ,K,aCb3D,EANc,SAAC,GAAwE,IAAtEd,EAAqE,EAArEA,MAAOC,EAA8D,EAA9DA,YAAaG,EAAiD,EAAjDA,eAAgBC,EAAiC,EAAjCA,kBAAmBF,EAAc,EAAdA,QAC9DD,GAAayB,EAAAA,EAAAA,KAAY,qBAAGC,iBAAoB1B,cAEtD,OAAO,mBAAQ2B,QAAS9B,EAAK+B,K,UAAW9B,EAAOC,EAAaC,EAAYC,EAASC,EAAgBC,GAA1F","sources":["components/organisms/tools/audio/utils/speechUtils.js","components/organisms/tools/audio/audio.jsx"],"sourcesContent":["import { scrollToMemorizedRow } from '../../../../../common/utils/utils'\r\n\r\nexport async function play(index, currentData, voiceSpeed, listRef, scrollPosition, setScrollPosition) {\r\n    var synth = window.speechSynthesis,\r\n        isSpeaking = synth.speaking\r\n\r\n    let cancel = () => {}\r\n    cancel()\r\n\r\n    let p = new Promise((resolve) => (cancel = resolve))\r\n\r\n    if (!isSpeaking)\r\n        for (let i = index; i < currentData.length; i++) {\r\n            setScrollPosition(i)\r\n            scrollToMemorizedRow(listRef, i, currentData)\r\n            await Promise.race([p, getNextAudio(currentData[i]['quote'], voiceSpeed)])\r\n        }\r\n}\r\n\r\nfunction getNextAudio(message, voiceSpeed) {\r\n    let audio = new SpeechSynthesisUtterance(message)\r\n    audio.rate = voiceSpeed\r\n    window.speechSynthesis.speak(audio)\r\n    return new Promise((resolve, reject) => (audio.onend = resolve))\r\n}\r\n","import React from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { play } from './utils/speechUtils'\r\n\r\nconst Audio = ({ index, currentData, scrollPosition, setScrollPosition, listRef }) => {\r\n    const voiceSpeed = useSelector(({ philosophersData: { voiceSpeed } }) => voiceSpeed)\r\n\r\n    return <button onClick={play.bind(this, index, currentData, voiceSpeed, listRef, scrollPosition, setScrollPosition)}>Play Audio</button>\r\n}\r\n\r\nexport default Audio\r\n"],"names":["play","index","currentData","voiceSpeed","listRef","scrollPosition","setScrollPosition","synth","window","speechSynthesis","isSpeaking","speaking","cancel","p","Promise","resolve","i","length","scrollToMemorizedRow","race","getNextAudio","message","audio","SpeechSynthesisUtterance","rate","speak","reject","onend","useSelector","philosophersData","onClick","bind"],"sourceRoot":""}