{"version":3,"file":"static/js/192.430bed07.chunk.js","mappings":"mIAoBA,UAlBsB,SAAC,GAA8E,IAA5EA,EAA2E,EAA3EA,SAAUC,EAAiE,EAAjEA,aAAcC,EAAmD,EAAnDA,aAAcC,EAAqC,EAArCA,gBAAiBC,EAAoB,EAApBA,cACtEC,EAAsBL,EAASM,OAAO,GAAGC,cAAgBP,EAASQ,MAAM,GAC9E,OACI,iCACI,iBAAKC,UAAU,WAAf,gBAA8BJ,EAA9B,QACA,mBAAQI,UAAU,UAAUC,QAAS,kBAAMC,EAAAA,EAAAA,IAAgB,CAAEX,SAAAA,EAAUC,aAAAA,EAAcC,aAAAA,KAArF,qBAGA,mBAAQO,UAAU,UAAUC,QAAS,kBAAME,EAAAA,EAAAA,IAAe,CAAEZ,SAAAA,EAAUC,aAAAA,EAAcC,aAAAA,EAAcC,gBAAAA,KAAlG,sBAGA,mBAAQM,UAAU,UAAUC,QAAS,kBAAMN,GAAc,IAAzD,yB,gJCXCO,EAAe,mCAAG,kGAASX,EAAT,EAASA,SAAUC,EAAnB,EAAmBA,aAAcC,EAAjC,EAAiCA,aAAjC,UACNW,EAAAA,EAAAA,KAAa,iBAC9B,8FACUC,MAAM,sDAAuD,CAC/DC,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAU,CACjBnB,SAAAA,EACAC,aAAAA,EACAmB,WAAYC,KAAKC,UAP7B,oFAFuB,cACvBC,EADuB,gBAcVA,EAASC,OAdC,OAc3BD,EAd2B,OAe3BrB,EAAagB,KAAKC,UAAUI,IAfD,2CAAH,sDAkBfX,EAAc,mCAAG,8FAASZ,EAAT,EAASA,SAAT,EAAmBC,aAAcC,EAAjC,EAAiCA,aAAcC,EAA/C,EAA+CA,gBACxD,sBAAbH,EADsB,kCAEDa,EAAAA,EAAAA,KAAa,iBAC9B,8FACUC,MAAM,sDAAuD,CAC/DC,OAAQ,MACRC,QAAS,CAAE,eAAgB,sBAHnC,oFAHkB,cAElBO,EAFkB,gBAULA,EAASC,OAVJ,OAUtBD,EAVsB,OAWtBpB,EAAgBoB,EAAS,GAAGtB,cAC5BC,EAAa,gBAAiB,KAZR,4CAAH,sDAgBduB,EAAa,mCAAG,sGAASC,EAAT,EAASA,YAAa1B,EAAtB,EAAsBA,SAAU2B,EAAhC,EAAgCA,SAAUvB,EAA1C,EAA0CA,cAAeF,EAAzD,EAAyDA,aAC5EG,EAAsBL,EAASM,OAAO,GAAGC,cAAgBP,EAASQ,MAAM,GAE1D,UAAhBkB,EAHqB,iCAIJb,EAAAA,EAAAA,KAAa,iBAC1B,8FACUC,MAAM,wDAAD,OAAyDd,GAAY,CAC5Ee,OAAQ,MACRC,QAAS,CAAE,eAAgB,sBAHnC,oFALiB,OAIrBO,EAJqB,gDAYJV,EAAAA,EAAAA,KAAa,iBAC1B,8FACUC,MAAM,8CAA+C,CACvDC,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAU,CACjBnB,SAAAA,EACA2B,SAAAA,MANZ,oFAbiB,QAYrBJ,EAZqB,gCAyBRA,EAASC,OAzBD,QAyBzBD,EAzByB,OA2BzB,UAAIA,SAAJ,OAAI,EAAUK,IACVxB,GAAc,GACdF,EAAaG,EAAsB,IAAMa,KAAKC,UAAUI,EAASM,kBAEjE3B,EAAagB,KAAKC,UAAUI,EAASO,QA/BhB,4CAAH","sources":["components/organisms/home/mobile/backup-restore/backup-restore.js","components/organisms/home/mobile/mobile-menu/utils/utils.js"],"sourcesContent":["import { getUserDetails, sendUserDetails } from '../mobile-menu/utils/utils'\r\n\r\nconst BackupRestore = ({ userName, markedQuotes, openSnackbar, setMarkedQuotes, setIsLoggedIn }) => {\r\n    const capitalizedUserName = userName.charAt(0).toUpperCase() + userName.slice(1)\r\n    return (\r\n        <>\r\n            <div className=\"userName\">Hi {capitalizedUserName}!</div>\r\n            <button className=\"menuBtn\" onClick={() => sendUserDetails({ userName, markedQuotes, openSnackbar })}>\r\n                Backup\r\n            </button>\r\n            <button className=\"menuBtn\" onClick={() => getUserDetails({ userName, markedQuotes, openSnackbar, setMarkedQuotes })}>\r\n                Restore\r\n            </button>\r\n            <button className=\"menuBtn\" onClick={() => setIsLoggedIn(false)}>\r\n                Logout\r\n            </button>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default BackupRestore\r\n","import { retryTenTimes } from '../../../../../../common/utils/apiUtils'\r\n\r\nexport const sendUserDetails = async ({ userName, markedQuotes, openSnackbar }) => {\r\n    let response = await retryTenTimes(\r\n        async () =>\r\n            await fetch('https://quotes-backend.vercel.app/api/markedQuotes/', {\r\n                method: 'post',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({\r\n                    userName,\r\n                    markedQuotes,\r\n                    dateSynced: Date.now(),\r\n                }),\r\n            })\r\n    )\r\n\r\n    response = await response.json()\r\n    openSnackbar(JSON.stringify(response))\r\n}\r\n\r\nexport const getUserDetails = async ({ userName, markedQuotes, openSnackbar, setMarkedQuotes }) => {\r\n    if (userName === 'philosophizetruth') {\r\n        let response = await retryTenTimes(\r\n            async () =>\r\n                await fetch('https://quotes-backend.vercel.app/api/markedQuotes/', {\r\n                    method: 'get',\r\n                    headers: { 'Content-Type': 'application/json' },\r\n                })\r\n        )\r\n\r\n        response = await response.json()\r\n        setMarkedQuotes(response[0].markedQuotes)\r\n        openSnackbar('Restored data', 2000)\r\n    }\r\n}\r\n\r\nexport const loginRegister = async ({ apiCallType, userName, password, setIsLoggedIn, openSnackbar }) => {\r\n    const capitalizedUserName = userName.charAt(0).toUpperCase() + userName.slice(1)\r\n    let response\r\n    if (apiCallType === 'login') {\r\n        response = await retryTenTimes(\r\n            async () =>\r\n                await fetch(`https://quotes-backend.vercel.app/api/user/?userName=${userName}`, {\r\n                    method: 'get',\r\n                    headers: { 'Content-Type': 'application/json' },\r\n                })\r\n        )\r\n    } else {\r\n        response = await retryTenTimes(\r\n            async () =>\r\n                await fetch('https://quotes-backend.vercel.app/api/user/', {\r\n                    method: 'post',\r\n                    headers: { 'Content-Type': 'application/json' },\r\n                    body: JSON.stringify({\r\n                        userName,\r\n                        password,\r\n                    }),\r\n                })\r\n        )\r\n    }\r\n\r\n    response = await response.json()\r\n\r\n    if (response?.ok) {\r\n        setIsLoggedIn(true)\r\n        openSnackbar(capitalizedUserName + ' ' + JSON.stringify(response.serverResponse))\r\n    } else {\r\n        openSnackbar(JSON.stringify(response.error))\r\n    }\r\n}\r\n"],"names":["userName","markedQuotes","openSnackbar","setMarkedQuotes","setIsLoggedIn","capitalizedUserName","charAt","toUpperCase","slice","className","onClick","sendUserDetails","getUserDetails","retryTenTimes","fetch","method","headers","body","JSON","stringify","dateSynced","Date","now","response","json","loginRegister","apiCallType","password","ok","serverResponse","error"],"sourceRoot":""}