{"version":3,"file":"static/js/776.701613f9.chunk.js","mappings":"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","sources":["common/utils/ruleEngine.js","webpack://quotes/./src/components/organisms/home/row/styles/row.module.css?d653","components/organisms/home/row/row.js","common/utils/debounce.js","components/organisms/analysis/no-search-results/no-search-results.jsx","components/organisms/home/quotes-list/utils/listUtils.js","components/organisms/home/quotes-list/utils/ruleEngine/rules.js","components/organisms/home/quotes-list/quotes-list.jsx","components/organisms/home/row/utils/utils.js","common/utils/stringUtils.js"],"sourcesContent":["export const ruleEngine = {\r\n    makeDecision: function (rules, { value, params }) {\r\n        for (let i = 0; i <= rules.length; i++) {\r\n            const returnValue = rules[i](value, params)\r\n            if (returnValue) return returnValue\r\n        }\r\n    },\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"actionItems\":\"row_actionItems__Y-npM\",\"row\":\"row_row__G696K\"};","import React, { Suspense, useCallback, useState } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport useSnackbar from '../../../../common/components/snackbar/useSnackbar'\r\nimport ROUTES from '../../../../common/routes/routes'\r\nimport { retryTenTimes } from '../../../../common/utils/apiUtils'\r\nimport { isUndefined } from '../../../../common/utils/commonUtils'\r\nimport { debounce } from '../../../../common/utils/debounce'\r\nimport styles from './styles/row.module.css'\r\nimport { rowClickHandler, usePrevious } from './utils/utils'\r\nconst MarkAsRead = React.lazy(() => retryTenTimes(() => import('../../tools/mark-as-read/mark-as-read')))\r\nconst Translate = React.lazy(() => retryTenTimes(() => import('../../tools/translate/translate')))\r\nconst Audio = React.lazy(() => retryTenTimes(() => import('../../tools/audio/audio')))\r\n\r\nconst Row = ({ data: { searchText, start, end, philosopherFullName, philosopherFullName_i10n, markedMode, currentQuote, currentPhilosopher, markedQuotes, setMarkedQuotes, currentData, setCurrentData, index, scrollPosition, setScrollPosition, listRef, darkMode, scheduledPosts, setScheduledQuotes, rowsRendered, setRowsRendered, voiceSpeed, minMode }, style }) => {\r\n    const prevCurrentPhilosopher = usePrevious(currentPhilosopher)\r\n    const [openSnackbar] = useSnackbar()\r\n    const { quote: quotationText, id: quotationId } = currentQuote\r\n    const propsToSend = { openSnackbar, searchText, start, end, philosopherFullName, index, philosopherFullName_i10n, darkMode }\r\n    const [localTranslateKey, setLocalTranslateKey] = useState(false)\r\n    const debouncedHandler = useCallback(\r\n        debounce(() => setScrollPosition(parseInt(quotationId)), 500),\r\n        [quotationId, setScrollPosition]\r\n    )\r\n    const rowHandler = useCallback(() => rowClickHandler({ quote: quotationText, openSnackbar, philosopherFullName }), [openSnackbar, philosopherFullName, quotationText])\r\n\r\n    if (prevCurrentPhilosopher && prevCurrentPhilosopher !== currentPhilosopher && rowsRendered === false) {\r\n        setRowsRendered(true)\r\n    }\r\n\r\n    if (!isUndefined(currentQuote))\r\n        return (\r\n            <div role=\"row\" className={styles.row} key={index} style={style} onMouseMove={debouncedHandler} onTouchStart={debouncedHandler}>\r\n                <div role=\"columnheader\" className=\"row\">\r\n                    <span onClick={rowHandler}>{`${index + 1}. \"${quotationText}\" â€• ${philosopherFullName}`}</span>\r\n                </div>\r\n                <div role=\"columnheader\" className=\"row\">\r\n                    {localTranslateKey ? <Translate inputText={quotationText} {...propsToSend} /> : null}\r\n                </div>\r\n\r\n                <div role=\"columnheader\" className={styles.actionItems}>\r\n                    <button>\r\n                        <Link to={ROUTES.image.route} state={{ quotationText, philosopherFullName, signature: 'Instagram: @philosophizetruth' }} style={{ textDecoration: 'none', color: darkMode ? '#fff' : '#000' }}>\r\n                            Download Image\r\n                        </Link>\r\n                    </button>\r\n                    {!minMode && <Audio index={index} currentData={currentData} scrollPosition={scrollPosition} setScrollPosition={setScrollPosition} listRef={listRef} voiceSpeed={voiceSpeed} />}\r\n                    {markedMode && (\r\n                        <Suspense fallback={''}>\r\n                            <MarkAsRead index={quotationId} currentPhilosopher={currentPhilosopher} markedQuotes={markedQuotes} setMarkedQuotes={setMarkedQuotes} currentData={currentData} setCurrentData={setCurrentData} setLocalTranslateKey={setLocalTranslateKey} />\r\n                        </Suspense>\r\n                    )}\r\n                    {!minMode && (\r\n                        <>\r\n                            <button onClick={() => setLocalTranslateKey(true)}>Translate</button>\r\n                            <button>\r\n                                <Link to={ROUTES.image.route} state={{ quotationText, philosopherFullName, signature: 'Instagram: @philosophizetruth', share: true }} style={{ textDecoration: 'none', color: darkMode ? '#fff' : '#000' }}>\r\n                                    Share Image\r\n                                </Link>\r\n                            </button>\r\n                        </>\r\n                    )}\r\n                    {/* <button onClick={() => copyURL(openSnackbar, () => setScrollPosition(parseInt(quotationId)))}>Share Link</button> */}\r\n                </div>\r\n            </div>\r\n        )\r\n}\r\n\r\nexport default Row\r\n","export function debounce(func, delay) {\r\n    let timer\r\n    return function () {\r\n        const context = this\r\n        const args = arguments\r\n        clearTimeout(timer)\r\n        timer = setTimeout(function () {\r\n            func.apply(context, args)\r\n        }, delay)\r\n    }\r\n}\r\n","import React from 'react'\r\n\r\nconst NoSearchResults = () => (\r\n    <>\r\n        <h4>No search results found!</h4>\r\n\r\n        <div>Guidlines:</div>\r\n\r\n        <div>1. Please check spelling of your search text.</div>\r\n\r\n        <div> 2. Try searching a smaller and a more generic word.</div>\r\n    </>\r\n)\r\nexport default NoSearchResults\r\n","import React from 'react'\r\nimport NoSearchResults from '../../../analysis/no-search-results/no-search-results'\r\n\r\nexport function NoRowsRenderer() {\r\n    return <NoSearchResults />\r\n}\r\n","export const rules = [\r\n    function (value, { start }) {\r\n        if (start <= 20) return 500\r\n    },\r\n    function (value, { start }) {\r\n        if (start > 20 && start <= 40) return 600\r\n    },\r\n    function (value, { start }) {\r\n        if (start > 40 && start <= 60) return 1000\r\n    },\r\n    function (value, { start }) {\r\n        if (start > 60 && start <= 100) return 1400\r\n    },\r\n    function (value, { start }) {\r\n        if (start > 100) return 2000\r\n    },\r\n    function () {\r\n        return 800\r\n    },\r\n]\r\n","import React, { useEffect } from 'react'\r\nimport List from 'react-virtualized/dist/commonjs/List'\r\nimport { ruleEngine } from '../../../../common/utils/ruleEngine'\r\nimport { scrollToQuoteId } from '../../../../common/utils/utils'\r\nimport Row from '../row/row'\r\nimport './quotes-list.css'\r\nimport { NoRowsRenderer } from './utils/listUtils'\r\nimport { rules } from './utils/ruleEngine/rules'\r\nimport { getPhilosopherFullName, getPhilosopherFullName_i10n } from './utils/utils'\r\n\r\nfunction QuotesList({ listRef, width, height, searchText, start, end, markedMode, currentData, setCurrentData, options, currentPhilosopher, markedQuotes, setMarkedQuotes, scrollPosition, setScrollPosition, darkMode, scheduledPosts, setScheduledQuotes, rowsRendered, setRowsRendered, voiceSpeed, minMode }) {\r\n    const philosopherFullName = getPhilosopherFullName({ currentPhilosopher, options })\r\n    const philosopherFullName_i10n = getPhilosopherFullName_i10n({ currentPhilosopher, options })\r\n\r\n    useEffect(() => {\r\n        if (rowsRendered) {\r\n            scrollToQuoteId(listRef, scrollPosition, currentData, currentPhilosopher)\r\n        }\r\n    }, [rowsRendered, currentPhilosopher])\r\n\r\n    useEffect(() => {\r\n        if (listRef.current) {\r\n            scrollToQuoteId(listRef, scrollPosition, currentData, currentPhilosopher)\r\n        }\r\n    }, [listRef?.current])\r\n\r\n    const onRowsRendered = () => {\r\n        if (rowsRendered === false) setRowsRendered(true)\r\n    }\r\n\r\n    function rowRenderer({ index, ...others }) {\r\n        return <Row data={{ searchText, start, end, philosopherFullName, philosopherFullName_i10n, markedMode, currentData, setCurrentData, currentQuote: currentData[index], index, currentPhilosopher, markedQuotes, setMarkedQuotes, scrollPosition, setScrollPosition, darkMode, listRef, scheduledPosts, setScheduledQuotes, rowsRendered, setRowsRendered, voiceSpeed, minMode }} {...others} />\r\n    }\r\n\r\n    return <List className=\"List\" height={height} rowCount={currentData.length} rowHeight={ruleEngine.makeDecision(rules, { params: { start } })} width={width} ref={listRef} rowRenderer={rowRenderer} onRowsRendered={onRowsRendered} noRowsRenderer={NoRowsRenderer} style={{ padding: '1rem' }} />\r\n}\r\n\r\nexport default QuotesList\r\n","import copy from 'copy-to-clipboard'\r\nimport { useEffect, useRef } from 'react'\r\nimport { insert, setCharAt } from '../../../../../common/utils/stringUtils'\r\n\r\nexport function copyQuoteText(quoteText, philosopherFullName) {\r\n    if (philosopherFullName.toLowerCase().trim() === 'all') {\r\n        let splittingIndex = quoteText.lastIndexOf('â€• ')\r\n        let updatedQuoteText = setCharAt(quoteText, splittingIndex - 1, '')\r\n        updatedQuoteText = '\"' + updatedQuoteText\r\n        updatedQuoteText = insert(updatedQuoteText, splittingIndex, '\"\\n\\n')\r\n        copy(updatedQuoteText)\r\n    } else copy(`\"${quoteText}\"\\n\\n${philosopherFullName}`)\r\n}\r\n\r\nexport function rowClickHandler({ openSnackbar, philosopherFullName, quote }) {\r\n    copyQuoteText(quote, philosopherFullName)\r\n    openSnackbar('Quote Text Copied!')\r\n}\r\n\r\nexport function devModeSignature() {\r\n    return isAppInDevMode() ? <>dev-mode</> : null\r\n}\r\n\r\nexport function isAppInDevMode() {\r\n    return process.env.NODE_ENV !== 'production'\r\n}\r\n\r\nexport function rowClickHandlerFoBothQuotes({ openSnackbar, quote: { hindi, english }, philosopherNames: { englishFullname, hindiFullname }, index }, event) {\r\n    event.stopPropagation()\r\n    copyBothQuotesText({ hindiQuote: hindi, englishQuote: english }, { englishFullname, hindiFullname })\r\n    openSnackbar('Quote Text Copied!')\r\n}\r\n\r\nexport const copyBothQuotesText = ({ englishQuote, hindiQuote }, { englishFullname, hindiFullname }) => copy(`\"${hindiQuote}\"\\n\\nâ€• ${hindiFullname}\\n\\n\\n\"${englishQuote}\"\\n\\nâ€• ${englishFullname}`)\r\n\r\nexport function usePrevious(value) {\r\n    const ref = useRef(null)\r\n    useEffect(() => {\r\n        ref.current = value\r\n    }, [value])\r\n    return ref.current\r\n}\r\n\r\nexport function copyURL(openSnackbar, callback) {\r\n    callback()\r\n    copy(window.location.href.toString())\r\n    openSnackbar('Quote Link Copied. You can now share!')\r\n}\r\n","export function insert(str, index, value) {\r\n    return str.substr(0, index) + value + str.substr(index);\r\n}\r\n\r\nexport function setCharAt(str, index, chr) {\r\n    if (index > str.length - 1) return str;\r\n    return str.substring(0, index) + chr + str.substring(index + 1);\r\n}"],"names":["ruleEngine","makeDecision","rules","_ref","value","params","i","length","returnValue","MarkAsRead","React","retryTenTimes","Translate","Audio","_ref$data","data","searchText","start","end","philosopherFullName","philosopherFullName_i10n","markedMode","currentQuote","currentPhilosopher","markedQuotes","setMarkedQuotes","currentData","setCurrentData","index","scrollPosition","setScrollPosition","listRef","darkMode","rowsRendered","scheduledPosts","setScheduledQuotes","setRowsRendered","voiceSpeed","minMode","style","prevCurrentPhilosopher","usePrevious","_useSnackbar","useSnackbar","openSnackbar","_slicedToArray","quotationText","quote","quotationId","id","propsToSend","_useState","useState","_useState2","localTranslateKey","setLocalTranslateKey","debouncedHandler","useCallback","func","delay","timer","context","this","args","arguments","clearTimeout","setTimeout","apply","debounce","parseInt","rowHandler","rowClickHandler","isUndefined","_jsxs","role","className","styles","onMouseMove","onTouchStart","children","_jsx","onClick","concat","_objectSpread","inputText","Link","to","ROUTES","image","route","state","signature","textDecoration","color","Suspense","fallback","_Fragment","share","NoRowsRenderer","NoSearchResults","_ref2","_ref3","_ref4","_ref5","width","height","options","getPhilosopherFullName","getPhilosopherFullName_i10n","useEffect","scrollToQuoteId","current","List","rowCount","rowHeight","ref","rowRenderer","others","_objectWithoutProperties","_excluded","Row","onRowsRendered","noRowsRenderer","padding","quoteText","toLowerCase","trim","splittingIndex","lastIndexOf","updatedQuoteText","chr","str","substring","substr","insert","copy","copyQuoteText","useRef"],"sourceRoot":""}