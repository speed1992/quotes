{"version":3,"file":"static/js/438.f97b53c6.chunk.js","mappings":"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","sources":["components/organisms/home/mobile/mobile-header/mobile-header.jsx","components/organisms/tools/select/select.js","components/organisms/tools/wordLengthSearch/wordLengthSearch.js","webpack://quotes/./src/components/organisms/tools/wordLengthSearch/wordLengthSearch.module.css?7b27"],"sourcesContent":["import React, { Suspense, useState } from 'react'\r\nimport ErrorBoundary from '../../../../../common/components/error-boundary/error-boundary'\r\nimport { retryTenTimes } from '../../../../../common/utils/apiUtils'\r\nimport Select from '../../../tools/select/select'\r\nimport { WordLengthSearch } from '../../../tools/wordLengthSearch/wordLengthSearch'\r\nimport { onFocusHandler, onPhilosopherSelectChange } from '../../desktop/desktop-header/utils/utils'\r\nimport styles from '../../header-layout/header-layout.module.css'\r\nconst MobileMenu = React.lazy(() => retryTenTimes(() => import(/* webpackChunkName: \"menu\" */ '../mobile-menu/mobile-menu')))\r\nconst Breadcrumb = React.lazy(() => retryTenTimes(() => import('../../../analysis/breadcrumb/breadcrumb')))\r\nconst UnreadCounter = React.lazy(() => retryTenTimes(() => import('../../../analysis/unread-counter/unread-counter')))\r\nconst QuotesFound = React.lazy(() => retryTenTimes(() => import('../../../analysis/quotes-found/quotes-found')))\r\n\r\nfunction MobileHeader({ listRef, setSearchText, searchText, start, end, setStart, setEnd, isFetching, setIsFetching, markedMode, setMarkedMode, markedQuotes, currentData, setCurrentData, currentPhilosopher, originalData, setCurrentPhilosopher, options, setOptions, darkMode, setDarkMode, setSorting, sorting, isFetchingOptions, setIsFetchingOptions, originalOptions, setOriginalOptions, userName, setUserName, setMarkedQuotes, isLoggedIn, setIsLoggedIn, password, setPassword, scrollPosition, setRowsRendered, syncDate, setSyncDate, recentPhilosophers, setRecentPhilosophers, setLogs, setIsFirstLoad }) {\r\n    const propsToSend = { start, end, setStart, setEnd, setSearchText, setCurrentData }\r\n    const [visible, toggleVisible] = useState(false)\r\n\r\n    return (\r\n        <div className={styles.header}>\r\n            <div className={styles.mobileColumn}>\r\n                {visible && (\r\n                    <Suspense>\r\n                        <ErrorBoundary>\r\n                            <MobileMenu markedMode={markedMode} setMarkedMode={setMarkedMode} visible={visible} options={options} setOptions={setOptions} toggleVisible={toggleVisible} darkMode={darkMode} setDarkMode={setDarkMode} setSorting={setSorting} sorting={sorting} userName={userName} setUserName={setUserName} setMarkedQuotes={setMarkedQuotes} {...{ isLoggedIn, setIsLoggedIn, password, setPassword, setIsFetching }} />\r\n                        </ErrorBoundary>\r\n                    </Suspense>\r\n                )}\r\n                <div style={{ paddingLeft: '0.5rem', paddingRight: '0.5rem' }} onClick={() => toggleVisible(!visible)}>\r\n                    â˜°\r\n                </div>\r\n            </div>\r\n            <div className={styles.mobileColumn}>\r\n                <WordLengthSearch isMobile={true} listRef={listRef} {...propsToSend} />\r\n            </div>\r\n            <div className={styles.mobileColumn}>\r\n                <input name=\"search-text\" data-testid=\"search-text\" className={styles.wordSearch} type=\"text\" placeholder=\"Search word\" value={searchText} onChange={({ target: { value } }) => setSearchText(value)} />\r\n            </div>\r\n            <div className={styles.mobileColumn}>\r\n                <Select recentPhilosophers={recentPhilosophers} isMobile={true} isFetchingOptions={isFetchingOptions} options={options} currentPhilosopher={currentPhilosopher} onFocusHandlerCallback={() => onFocusHandler({ options, setOptions, isLoggedIn, setSyncDate, isFetchingOptions, setIsFetchingOptions, originalOptions, setOriginalOptions, sorting, syncDate, setLogs })} onChangeHandler={({ target: { value: philosopher } }) => onPhilosopherSelectChange({ philosopher, listRef, setIsFetching, setStart, setEnd, setSearchText, setCurrentPhilosopher, setCurrentData, options, setOptions, scrollPosition, setRowsRendered, recentPhilosophers, setRecentPhilosophers, setIsFirstLoad })} darkMode={darkMode} />\r\n            </div>\r\n            <Suspense fallback={''}>\r\n                <Breadcrumb>\r\n                    <QuotesFound markedMode={markedMode} found={currentData?.length} />\r\n                    {markedMode && <UnreadCounter isFetching={isFetching} currentData={currentData} originalData={originalData} markedQuotes={markedQuotes} currentPhilosopher={currentPhilosopher} isFetchingOptions={isFetchingOptions} />}\r\n                </Breadcrumb>\r\n            </Suspense>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MobileHeader\r\n","import React, { Suspense } from 'react'\r\nimport { getCurrentPhilosopherFullname } from '../../../../common/static/utils/utils'\r\nimport { retryTenTimes } from '../../../../common/utils/apiUtils'\r\nconst DesktopSelect = React.lazy(() => retryTenTimes(() => import('../../home/desktop/desktop-select/desktop-select')))\r\nconst MobileSelect = React.lazy(() => retryTenTimes(() => import('../../home/mobile/mobile-select/mobile-select')))\r\n\r\nconst Select = ({ options, currentPhilosopher, onChangeHandler, onFocusHandlerCallback, isMobile, isFetchingOptions, recentPhilosophers, darkMode }) => {\r\n    const optionsWithRecentPhilosophersOnTop = [...options]\r\n\r\n    recentPhilosophers\r\n        ?.slice()\r\n        ?.reverse()\r\n        ?.forEach((recentItem, index) => {\r\n            const foundIdx = optionsWithRecentPhilosophersOnTop.findIndex((el) => el.value === recentItem) // -> foundIdx = 3\r\n            const removedItem = optionsWithRecentPhilosophersOnTop.splice(foundIdx, 1)\r\n            optionsWithRecentPhilosophersOnTop.unshift(removedItem[0])\r\n        })\r\n\r\n    const renderSelect = () => {\r\n        if (isMobile) {\r\n            return <Suspense fallback={''}>{currentPhilosopher && <MobileSelect recentPhilosophers={recentPhilosophers} onFocusHandlerCallback={onFocusHandlerCallback} onChangeHandler={onChangeHandler} currentPhilosopher={currentPhilosopher} value={getCurrentPhilosopherFullname(currentPhilosopher, optionsWithRecentPhilosophersOnTop)} placeholder={'Search philosopher'} options={optionsWithRecentPhilosophersOnTop} isFetchingOptions={isFetchingOptions} darkMode={darkMode} />}</Suspense>\r\n        } else {\r\n            return (\r\n                <Suspense fallback={''}>\r\n                    <DesktopSelect onFocusHandler={onFocusHandlerCallback} onChangeHandler={onChangeHandler} options={optionsWithRecentPhilosophersOnTop} currentPhilosopher={currentPhilosopher} isFetchingOptions={isFetchingOptions} />\r\n                </Suspense>\r\n            )\r\n        }\r\n    }\r\n\r\n    return currentPhilosopher && options?.length > 0 && renderSelect()\r\n}\r\n\r\nexport default Select\r\n","import React from 'react'\r\nimport { retryTenTimes } from '../../../../common/utils/apiUtils'\r\nimport styles from './wordLengthSearch.module.css'\r\nconst DesktopWordLengthSearch = React.lazy(() => retryTenTimes(() => import('../../home/desktop/desktop-word-length-search/desktop-word-length-search')))\r\n\r\nexport function WordLengthSearch({ start, end, setStart, setEnd, setSearchText, isMobile }) {\r\n    const renderComponent = () => {\r\n        if (isMobile) {\r\n            return (\r\n                <>\r\n                    <label id=\"labelEnd\" className={styles.labelEnd} htmlFor=\"end\">\r\n                        Words{' '}\r\n                    </label>\r\n                    <input id=\"end\" className={styles.smallInput} key=\"end\" name=\"end\" type=\"number\" min=\"0\" value={end} onChange={({ target: { value } }) => setEnd(value)} />\r\n                </>\r\n            )\r\n        } else {\r\n            return <DesktopWordLengthSearch start={start} setStart={setStart} end={end} setEnd={setEnd} />\r\n        }\r\n    }\r\n    return renderComponent()\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"smallInput\":\"wordLengthSearch_smallInput__oXkfQ\",\"labelEnd\":\"wordLengthSearch_labelEnd__dDyyn\"};"],"names":["MobileMenu","React","retryTenTimes","Breadcrumb","UnreadCounter","QuotesFound","_ref","listRef","setSearchText","searchText","start","end","setStart","setEnd","isFetching","setIsFetching","markedMode","setMarkedMode","markedQuotes","currentData","setCurrentData","currentPhilosopher","originalData","setCurrentPhilosopher","options","setOptions","darkMode","setDarkMode","setSorting","sorting","isFetchingOptions","setIsFetchingOptions","originalOptions","setOriginalOptions","userName","setUserName","setMarkedQuotes","isLoggedIn","setIsLoggedIn","password","setPassword","scrollPosition","setRowsRendered","syncDate","setSyncDate","recentPhilosophers","setRecentPhilosophers","setLogs","setIsFirstLoad","propsToSend","visible","toggleVisible","useState","_jsxs","className","styles","header","children","mobileColumn","_jsx","Suspense","ErrorBoundary","style","paddingLeft","paddingRight","onClick","WordLengthSearch","isMobile","name","wordSearch","type","placeholder","value","onChange","_ref2","target","Select","onFocusHandlerCallback","onFocusHandler","onChangeHandler","_ref3","philosopher","onPhilosopherSelectChange","fallback","found","length","DesktopSelect","MobileSelect","_recentPhilosophers$s","_recentPhilosophers$s2","optionsWithRecentPhilosophersOnTop","slice","reverse","forEach","recentItem","index","foundIdx","findIndex","el","removedItem","splice","unshift","getCurrentPhilosopherFullname","DesktopWordLengthSearch","_Fragment","id","labelEnd","htmlFor","smallInput","min"],"sourceRoot":""}