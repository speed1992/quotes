{"version":3,"file":"static/js/930.2cb9536d.chunk.js","mappings":"mLACA,GAAgB,kBAAoB,yCAAyC,aAAe,oCAAoC,UAAY,iCAAiC,OAAS,+B,SCEhLA,EAAiBC,EAAAA,MAAW,kBAAMC,EAAAA,EAAAA,KAAc,kBAAM,6BAA0E,GAAC,IAExH,SAASC,EAAYC,GAAuI,IAApIC,EAAOD,EAAPC,QAASC,EAAkBF,EAAlBE,mBAAoBC,EAAeH,EAAfG,gBAAiBC,EAAsBJ,EAAtBI,uBAAwBC,EAAWL,EAAXK,YAAaC,EAAKN,EAALM,MAAOC,EAAiBP,EAAjBO,kBAAmBC,EAAkBR,EAAlBQ,mBAChJC,GAAsCC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA3CI,EAAWF,EAAA,GAAEG,EAAcH,EAAA,GAClCI,GAAoCL,EAAAA,EAAAA,UAAS,IAAGM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAAzCE,EAAUD,EAAA,GAAEE,EAAaF,EAAA,GAChCG,GAAkCT,EAAAA,EAAAA,WAAS,GAAMU,GAAAR,EAAAA,EAAAA,GAAAO,EAAA,GAA1CE,EAASD,EAAA,GAAEE,EAAYF,EAAA,IAC9BG,EAAAA,EAAAA,YAAU,kBAAML,EAAcZ,EAAM,GAAE,CAACA,IACvC,IAAMkB,GAAaC,EAAAA,EAAAA,WAEnBF,EAAAA,EAAAA,YAAU,WACFF,GAAapB,EAAQyB,OAAS,IAC9BR,EAAc,IACdJ,EAAeb,GACfqB,GAAa,GAErB,GAAG,CAACrB,EAAQyB,OAAQL,IAiDpB,OACIM,EAAAA,EAAAA,KAAC/B,EAAc,CAACgC,SAAU,kBAAMd,EAAe,GAAG,EAACe,UAC/CC,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAOC,kBAAkBJ,SAAA,EACrCF,EAAAA,EAAAA,KAAA,SAAOO,KAAK,qBAAqBC,KAAK,OAAOC,QAlDlC,SAACC,GACpBjC,IACAkB,GAAa,EACjB,EA+CkFgB,SA7C7D,SAACD,GAClB,IAAM/B,EAAQ+B,EAAEE,OAAOjC,MACvB,GAAc,KAAVA,EAAcQ,EAAeb,OAC5B,CACD,IAAIY,EAAc,GAClB,GAAIP,EAAMoB,OAAS,EAAG,CAClB,IAAMc,EAAQ,IAAIC,OAAO,GAADC,OAAIpC,GAAK,KACjCO,EAAcZ,EAAQ0C,QAAO,SAAAC,GAAA,IAAGC,EAAQD,EAARC,SAAQ,OAAOL,EAAMM,KAAKD,EAAS,GACvE,CAEA/B,EAAeD,EACnB,CACAK,EAAcZ,EAClB,EAgC0GD,YAAaA,EAAaC,MAAOW,EAAY8B,OA9BjI,WAClB7B,EAAcZ,EAClB,IA6BaC,GACGoB,EAAAA,EAAAA,KAAA,MAAII,UAAWC,EAAOgB,aAAanB,UAC/BF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,iBApBO,IAAvBhB,EAAYa,OACL,MAGPC,EAAAA,EAAAA,KAAA,MAAIsB,IAAKzB,EAAYO,UAAWC,EAAOgB,aAAanB,SACpC,OAAXhB,QAAW,IAAXA,OAAW,EAAXA,EAAaqC,KAAI,SAAAC,EAAsBC,GAAK,IAAxBP,EAAQM,EAARN,SAAUvC,EAAK6C,EAAL7C,MAAK,OAChCqB,EAAAA,EAAAA,KAAA,MAAI0B,MAAOD,GAA0B,OAAlB5C,QAAkB,IAAlBA,OAAkB,EAAlBA,EAAoBkB,QAAS,CAAE4B,MAAO,UAAa,CAAC,EAAGC,GAAIrD,IAAuBI,EAAQ,SAAW,GAAgBA,MAAOA,EAAOkD,QAAS,SAACnB,GAAC,OAftJ,SAACQ,EAAUvC,QACpBmD,IAAVnD,IACAQ,EAAe,IACfI,EAAc2B,GACd1C,EAAgB,CAAEoC,OAAQ,CAAEjC,MAAAA,KAEpC,CASsLoD,CAAmBb,EAAUvC,EAAM,EAACuB,SACrMgB,GAD4HvC,EAE5H,UAoBzB,C","sources":["webpack://quotes/./src/components/organisms/home/mobile/mobile-select/mobile-select.module.css?ae0e","components/organisms/home/mobile/mobile-select/mobile-select.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"typeAheadDropDown\":\"mobile-select_typeAheadDropDown__M8PaJ\",\"dropDownList\":\"mobile-select_dropDownList__EyTz8\",\"darkTheme\":\"mobile-select_darkTheme__ZRirJ\",\"active\":\"mobile-select_active__Xic62\"};","import React, { useEffect, useRef, useState } from 'react'\r\nimport { retryTenTimes } from '../../../../../common/utils/apiUtils'\r\nimport styles from './mobile-select.module.css'\r\nconst OutsideAlerter = React.lazy(() => retryTenTimes(() => import('../../../../../common/components/outside-alerter/outside-alerter')))\r\n\r\nexport default function MobileSelect({ options, currentPhilosopher, onChangeHandler, onFocusHandlerCallback, placeholder, value, isFetchingOptions, recentPhilosophers }) {\r\n    const [suggestions, setSuggestions] = useState([])\r\n    const [searchText, setSearchText] = useState([])\r\n    const [isFocused, setIsFocused] = useState(false)\r\n    useEffect(() => setSearchText(value), [value])\r\n    const scollToRef = useRef()\r\n\r\n    useEffect(() => {\r\n        if (isFocused && options.length > 1) {\r\n            setSearchText('')\r\n            setSuggestions(options)\r\n            setIsFocused(false)\r\n        }\r\n    }, [options.length, isFocused])\r\n\r\n    const onFocusHandler = (e) => {\r\n        onFocusHandlerCallback()\r\n        setIsFocused(true)\r\n    }\r\n\r\n    const onTextChange = (e) => {\r\n        const value = e.target.value\r\n        if (value === '') setSuggestions(options)\r\n        else {\r\n            let suggestions = []\r\n            if (value.length > 0) {\r\n                const regex = new RegExp(`${value}`, `i`)\r\n                suggestions = options.filter(({ fullName }) => regex.test(fullName))\r\n            }\r\n\r\n            setSuggestions(suggestions)\r\n        }\r\n        setSearchText(value)\r\n    }\r\n\r\n    const onBlurHandler = () => {\r\n        setSearchText(value)\r\n    }\r\n\r\n    const suggestionSelected = (fullName, value) => {\r\n        if (value !== undefined) {\r\n            setSuggestions([])\r\n            setSearchText(fullName)\r\n            onChangeHandler({ target: { value } })\r\n        }\r\n    }\r\n\r\n    const renderSuggestions = () => {\r\n        if (suggestions.length === 0) {\r\n            return null\r\n        }\r\n        return (\r\n            <ul ref={scollToRef} className={styles.dropDownList}>\r\n                {suggestions?.map(({ fullName, value }, index) => (\r\n                    <li style={index < recentPhilosophers?.length ? { color: 'purple' } : {}} id={currentPhilosopher === value ? 'active' : ''} key={value} value={value} onClick={(e) => suggestionSelected(fullName, value)}>\r\n                        {fullName}\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <OutsideAlerter callback={() => setSuggestions([])}>\r\n            <div className={styles.typeAheadDropDown}>\r\n                <input name=\"search-philosopher\" type=\"text\" onFocus={onFocusHandler} onChange={onTextChange} placeholder={placeholder} value={searchText} onBlur={onBlurHandler} />\r\n                {isFetchingOptions ? (\r\n                    <ul className={styles.dropDownList}>\r\n                        <li>Loading...</li>\r\n                    </ul>\r\n                ) : (\r\n                    renderSuggestions()\r\n                )}\r\n            </div>\r\n        </OutsideAlerter>\r\n    )\r\n}\r\n"],"names":["OutsideAlerter","React","retryTenTimes","MobileSelect","_ref","options","currentPhilosopher","onChangeHandler","onFocusHandlerCallback","placeholder","value","isFetchingOptions","recentPhilosophers","_useState","useState","_useState2","_slicedToArray","suggestions","setSuggestions","_useState3","_useState4","searchText","setSearchText","_useState5","_useState6","isFocused","setIsFocused","useEffect","scollToRef","useRef","length","_jsx","callback","children","_jsxs","className","styles","typeAheadDropDown","name","type","onFocus","e","onChange","target","regex","RegExp","concat","filter","_ref2","fullName","test","onBlur","dropDownList","ref","map","_ref3","index","style","color","id","onClick","undefined","suggestionSelected"],"sourceRoot":""}