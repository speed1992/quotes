{"version":3,"file":"static/js/841.8c683132.chunk.js","mappings":"0NAEO,SAASA,EAAT,GAA6D,IAAhCC,EAA+B,EAA/BA,KAAMC,EAAyB,EAAzBA,GAAIC,EAAqB,EAArBA,UAAWC,EAAU,EAAVA,OACrD,OAAOC,MAAMC,EAAAA,EAAAA,WAA0B,CACnCC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CAAEC,EAAGR,EAAWS,OAAQX,EAAMY,OAAQX,EAAIY,OAAQ,OAAQC,QAAS,KACxFC,QAAS,CAAE,eAAgB,oBAC3BZ,OAAAA,IACDa,OAAM,SAACC,OCLP,SAASC,EAAT,GAAsE,IAAD,OAA3ChB,EAA2C,EAA3CA,UAAWF,EAAgC,EAAhCA,KAAMC,EAA0B,EAA1BA,GAAIkB,EAAsB,EAAtBA,mBAClD,GAAkDC,EAAAA,EAAAA,UAAS,IAA3D,eAAOC,EAAP,KAA0BC,EAA1B,KAsBA,OApBAC,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAa,IAAIC,gBACjBtB,EAASqB,EAAWrB,OAEpBuB,EAAU3B,EAAkB4B,KAAK,EAAM,CAAEzB,UAAAA,EAAWF,KAAAA,EAAMC,GAAAA,EAAIE,OAAAA,IAUpE,OATAgB,EAAmB,CAAES,OAAQ,YAAaC,QAAQ,IAClDH,IACKI,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,YAAyB,IAAtBG,EAAqB,EAArBA,eACLX,EAAqBW,GACrBd,EAAmB,CAAES,OAAQ,GAAIC,QAAQ,OAE5Cb,OAAM,SAACC,OAEL,WACHO,EAAWU,QACXZ,EAAqB,OAE1B,CAACpB,EAAWF,EAAMC,IAEdoB,E,aCKX,EAzBkB,SAAC,GAAqK,IAAnKnB,EAAkK,EAAlKA,UAAkK,IAAvJF,KAAAA,OAAuJ,MAAhJ,KAAgJ,MAA1IC,GAAAA,OAA0I,MAArI,KAAqI,EAA/HkC,EAA+H,EAA/HA,aAAcC,EAAiH,EAAjHA,WAAYC,EAAqG,EAArGA,MAAOC,EAA8F,EAA9FA,IAA0BC,GAAoE,EAAzFC,oBAAyF,EAApED,OAAOE,EAA6D,EAA7DA,yBAA0BC,EAAmC,EAAnCA,SAC1IrB,EAAoBH,EAAe,CAAEhB,UAAAA,EAAWF,KAAAA,EAAMC,GAAAA,EAAIkB,mBADmH,EAAzBA,qBAEpJwB,EAAyCF,EAAyBxC,GAClE2C,GAAWC,EAAAA,EAAAA,MAEjB,MAA6B,KAAtBxB,QAAkDyB,IAAtBzB,GAAmCA,GAClE,iCACI,iBAAiB0B,QAASC,EAAAA,GAAAA,K,UAA2B,CAAEb,aAAAA,EAAcC,WAAAA,EAAYC,MAAAA,EAAOC,IAAAA,EAAKW,MAAO5B,EAAmBmB,oBAAqBG,EAAwCJ,MAAAA,IAApL,UACKlB,EAAkB,WAAIsB,IADjBJ,IAGV,0BACI,mBACIQ,QAAS,WACLH,GAASM,EAAAA,EAAAA,IAAkB,CAAEC,cAAe9B,EAAmBmB,oBAAqBG,EAAwCS,UAAW,qFACvIR,GAASS,EAAAA,EAAAA,IAAoB,WAEjCC,MAAO,CAAEC,eAAgB,OAAQC,MAAOd,EAAW,OAAS,OAAQe,UAAW,QALnF,SAMC,0DAKT","sources":["components/organisms/tools/translate/utils/utils.js","components/organisms/tools/translate/custom-hooks/custom-hooks.js","components/organisms/tools/translate/translate.js"],"sourcesContent":["import { API_ENDPOINTS } from '../../../../../common/apis/apiEndpoints'\n\nexport function hitTranslationAPI({ from, to, inputText, signal }) {\n    return fetch(API_ENDPOINTS.TRANSLATE2, {\n        method: 'POST',\n        body: JSON.stringify({ q: inputText, source: from, target: to, format: 'text', api_key: '' }),\n        headers: { 'Content-Type': 'application/json' },\n        signal,\n    }).catch((e) => {})\n}\n","import { useEffect, useState } from 'react'\nimport { hitTranslationAPI } from '../utils/utils'\n\nexport function useTranslation({ inputText, from, to, setIsLocalFetching }) {\n    const [translationOutput, setTranslationOutput] = useState('')\n\n    useEffect(() => {\n        const controller = new AbortController()\n        const signal = controller.signal\n\n        const wrapped = hitTranslationAPI.bind(this, { inputText, from, to, signal })\n        setIsLocalFetching({ button: 'translate', status: true })\n        wrapped()\n            .then((response) => response.json())\n            .then(({ translatedText }) => {\n                setTranslationOutput(translatedText)\n                setIsLocalFetching({ button: '', status: false })\n            })\n            .catch((e) => {})\n\n        return () => {\n            controller.abort()\n            setTranslationOutput('')\n        }\n    }, [inputText, from, to])\n\n    return translationOutput\n}\n","import { useDispatch } from 'react-redux'\nimport { setCurrentModalName } from '../../../../common/components/modal/modalRedux'\nimport { setQuoteImageData } from '../../analysis/generate-quote-image/generateQuoteImageRedux'\nimport { rowClickHandler } from '../../home/row/utils/utils'\nimport { useTranslation } from './custom-hooks/custom-hooks'\n\nconst Translate = ({ inputText, from = 'en', to = 'hi', openSnackbar, searchText, start, end, philosopherFullName, index, philosopherFullName_i10n, darkMode, setIsLocalFetching }) => {\n    const translationOutput = useTranslation({ inputText, from, to, setIsLocalFetching })\n    const philosopherFullnameIn_SelectedLanguage = philosopherFullName_i10n[to]\n    const dispatch = useDispatch()\n\n    return translationOutput !== '' && translationOutput !== undefined && translationOutput ? (\n        <>\n            <div key={index} onClick={rowClickHandler.bind(this, { openSnackbar, searchText, start, end, quote: translationOutput, philosopherFullName: philosopherFullnameIn_SelectedLanguage, index })}>\n                {translationOutput} ― {philosopherFullnameIn_SelectedLanguage}\n            </div>\n            <div>\n                <button\n                    onClick={() => {\n                        dispatch(setQuoteImageData({ quotationText: translationOutput, philosopherFullName: philosopherFullnameIn_SelectedLanguage, signature: 'इंस्टाग्राम: @jaaginsaan' }))\n                        dispatch(setCurrentModalName('Image'))\n                    }}\n                    style={{ textDecoration: 'none', color: darkMode ? '#fff' : '#000', marginTop: '10px' }}\n                >\n                    डाउन्लोड\n                </button>\n            </div>\n        </>\n    ) : null\n}\n\nexport default Translate\n"],"names":["hitTranslationAPI","from","to","inputText","signal","fetch","API_ENDPOINTS","method","body","JSON","stringify","q","source","target","format","api_key","headers","catch","e","useTranslation","setIsLocalFetching","useState","translationOutput","setTranslationOutput","useEffect","controller","AbortController","wrapped","bind","button","status","then","response","json","translatedText","abort","openSnackbar","searchText","start","end","index","philosopherFullName","philosopherFullName_i10n","darkMode","philosopherFullnameIn_SelectedLanguage","dispatch","useDispatch","undefined","onClick","rowClickHandler","quote","setQuoteImageData","quotationText","signature","setCurrentModalName","style","textDecoration","color","marginTop"],"sourceRoot":""}