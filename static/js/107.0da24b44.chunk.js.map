{"version":3,"file":"static/js/107.0da24b44.chunk.js","mappings":"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","sources":["components/desktop-header/utils/utils.js","components/mobile-header/mobile-header.jsx","components/select/select.js","components/wordLengthSearch/wordLengthSearch.js"],"sourcesContent":["import { setCurrentPhilosopher } from \"../../../common/utils/staticDataUtils\";\nimport { scrollToMemorizedRow } from \"../../../common/utils/utils\";\nimport { lazyLoadAllAssets, lazyLoadAsset } from \"../../../static/utils/utils\";\nimport { changeQuotesData } from \"../../quotes-list/utils/utils\";\n\nexport function onPhilosopherSelectChange({ philosopher, triggerChange, listRef, setTriggerChange, setIsFetching, setStart, setEnd, setSearchText }) {\n    function callback() {\n        setCurrentPhilosopher(philosopher);\n        changeQuotesData(philosopher);\n        setTriggerChange(!triggerChange);\n        scrollToMemorizedRow(listRef);\n        setIsFetching(false);\n    }\n    setStart(1);\n    setEnd(\"\");\n    setSearchText('');\n    setIsFetching(true);\n\n    if (philosopher.trim().toLowerCase() === \"all\")\n        lazyLoadAllAssets().then(callback);\n\n    else\n        lazyLoadAsset(philosopher).then(callback);\n}","import Switch from '@mui/material/Switch';\nimport React from \"react\";\nimport { currentPhilosopher } from \"../../common/utils/staticDataUtils\";\nimport translateImage from \"../../static/assets/images/translate.png\";\nimport OPTIONS from \"../../static/philosophers-data\";\nimport { onPhilosopherSelectChange } from '../desktop-header/utils/utils';\nimport Select from \"../select/select\";\nimport { WordLengthSearch } from \"../wordLengthSearch/wordLengthSearch\";\n\nfunction MobileHeader({ listRef, setSearchText, searchText, setTriggerChange, triggerChange, start, end, setStart, setEnd, setIsFetching, translateKey, setTranslateKey }) {\n    const propsToSend = { start, end, setStart, setEnd, setSearchText }\n\n    return (\n        <div className=\"header\">\n            <div className=\"row\">\n                <div className=\"mobile-column\">\n                    <WordLengthSearch isMobile={true} vlistRef={listRef} setTriggerChange={setTriggerChange} triggerChange={triggerChange}\n                        {...propsToSend}\n                    />\n                </div>\n                <div className=\"mobile-column\">\n                    <input className=\"wordSearch\" type=\"text\" placeholder=\"Search word\" value={searchText} onChange={({ target: { value } }) => setSearchText(value)}\n                    />\n                </div>\n                <div className=\"mobile-column\">\n                    <Select\n                        isMobile={true}\n                        options={OPTIONS}\n                        defaultOption={currentPhilosopher}\n                        onChangeHandler={({ target: { value: philosopher } }) => onPhilosopherSelectChange({ philosopher, triggerChange, listRef, setTriggerChange, setIsFetching, setStart, setEnd, setSearchText })}\n                    />\n                </div>\n                <div className=\"mobile-column\">\n                    <span><img className=\"translate-img\" src={translateImage} alt=\"Toggle to translate\" /></span>\n                    <Switch size=\"small\" checked={translateKey} onChange={({ target: { checked } }) => {\n                        setTranslateKey(checked);\n                        setTriggerChange(!triggerChange);\n                    }} />\n                </div>\n\n            </div>\n        </div>\n    )\n}\n\nexport default MobileHeader;","import { Autocomplete, TextField } from \"@mui/material\";\nimport React from \"react\";\nimport { currentPhilosopher } from \"../../common/utils/staticDataUtils\";\nimport { getPhilosopherObjectIndex } from \"../../static/utils/utils\";\nimport \"./select.css\";\n\nconst Select = ({ options, onChangeHandler, isMobile }) => {\n    const renderSelect = () => {\n        if (isMobile) {\n            return (\n                <select className=\"dropDown\" onChange={onChangeHandler} value={currentPhilosopher}>\n                    {options && options.map(({ id, fullName, value }) => <option key={id} value={value}>{fullName}</option>)}\n                </select>\n            )\n        }\n        else {\n            return (\n                currentPhilosopher !== undefined && (\n                    <Autocomplete\n                        disableClearable\n                        onChange={onChangeHandler}\n                        getOptionLabel={(option) => option.fullName}\n                        value={options[getPhilosopherObjectIndex(currentPhilosopher)]}\n                        options={options}\n                        size=\"small\"\n                        sx={{ width: 210 }}\n                        renderInput={(params) => <TextField {...params} label=\"Philosopher\" />}\n                        ListboxProps={{ style: { maxHeight: '80vh' }, position: \"bottom-start\" }}\n                    />\n                )\n            )\n\n        }\n    }\n\n    return (renderSelect())\n}\n\nexport default Select","import { TextField } from \"@mui/material\";\nimport React from \"react\";\nimport \"./wordLengthSearch.css\";\n\nexport function WordLengthSearch({ start, end, setStart, setEnd, setSearchText, isMobile }) {\n    const renderComponent = () => {\n        if (isMobile) {\n            return (\n                <> <input className=\"smallInput\" name=\"start\" type=\"number\" min=\"1\" value={start} onChange={({ target: { value } }) => setStart(value)} />{` to `} <input className=\"smallInput\" name=\"end\" type=\"number\" min=\"0\" value={end} onChange={({ target: { value } }) => setEnd(value)} />\n                </>\n\n            )\n        }\n        else {\n            return (\n                <>\n                    <TextField className=\"smallInput\" id=\"outlined-number\" label=\"Start\" type=\"number\" size=\"small\" name=\"start\" min=\"1\" value={start} onChange={({ target: { value } }) => setStart(value)} />\n                    <span className=\"to\">{` to `}</span>\n                    <TextField className=\"smallInput\" id=\"outlined-number\" label=\"End\" type=\"number\" size=\"small\" name=\"end\" min=\"0\" value={end} onChange={({ target: { value } }) => setEnd(value)} />\n                </>\n            )\n        }\n    }\n    return (\n        renderComponent()\n    )\n}"],"names":["onPhilosopherSelectChange","philosopher","triggerChange","listRef","setTriggerChange","setIsFetching","setStart","setEnd","setSearchText","callback","setCurrentPhilosopher","changeQuotesData","scrollToMemorizedRow","trim","toLowerCase","lazyLoadAllAssets","then","lazyLoadAsset","searchText","start","end","translateKey","setTranslateKey","propsToSend","className","isMobile","vlistRef","type","placeholder","value","onChange","target","options","OPTIONS","defaultOption","currentPhilosopher","onChangeHandler","src","translateImage","alt","size","checked","map","id","fullName","undefined","Autocomplete","disableClearable","getOptionLabel","option","getPhilosopherObjectIndex","sx","width","renderInput","params","TextField","label","ListboxProps","style","maxHeight","position","WordLengthSearch","name","min"],"sourceRoot":""}