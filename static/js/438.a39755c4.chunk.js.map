{"version":3,"file":"static/js/438.a39755c4.chunk.js","mappings":"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","sources":["common/utils/lazyLoadUtils.js","common/utils/objectUtils.js","components/organisms/home/desktop/desktop-header/utils/utils.js","components/organisms/home/mobile/mobile-header/mobile-header.jsx","components/organisms/tools/select/select.js","components/organisms/tools/wordLengthSearch/wordLengthSearch.js"],"sourcesContent":["import { ALPHABETICAL, LATEST } from '../../components/organisms/home/home-page/constants/constants'\r\nimport { STATIC_OPTIONS } from '../../components/organisms/home/home-page/homePageRedux/initialState'\r\nimport { bringIntoAlphabeticalOrder, bringIntoOriginalOrder } from '../../components/organisms/home/home-page/utils/utils'\r\nimport { merge } from './objectUtils'\r\n\r\nexport const addOptionsDataIntoRedux = ({ newOptions, oldOptions, oldOriginalOptions, setOptions, setOriginalOptions }) => {\r\n    console.log('newOptions', newOptions, 'oldOptions', oldOptions)\r\n    let resultantOptions\r\n    resultantOptions = [...oldOptions, ...newOptions]\r\n    setOptions(resultantOptions)\r\n    setOriginalOptions([...STATIC_OPTIONS, ...newOptions])\r\n}\r\n\r\nexport const addResponseOptionsDataIntoRedux = ({ newOptions, oldOptions, oldOriginalOptions, setOptions, setOriginalOptions, sorting }) => {\r\n    const originalOptions = [...STATIC_OPTIONS, ...newOptions]\r\n    let resultantOptions = merge(oldOptions, [...originalOptions])\r\n    if (sorting === LATEST) {\r\n        resultantOptions = bringIntoOriginalOrder(originalOptions, resultantOptions)\r\n    } else if (sorting === ALPHABETICAL) {\r\n        resultantOptions = bringIntoAlphabeticalOrder(resultantOptions)\r\n    }\r\n    setOptions([...resultantOptions])\r\n    setOriginalOptions(originalOptions)\r\n}\r\n","import { getPhilosopherObjectIndex } from '../static/utils/utils'\r\n\r\nexport const merge = (oldOptions, newOptions) => {\r\n    let newOptionsCopy = JSON.parse(JSON.stringify(newOptions))\r\n    newOptionsCopy.forEach((element, newOptionindex) => {\r\n        const oldOptionIndex = getPhilosopherObjectIndex(element.value, oldOptions)\r\n        if (oldOptionIndex !== -1) {\r\n            newOptionsCopy[newOptionindex].quotes = oldOptions[oldOptionIndex].quotes\r\n        }\r\n    })\r\n    return newOptionsCopy\r\n}\r\n","import { API_ENDPOINTS } from '../../../../../../common/apis/apiEndpoints'\r\nimport { getPhilosopherQuotes, lazyLoadAsset } from '../../../../../../common/static/utils/utils'\r\nimport { retryTenTimes } from '../../../../../../common/utils/apiUtils'\r\nimport { addResponseOptionsDataIntoRedux } from '../../../../../../common/utils/lazyLoadUtils'\r\nimport { scrollToMemorizedRow } from '../../../../../../common/utils/utils'\r\nimport { changeQuotesData } from '../../../quotes-list/utils/utils'\r\n\r\nexport function onPhilosopherSelectChange({ philosopher, listRef, setIsFetching, setStart, setEnd, setSearchText, setCurrentPhilosopher, currentData, setCurrentData, options, setOptions, setQuotesLoaded, markedMode, markedQuotes, setMarkedQuotes }) {\r\n    function callback() {\r\n        setCurrentPhilosopher(philosopher)\r\n        changeQuotesData({ philosopher, currentData, setCurrentData, options }, { markedMode, markedQuotes, setMarkedQuotes })\r\n        scrollToMemorizedRow(listRef, currentData, philosopher)\r\n        setIsFetching(false)\r\n    }\r\n    setStart(1)\r\n    setEnd('')\r\n    setSearchText('')\r\n    setIsFetching(true)\r\n\r\n    if (!getPhilosopherQuotes({ philosopher, options })) {\r\n        lazyLoadAsset(philosopher, { options, setOptions }, setQuotesLoaded, []).then(callback)\r\n    } else {\r\n        callback()\r\n    }\r\n}\r\n\r\nexport const onFocusHandler = async ({ options, setOptions, isFetchingOptions, setIsFetchingOptions, originalOptions, setOriginalOptions, sorting }) => {\r\n    setIsFetchingOptions && setIsFetchingOptions(true)\r\n    let response = await retryTenTimes(() => fetch(API_ENDPOINTS.STATIC_DATA.STATIC_ASSET_GRAPH))\r\n    response = await response.json()\r\n    addResponseOptionsDataIntoRedux({ newOptions: response, oldOptions: options, oldOriginalOptions: originalOptions, setOptions, setOriginalOptions, sorting })\r\n    setIsFetchingOptions && setIsFetchingOptions(false)\r\n}\r\n","import React, { Suspense, useState } from 'react'\r\nimport { retryTenTimes } from '../../../../../common/utils/apiUtils'\r\nimport Select from '../../../tools/select/select'\r\nimport { WordLengthSearch } from '../../../tools/wordLengthSearch/wordLengthSearch'\r\nimport { onFocusHandler, onPhilosopherSelectChange } from '../../desktop/desktop-header/utils/utils'\r\nconst MobileMenu = React.lazy(() => retryTenTimes(() => import('../mobile-menu/mobile-menu')))\r\nconst Breadcrumb = React.lazy(() => retryTenTimes(() => import('../../../analysis/breadcrumb/breadcrumb')))\r\nconst UnreadCounter = React.lazy(() => retryTenTimes(() => import('../../../analysis/unread-counter/unread-counter')))\r\nconst QuotesFound = React.lazy(() => retryTenTimes(() => import('../../../analysis/quotes-found/quotes-found')))\r\n\r\nfunction MobileHeader({ listRef, setSearchText, searchText, start, end, setStart, setEnd, isFetching, setIsFetching, markedMode, setMarkedMode, markedQuotes, currentData, setCurrentData, currentPhilosopher, originalData, setCurrentPhilosopher, options, setOptions, setQuotesLoaded, darkMode, setDarkMode, setSorting, sorting, isFetchingOptions, setIsFetchingOptions, originalOptions, setOriginalOptions, userName, setUserName, setMarkedQuotes, isLoggedIn, setIsLoggedIn, password, setPassword }) {\r\n    const propsToSend = { start, end, setStart, setEnd, setSearchText, setCurrentData }\r\n    const [visible, toggleVisible] = useState(false)\r\n\r\n    return (\r\n        <div className=\"header\">\r\n            <div className=\"mobile-column\">\r\n                {visible && (\r\n                    <Suspense fallback={''}>\r\n                        <MobileMenu markedMode={markedMode} setMarkedMode={setMarkedMode} visible={visible} options={options} setOptions={setOptions} toggleVisible={toggleVisible} darkMode={darkMode} setDarkMode={setDarkMode} setSorting={setSorting} sorting={sorting} userName={userName} setUserName={setUserName} setMarkedQuotes={setMarkedQuotes} {...{ isLoggedIn, setIsLoggedIn, password, setPassword, setIsFetching }} />\r\n                    </Suspense>\r\n                )}\r\n                <div style={{ paddingLeft: '0.5rem', paddingRight: '0.5rem' }} onClick={() => toggleVisible(!visible)}>\r\n                    ☰\r\n                </div>\r\n            </div>\r\n            <div className=\"mobile-column\">\r\n                <WordLengthSearch isMobile={true} listRef={listRef} {...propsToSend} />\r\n            </div>\r\n            <div className=\"mobile-column\">\r\n                <input data-testid=\"search-text\" className=\"wordSearch\" type=\"text\" placeholder=\"Search word\" value={searchText} onChange={({ target: { value } }) => setSearchText(value)} />\r\n            </div>\r\n            <div className=\"mobile-column\">\r\n                <Select isMobile={true} isFetchingOptions={isFetchingOptions} options={options} currentPhilosopher={currentPhilosopher} onFocusHandlerCallback={() => onFocusHandler({ options, setOptions, isFetchingOptions, setIsFetchingOptions, originalOptions, setOriginalOptions, sorting })} onChangeHandler={({ target: { value: philosopher } }) => onPhilosopherSelectChange({ philosopher, listRef, setIsFetching, setStart, setEnd, setSearchText, setCurrentPhilosopher, setCurrentData, options, setOptions, setQuotesLoaded })} />\r\n            </div>\r\n            <Suspense fallback={''}>\r\n                <Breadcrumb>\r\n                    <QuotesFound markedMode={markedMode} found={currentData.length} />\r\n                    {markedMode && <UnreadCounter isFetching={isFetching} currentData={currentData} originalData={originalData} markedQuotes={markedQuotes} currentPhilosopher={currentPhilosopher} isFetchingOptions={isFetchingOptions} />}\r\n                </Breadcrumb>\r\n            </Suspense>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MobileHeader\r\n","import React, { Suspense } from 'react'\r\nimport { getCurrentPhilosopherFullname } from '../../../../common/static/utils/utils'\r\nimport { retryTenTimes } from '../../../../common/utils/apiUtils'\r\nimport './select.css'\r\nconst DesktopSelect = React.lazy(() => retryTenTimes(() => import('../../home/desktop/desktop-select/desktop-select')))\r\nconst MobileSelect = React.lazy(() => retryTenTimes(() => import('../../home/mobile/mobile-select/mobile-select')))\r\n\r\nconst Select = ({ options, currentPhilosopher, onChangeHandler, onFocusHandlerCallback, isMobile, isFetchingOptions }) => {\r\n    const renderSelect = () => {\r\n        if (isMobile) {\r\n            return (\r\n                <Suspense fallback={''}>\r\n                    <MobileSelect onFocusHandlerCallback={onFocusHandlerCallback} onChangeHandler={onChangeHandler} currentPhilosopher={currentPhilosopher} value={getCurrentPhilosopherFullname(currentPhilosopher, options)} placeholder={'Search philosopher'} options={options} isFetchingOptions={isFetchingOptions} />\r\n                </Suspense>\r\n            )\r\n        } else {\r\n            return (\r\n                <Suspense fallback={''}>\r\n                    <DesktopSelect onFocusHandler={onFocusHandlerCallback} onChangeHandler={onChangeHandler} options={options} currentPhilosopher={currentPhilosopher} isFetchingOptions={isFetchingOptions} />\r\n                </Suspense>\r\n            )\r\n        }\r\n    }\r\n\r\n    return renderSelect()\r\n}\r\n\r\nexport default Select\r\n","import React from 'react'\r\nimport { retryTenTimes } from '../../../../common/utils/apiUtils'\r\nimport './wordLengthSearch.css'\r\nconst DesktopWordLengthSearch = React.lazy(() => retryTenTimes(() => import('../../home/desktop/desktop-word-length-search/desktop-word-length-search')))\r\n\r\nexport function WordLengthSearch({ start, end, setStart, setEnd, setSearchText, isMobile }) {\r\n    const renderComponent = () => {\r\n        if (isMobile) {\r\n            return (\r\n                <>\r\n                    <input className=\"smallInput\" key=\"start\" name=\"start\" type=\"number\" min=\"1\" value={start} onChange={({ target: { value } }) => setStart(value)} />\r\n                    <input className=\"smallInput\" key=\"end\" name=\"end\" type=\"number\" min=\"0\" value={end} onChange={({ target: { value } }) => setEnd(value)} />\r\n                </>\r\n            )\r\n        } else {\r\n            return <DesktopWordLengthSearch start={start} setStart={setStart} end={end} setEnd={setEnd} />\r\n        }\r\n    }\r\n    return renderComponent()\r\n}\r\n"],"names":["addResponseOptionsDataIntoRedux","_ref2","newOptions","oldOptions","setOptions","oldOriginalOptions","setOriginalOptions","sorting","originalOptions","concat","_toConsumableArray","STATIC_OPTIONS","resultantOptions","newOptionsCopy","JSON","parse","stringify","forEach","element","newOptionindex","oldOptionIndex","getPhilosopherObjectIndex","value","quotes","merge","LATEST","bringIntoOriginalOrder","ALPHABETICAL","bringIntoAlphabeticalOrder","onPhilosopherSelectChange","_ref","philosopher","listRef","setIsFetching","setStart","setEnd","setSearchText","setCurrentPhilosopher","currentData","setCurrentData","options","setQuotesLoaded","markedMode","markedQuotes","setMarkedQuotes","callback","changeQuotesData","scrollToMemorizedRow","getPhilosopherQuotes","lazyLoadAsset","then","onFocusHandler","_ref3","_asyncToGenerator","_regeneratorRuntime","mark","_callee","setIsFetchingOptions","response","wrap","_context","prev","next","isFetchingOptions","retryTenTimes","fetch","API_ENDPOINTS","STATIC_DATA","STATIC_ASSET_GRAPH","sent","json","stop","_x","apply","arguments","MobileMenu","React","Breadcrumb","UnreadCounter","QuotesFound","searchText","start","end","isFetching","setMarkedMode","currentPhilosopher","originalData","darkMode","setDarkMode","setSorting","userName","setUserName","isLoggedIn","setIsLoggedIn","password","setPassword","propsToSend","_useState","useState","_useState2","_slicedToArray","visible","toggleVisible","_jsxs","className","children","_jsx","Suspense","fallback","style","paddingLeft","paddingRight","onClick","WordLengthSearch","_objectSpread","isMobile","type","placeholder","onChange","target","Select","onFocusHandlerCallback","onChangeHandler","found","length","DesktopSelect","MobileSelect","getCurrentPhilosopherFullname","DesktopWordLengthSearch","_Fragment","name","min"],"sourceRoot":""}