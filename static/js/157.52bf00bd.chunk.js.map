{"version":3,"file":"static/js/157.52bf00bd.chunk.js","mappings":"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","sources":["common/utils/ruleEngine.js","common/utils/debounce.js","webpack://quotes/./src/components/organisms/home/row/styles/row.module.css?d653","components/organisms/home/row/utils/style-utils.js","components/organisms/home/row/row.js","components/organisms/analysis/no-search-results/no-search-results.jsx","components/organisms/home/quotes-list/utils/listUtils.js","components/organisms/home/quotes-list/utils/ruleEngine/rules.js","components/organisms/home/quotes-list/quotes-list.jsx","components/organisms/home/row/utils/utils.js","common/utils/stringUtils.js"],"sourcesContent":["export const ruleEngine = {\r\n    makeDecision: function (rules, { value, params }) {\r\n        for (let i = 0; i <= rules.length; i++) {\r\n            const returnValue = rules[i](value, params)\r\n            if (returnValue) return returnValue\r\n        }\r\n    },\r\n}\r\n","const nativeMax = Math.max\r\nconst nativeMin = Math.min\r\nvar FUNC_ERROR_TEXT = 'Expected a function'\r\nexport function debounce(func, wait, options) {\r\n    let lastArgs,\r\n        lastThis,\r\n        maxWait,\r\n        result,\r\n        timerId,\r\n        lastCallTime,\r\n        lastInvokeTime = 0,\r\n        leading = false,\r\n        maxing = false,\r\n        trailing = true\r\n    if (typeof func !== 'function') {\r\n        throw new TypeError(FUNC_ERROR_TEXT)\r\n    }\r\n    wait = Number(wait) || 0\r\n    if (typeof options === 'object') {\r\n        leading = !!options.leading\r\n        maxing = 'maxWait' in options\r\n        maxWait = maxing ? nativeMax(Number(options.maxWait) || 0, wait) : maxWait\r\n        trailing = 'trailing' in options ? !!options.trailing : trailing\r\n    }\r\n\r\n    function invokeFunc(time) {\r\n        let args = lastArgs,\r\n            thisArg = lastThis\r\n\r\n        lastArgs = lastThis = undefined\r\n        lastInvokeTime = time\r\n        result = func.apply(thisArg, args)\r\n        return result\r\n    }\r\n\r\n    function leadingEdge(time) {\r\n        lastInvokeTime = time\r\n\r\n        timerId = setTimeout(timerExpired, wait)\r\n\r\n        return leading ? invokeFunc(time) : result\r\n    }\r\n\r\n    function remainingWait(time) {\r\n        let timeSinceLastCall = time - lastCallTime,\r\n            timeSinceLastInvoke = time - lastInvokeTime,\r\n            result = wait - timeSinceLastCall\r\n        return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result\r\n    }\r\n\r\n    function shouldInvoke(time) {\r\n        let timeSinceLastCall = time - lastCallTime,\r\n            timeSinceLastInvoke = time - lastInvokeTime\r\n\r\n        return lastCallTime === undefined || timeSinceLastCall >= wait || timeSinceLastCall < 0 || (maxing && timeSinceLastInvoke >= maxWait)\r\n    }\r\n\r\n    function timerExpired() {\r\n        const time = Date.now()\r\n        if (shouldInvoke(time)) {\r\n            return trailingEdge(time)\r\n        }\r\n\r\n        timerId = setTimeout(timerExpired, remainingWait(time))\r\n    }\r\n\r\n    function trailingEdge(time) {\r\n        timerId = undefined\r\n\r\n        if (trailing && lastArgs) {\r\n            return invokeFunc(time)\r\n        }\r\n        lastArgs = lastThis = undefined\r\n        return result\r\n    }\r\n\r\n    function cancel() {\r\n        if (timerId !== undefined) {\r\n            clearTimeout(timerId)\r\n        }\r\n        lastInvokeTime = 0\r\n        lastArgs = lastCallTime = lastThis = timerId = undefined\r\n    }\r\n\r\n    function flush() {\r\n        return timerId === undefined ? result : trailingEdge(Date.now())\r\n    }\r\n\r\n    function debounced() {\r\n        let time = Date.now(),\r\n            isInvoking = shouldInvoke(time)\r\n        lastArgs = arguments\r\n        lastThis = this\r\n        lastCallTime = time\r\n\r\n        if (isInvoking) {\r\n            if (timerId === undefined) {\r\n                return leadingEdge(lastCallTime)\r\n            }\r\n            if (maxing) {\r\n                timerId = setTimeout(timerExpired, wait)\r\n                return invokeFunc(lastCallTime)\r\n            }\r\n        }\r\n        if (timerId === undefined) {\r\n            timerId = setTimeout(timerExpired, wait)\r\n        }\r\n        return result\r\n    }\r\n    debounced.cancel = cancel\r\n    debounced.flush = flush\r\n    return debounced\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"actionItems\":\"row_actionItems__Y-npM\"};","export function evaluateClassNames(index) {\r\n    return (index % 2 ? \"ListItemOdd\" : \"ListItemEven\")\r\n}","import React, { Suspense, useRef, useState } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { useSnackbar } from 'react-simple-snackbar'\r\nimport ROUTES from '../../../../common/routes/routes'\r\nimport { retryTenTimes } from '../../../../common/utils/apiUtils'\r\nimport { isUndefined } from '../../../../common/utils/commonUtils'\r\nimport { debounce } from '../../../../common/utils/debounce'\r\nimport styles from './styles/row.module.css'\r\nimport { evaluateClassNames } from './utils/style-utils'\r\nimport { rowClickHandler } from './utils/utils'\r\nconst MarkAsRead = React.lazy(() => retryTenTimes(() => import('../../tools/mark-as-read/mark-as-read')))\r\nconst PushToSocialMedia = React.lazy(() => retryTenTimes(() => import('../../tools/push-to-social-media/push-to-social-media')))\r\nconst Translate = React.lazy(() => retryTenTimes(() => import('../../tools/translate/translate')))\r\nconst Audio = React.lazy(() => retryTenTimes(() => import('../../tools/audio/audio')))\r\n\r\nconst Row = ({ data: { searchText, start, end, philosopherFullName, philosopherFullName_i10n, markedMode, currentQuote, currentPhilosopher, markedQuotes, setMarkedQuotes, currentData, setCurrentData, index, scrollPosition, setScrollPosition, listRef, darkMode, scheduledPosts, setScheduledQuotes }, style }) => {\r\n    const quoteRef = useRef()\r\n    const [openSnackbar] = useSnackbar()\r\n    const { quote: quotationText, id: quotationId } = currentQuote\r\n    const propsToSend = { openSnackbar, searchText, start, end, philosopherFullName, index, philosopherFullName_i10n, darkMode }\r\n    const [localTranslateKey, setLocalTranslateKey] = useState(false)\r\n    const debouncedHandler = debounce(() => setScrollPosition(index), 500)\r\n\r\n    if (!isUndefined(currentQuote))\r\n        return (\r\n            <div key={index} className={evaluateClassNames(index)} style={style} onMouseMove={debouncedHandler} onTouchStart={debouncedHandler}>\r\n                <span style={{ position: 'absolute', top: '10rem' }} className=\"row\">\r\n                    <span ref={quoteRef} onClick={rowClickHandler.bind(this, { quote: quotationText, ...propsToSend })}>\r\n                        {`${index + 1}. \"${quotationText}\" ― ${philosopherFullName}`}\r\n                    </span>\r\n                </span>\r\n                <div style={{ position: 'absolute', top: '26rem' }} className=\"row\">\r\n                    {localTranslateKey ? <Translate inputText={quotationText} {...propsToSend} /> : null}\r\n                </div>\r\n\r\n                <div className={styles.actionItems} style={{ position: 'absolute', bottom: '5rem' }}>\r\n                    <button>\r\n                        <Link to={ROUTES.image.route} state={{ quotationText, philosopherFullName, signature: 'Instagram: @philosophizetruth' }} style={{ textDecoration: 'none', color: darkMode ? '#fff' : '#000' }}>\r\n                            Download Image\r\n                        </Link>\r\n                    </button>\r\n                    <Audio index={index} currentData={currentData} scrollPosition={scrollPosition} setScrollPosition={setScrollPosition} listRef={listRef} />\r\n                    {markedMode && (\r\n                        <Suspense fallback={''}>\r\n                            <MarkAsRead index={quotationId} currentPhilosopher={currentPhilosopher} markedQuotes={markedQuotes} setMarkedQuotes={setMarkedQuotes} currentData={currentData} setCurrentData={setCurrentData} setLocalTranslateKey={setLocalTranslateKey} />\r\n                        </Suspense>\r\n                    )}\r\n                    <button onClick={() => setLocalTranslateKey(true)}>Translate</button>\r\n                    <button>\r\n                        <Link to={ROUTES.image.route} state={{ quotationText, philosopherFullName, signature: 'Instagram: @philosophizetruth', share: true }} style={{ textDecoration: 'none', color: darkMode ? '#fff' : '#000' }}>\r\n                            Share\r\n                        </Link>\r\n                    </button>\r\n                    {/* <PushToSocialMedia index={quotationId} currentPhilosopher={currentPhilosopher} scheduledPosts={scheduledPosts} setScheduledQuotes={setScheduledQuotes} markedQuotes={markedQuotes} setMarkedQuotes={setMarkedQuotes} currentData={currentData} setCurrentData={setCurrentData} setLocalTranslateKey={setLocalTranslateKey} /> */}\r\n                </div>\r\n            </div>\r\n        )\r\n}\r\n\r\nexport default Row\r\n","import React from 'react'\r\n\r\nconst NoSearchResults = () => (\r\n    <>\r\n        <h4>No search results found!</h4>\r\n\r\n        <div>Guidlines:</div>\r\n\r\n        <div>1. Please check spelling of your search text.</div>\r\n\r\n        <div> 2. Try searching a smaller and a more generic word.</div>\r\n    </>\r\n)\r\nexport default NoSearchResults\r\n","import React from 'react'\r\nimport NoSearchResults from '../../../analysis/no-search-results/no-search-results'\r\n\r\nexport function NoRowsRenderer() {\r\n    return <NoSearchResults />\r\n}\r\n","export const rules = [\r\n    function (value, { start }) {\r\n        if (start <= 20) return 500\r\n    },\r\n    function (value, { start }) {\r\n        if (start > 20 && start <= 40) return 600\r\n    },\r\n    function (value, { start }) {\r\n        if (start > 40 && start <= 60) return 1000\r\n    },\r\n    function (value, { start }) {\r\n        if (start > 60 && start <= 100) return 1400\r\n    },\r\n    function (value, { start }) {\r\n        if (start > 100) return 2000\r\n    },\r\n    function () {\r\n        return 800\r\n    },\r\n]\r\n","import React, { useEffect } from 'react'\r\nimport List from 'react-virtualized/dist/commonjs/List'\r\nimport { ruleEngine } from '../../../../common/utils/ruleEngine'\r\nimport { scrollToMemorizedRow } from '../../../../common/utils/utils'\r\nimport Row from '../row/row'\r\nimport './quotes-list.css'\r\nimport { NoRowsRenderer } from './utils/listUtils'\r\nimport { rules } from './utils/ruleEngine/rules'\r\nimport { getPhilosopherFullName, getPhilosopherFullName_i10n } from './utils/utils'\r\n\r\nfunction QuotesList({ listRef, width, height, searchText, start, end, markedMode, currentData, setCurrentData, options, currentPhilosopher, markedQuotes, setMarkedQuotes, scrollPosition, setScrollPosition, darkMode, scheduledPosts, setScheduledQuotes }) {\r\n    const philosopherFullName = getPhilosopherFullName({ currentPhilosopher, options })\r\n    const philosopherFullName_i10n = getPhilosopherFullName_i10n({ currentPhilosopher, options })\r\n\r\n    useEffect(() => {\r\n        scrollToMemorizedRow(listRef, scrollPosition, currentData)\r\n    }, [listRef])\r\n\r\n    function rowRenderer({ index, ...others }) {\r\n        return <Row data={{ searchText, start, end, philosopherFullName, philosopherFullName_i10n, markedMode, currentData, setCurrentData, currentQuote: currentData[index], index, currentPhilosopher, markedQuotes, setMarkedQuotes, scrollPosition, setScrollPosition, darkMode, listRef, scheduledPosts, setScheduledQuotes }} {...others} />\r\n    }\r\n\r\n    return <List className=\"List\" height={height} rowCount={currentData.length} rowHeight={ruleEngine.makeDecision(rules, { params: { start } })} width={width} ref={listRef} rowRenderer={rowRenderer} noRowsRenderer={NoRowsRenderer} style={{ padding: '1rem' }} />\r\n}\r\n\r\nexport default QuotesList\r\n","import copy from 'copy-to-clipboard'\r\nimport { insert, setCharAt } from '../../../../../common/utils/stringUtils'\r\n\r\nexport function copyQuoteText(quoteText, philosopherFullName) {\r\n    if (philosopherFullName.toLowerCase().trim() === 'all') {\r\n        let splittingIndex = quoteText.lastIndexOf('― ')\r\n        let updatedQuoteText = setCharAt(quoteText, splittingIndex - 1, '')\r\n        updatedQuoteText = '\"' + updatedQuoteText\r\n        updatedQuoteText = insert(updatedQuoteText, splittingIndex, '\"\\n\\n')\r\n        copy(updatedQuoteText)\r\n    } else copy(`\"${quoteText}\"\\n\\n${philosopherFullName}`)\r\n}\r\n\r\nexport function rowClickHandler({ openSnackbar, philosopherFullName, quote, index }) {\r\n    copyQuoteText(quote, philosopherFullName)\r\n    openSnackbar('Copied!', 1000)\r\n}\r\n\r\nexport function devModeSignature() {\r\n    return isAppInDevMode() ? <>dev-mode</> : null\r\n}\r\n\r\nexport function isAppInDevMode() {\r\n    return process.env.NODE_ENV !== 'production'\r\n}\r\n\r\nexport function rowClickHandlerFoBothQuotes({ openSnackbar, quote: { hindi, english }, philosopherNames: { englishFullname, hindiFullname }, index }, event) {\r\n    event.stopPropagation()\r\n    copyBothQuotesText({ hindiQuote: hindi, englishQuote: english }, { englishFullname, hindiFullname })\r\n    openSnackbar('Copied!', 1000)\r\n}\r\n\r\nexport const copyBothQuotesText = ({ englishQuote, hindiQuote }, { englishFullname, hindiFullname }) => copy(`\"${hindiQuote}\"\\n\\n― ${hindiFullname}\\n\\n\\n\"${englishQuote}\"\\n\\n― ${englishFullname}`)\r\n","export function insert(str, index, value) {\r\n    return str.substr(0, index) + value + str.substr(index);\r\n}\r\n\r\nexport function setCharAt(str, index, chr) {\r\n    if (index > str.length - 1) return str;\r\n    return str.substring(0, index) + chr + str.substring(index + 1);\r\n}"],"names":["ruleEngine","makeDecision","rules","value","params","i","length","returnValue","nativeMax","Math","max","nativeMin","min","debounce","func","wait","options","lastArgs","lastThis","maxWait","result","timerId","lastCallTime","lastInvokeTime","leading","maxing","trailing","TypeError","invokeFunc","time","args","thisArg","undefined","apply","leadingEdge","setTimeout","timerExpired","shouldInvoke","timeSinceLastCall","Date","now","trailingEdge","remainingWait","debounced","isInvoking","arguments","this","Number","cancel","clearTimeout","flush","evaluateClassNames","index","MarkAsRead","React","retryTenTimes","Translate","Audio","data","searchText","start","end","philosopherFullName","philosopherFullName_i10n","markedMode","currentQuote","currentPhilosopher","markedQuotes","setMarkedQuotes","currentData","setCurrentData","scrollPosition","setScrollPosition","listRef","darkMode","style","scheduledPosts","setScheduledQuotes","quoteRef","useRef","useSnackbar","openSnackbar","quotationText","quote","quotationId","id","propsToSend","useState","localTranslateKey","setLocalTranslateKey","debouncedHandler","isUndefined","className","onMouseMove","onTouchStart","position","top","ref","onClick","rowClickHandler","inputText","styles","bottom","to","ROUTES","state","signature","textDecoration","color","Suspense","fallback","share","NoRowsRenderer","width","height","getPhilosopherFullName","getPhilosopherFullName_i10n","useEffect","scrollToMemorizedRow","List","rowCount","rowHeight","rowRenderer","others","noRowsRenderer","padding","quoteText","toLowerCase","trim","splittingIndex","lastIndexOf","updatedQuoteText","chr","str","substring","substr","insert","copy","copyQuoteText"],"sourceRoot":""}