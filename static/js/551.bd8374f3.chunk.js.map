{"version":3,"file":"static/js/551.bd8374f3.chunk.js","mappings":"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","sources":["common/static/utils/utils.js","common/utils/commonUtils.js","components/organisms/analysis/generate-quote-image/utils/utils.js","components/organisms/analysis/generate-quote-image/generateQuoteImage.js","components/organisms/analysis/generate-quote-image/utils/hooks.js","components/organisms/home/home-page/utils/utils.js","components/organisms/home/mobile/mobile-menu/utils/utils.js","common/static/assets/images/philosophers|sync|/^/.//.*$"],"sourcesContent":["import { API_ENDPOINTS } from '../../apis/apiEndpoints'\nimport { retryTenTimes } from '../../utils/apiUtils'\n\nexport const addPhilosopherNameToQuote = (quote, philosopherFullName) => `${quote} â€• ${philosopherFullName}`\n\nexport const convertQuoteArray = (quoteArr, philosopherFullName) => quoteArr.map((quote) => addPhilosopherNameToQuote(quote, philosopherFullName))\n\nexport const allocateIdsToData = (data) =>\n    data.forEach((element, index) => {\n        element.id = index\n    })\n\nexport const doOperationsOnData = ({ data, setData }, sortingMethod) => {\n    data = data.slice()\n\n    if (sortingMethod === 'alphabetical') data.sort((a, b) => a.fullName.localeCompare(b.fullName))\n    else data.sort((a, b) => b.id - a.id)\n\n    setData(data)\n}\n\nexport const addPhilosopherInGlobalData = (philosopherName, { options, setOptions }, quotes) => {\n    const newOptions = JSON.parse(JSON.stringify(options))\n    if (philosopherName.trim().toLowerCase() === 'all') {\n        const index = getPhilosopherObjectIndex(philosopherName, options)\n        let existingQuotes\n        if (newOptions[index].quotes === undefined) existingQuotes = []\n        else {\n            existingQuotes = newOptions[index].quotes\n        }\n        newOptions[index].quotes = [...existingQuotes, ...quotes]\n    } else {\n        const index = getPhilosopherObjectIndex(philosopherName, options)\n        newOptions[index].quotes = quotes\n    }\n    setOptions(newOptions)\n}\n\nexport const lazyLoadAsset = (philosopherName, { options, setOptions }, callbacks) => {\n    return new Promise((resolve, reject) => {\n        const fileName = philosopherName.toLowerCase()\n        retryTenTimes(() => fetch(API_ENDPOINTS.STATIC_DATA.STATIC_QUOTES + fileName + '.json'))\n            .then((response) => response.json())\n            .then((data) => {\n                callbacks?.map((callback) => callback(data))\n                addPhilosopherInGlobalData(philosopherName, { options, setOptions }, data)\n                resolve()\n            })\n            .catch((e) => reject(e))\n    })\n}\n\nexport const getPhilosopherObjectIndex = (philosopher, options) => options.findIndex(({ value }) => value === philosopher)\n\nexport const getPhilosopherData = ({ philosopher, options }) => options.filter(({ value }) => value === philosopher)[0]\n\nexport const getPhilosopherQuotes = ({ philosopher, options }) => options.filter(({ value }) => value === philosopher)[0]?.quotes\n\nexport const getCurrentPhilosopherFullname = (currentPhilosopher, options) => {\n    const currentPhilosopherData = options[getPhilosopherObjectIndex(currentPhilosopher, options)]\n    return currentPhilosopherData.fullName\n}\n\nexport const doesPhilosopherDataExist = (philosopher, options) => {\n    if (options[getPhilosopherObjectIndex(philosopher, options)]) return true\n    else return false\n}\n","export const isUndefined = (value) => typeof value === 'undefined'\nexport const isObjEmpty = (obj) => Object.values(obj).length === 0 && obj.constructor === Object\n\nexport function uuidv4() {\n    return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, (c) => (c ^ (crypto.getRandomValues(new Uint8Array(1))[0] & (15 >> (c / 4)))).toString(16))\n}\n","import html2canvas from 'html2canvas'\n\nconst downloadImage = (blob, fileName) => {\n    const fakeLink = window.document.createElement('a')\n    fakeLink.style = 'display:none;'\n    fakeLink.download = fileName\n\n    fakeLink.href = blob\n\n    document.body.appendChild(fakeLink)\n    fakeLink.click()\n    document.body.removeChild(fakeLink)\n\n    fakeLink.remove()\n}\n\nexport const exportAsImage = async (element, imageFileName) => {\n    const html = document.getElementsByTagName('html')[0]\n    const body = document.getElementsByTagName('body')[0]\n    let htmlWidth = html.clientWidth\n    let bodyWidth = body.clientWidth\n    const newWidth = element.scrollWidth - element.clientWidth\n    if (newWidth > element.clientWidth) {\n        htmlWidth += newWidth\n        bodyWidth += newWidth\n    }\n    html.style.width = htmlWidth + 'px'\n    body.style.width = bodyWidth + 'px'\n    const canvas = await html2canvas(element, { scale: 3 })\n    const image = canvas.toDataURL('image/png', 1.0)\n    downloadImage(image, imageFileName)\n    html.style.width = null\n    body.style.width = null\n}\n\nexport const shareQuote = async (element, imageFileName) => {\n    ;(async () => {\n        if (!('share' in navigator)) {\n            return\n        }\n        const canvas = await html2canvas(element, { scale: 3 })\n        canvas.toBlob(async (blob) => {\n            const files = [new File([blob], imageFileName, { type: blob.type })]\n            const shareData = {\n                files,\n            }\n            if (navigator.canShare(shareData)) {\n                try {\n                    await navigator.share(shareData)\n                } catch (err) {\n                    if (err.name !== 'AbortError') {\n                        console.error(err.name, err.message)\n                    }\n                }\n            } else {\n                console.warn('Sharing not supported', shareData)\n            }\n        })\n    })()\n}\n","import React, { useRef } from 'react'\nimport { useSelector } from 'react-redux'\nimport { retryTenTimes } from '../../../../common/utils/apiUtils'\nimport { useCreateQuoteImage } from './utils/hooks'\nconst QuoteWithImage = React.lazy(() => retryTenTimes(() => import('../quote-with-image/quote-with-image')))\nconst QuoteWithoutImage = React.lazy(() => retryTenTimes(() => import('../quote-without-image/quote-without-image')))\n\nconst GenerateQuoteImage = () => {\n    let { quotationText, philosopherFullName, signature, share = false } = useSelector((state) => state.quoteImage)\n    const exportRef = useRef()\n    const currentPhilosopher = useSelector((state) => state.philosophersData.currentPhilosopher)\n    const darkMode = useSelector((state) => state.philosophersData.darkMode)\n\n    const propsToSend = { exportRef, quotationText, philosopherFullName, signature }\n\n    useCreateQuoteImage(philosopherFullName, share, exportRef, darkMode)\n\n    try {\n        const imageName = `${currentPhilosopher}.jpg`\n        require('../../../../common/static/assets/images/philosophers/' + imageName)\n        return <QuoteWithImage {...propsToSend} imageName={imageName} />\n    } catch (error) {\n        return <QuoteWithoutImage {...propsToSend} />\n    }\n}\n\nexport default GenerateQuoteImage\n","import { useEffect } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { setCurrentModalName } from '../../../../../common/components/modal/modalRedux'\nimport { uuidv4 } from '../../../../../common/utils/commonUtils'\nimport { setThemeClassNameOnHTMLTag } from '../../../home/home-page/utils/utils'\nimport { exportAsImage, shareQuote } from './utils'\n\nexport function useCreateQuoteImage(philosopherFullName, share, exportRef, darkMode) {\n    const dispatch = useDispatch()\n    useEffect(() => {\n        setThemeClassNameOnHTMLTag(true)\n    }, [])\n\n    useEffect(() => {\n        ;(async function () {\n            const filename = `${philosopherFullName}-quote-${uuidv4()}.png`\n            if (share !== undefined && share === true) {\n                await shareQuote(exportRef.current, filename)\n            } else {\n                await exportAsImage(exportRef.current, filename)\n            }\n            if (!darkMode) setThemeClassNameOnHTMLTag(false)\n            dispatch(setCurrentModalName(''))\n        })()\n    }, [exportRef, philosopherFullName, share])\n}\n","import { getPhilosopherData } from '../../../../../common/static/utils/utils'\nimport { getUserDetails, sendUserDetails } from '../../mobile/mobile-menu/utils/utils'\n\nexport const setThemeClassNameOnHTMLTag = (value) => {\n    let root = document.getElementsByTagName('html')[0]\n    root.className = ''\n    if (value) {\n        root.classList.add('darkTheme')\n    } else {\n        root.classList.add('lightTheme')\n    }\n}\n\nexport const bringIntoOriginalOrder = (originalOptions, newOptions) => originalOptions.map((item) => getPhilosopherData({ philosopher: item.value, options: newOptions })).reverse()\n\nexport const bringIntoAlphabeticalOrder = (options) => [...options].sort((a, b) => a.fullName.localeCompare(b.fullName))\n\nexport function getClientSyncDates(syncDate) {\n    let currentClientDate = new Date()\n    let lastSyncClientDate = new Date(syncDate)\n\n    currentClientDate.setHours(0, 0, 0, 0)\n    currentClientDate = currentClientDate.getTime()\n\n    lastSyncClientDate = lastSyncClientDate.setHours(0, 0, 0, 0)\n    return { currentClientDate, lastSyncClientDate }\n}\n\nexport async function compareWithServerSyncDatesAndMakeAnAPICall(userName, markedQuotes, openSnackbar, setMarkedQuotes, setSyncDate, markedQuoteClientCount, currentClientDate) {\n    let { markedQuotesFromServer, dateFromServer } = await getUserDetails({ userName, markedQuotes, openSnackbar, setMarkedQuotes })\n    setSyncDate(Date.now())\n    if (markedQuotesFromServer) {\n        const markedQuotesFromServerCount = Object.values(markedQuotesFromServer).flat().length\n        if (markedQuotesFromServerCount > markedQuoteClientCount) {\n            setMarkedQuotes(markedQuotesFromServer)\n            openSnackbar('Auto-Sync : Restored all marked quotes!', 4000)\n        } else if (markedQuoteClientCount > markedQuotesFromServerCount) {\n            dateFromServer = new Date(dateFromServer)\n            dateFromServer.setHours(0, 0, 0, 0)\n            if (currentClientDate > dateFromServer) {\n                await sendUserDetails({ userName, markedQuotes, openSnackbar })\n            }\n        }\n    }\n}\n","import { API_ENDPOINTS } from '../../../../../../common/apis/apiEndpoints'\nimport { retryTenTimes } from '../../../../../../common/utils/apiUtils'\n\nexport const sendUserDetails = async ({ userName, markedQuotes, openSnackbar, setSyncDate }) => {\n    await retryTenTimes(async () => {\n        return await fetch(API_ENDPOINTS.MARKED_QUOTES.BACKUP, {\n            method: 'post',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n                userName,\n                markedQuotes,\n                dateSynced: Date.now(),\n            }),\n        })\n    })\n}\n\nexport const getUserDetails = async ({ userName, markedQuotes, openSnackbar, setMarkedQuotes }) => {\n    let response = await retryTenTimes(\n        async () =>\n            await fetch(API_ENDPOINTS.MARKED_QUOTES.RESTORE, {\n                method: 'post',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({\n                    userName,\n                }),\n            })\n    )\n\n    response = await response.json()\n    if (response?.ok) {\n        try {\n            const markedQuotesFromServer = response?.results?.[0]?.markedQuotes\n            const markedQuotesFromServerCount = Object.values(markedQuotesFromServer).flat().length\n            if (markedQuotesFromServer && markedQuotesFromServerCount > 0) {\n                return { markedQuotesFromServer, dateFromServer: response?.results?.[0]?.dateSynced }\n                // setMarkedQuotes(response?.results?.[0]?.markedQuotes)\n            }\n        } catch (error) {\n            openSnackbar(JSON.stringify(error))\n        }\n    } else {\n        openSnackbar(JSON.stringify(response.error))\n    }\n}\n\nexport const loginRegister = async ({ apiCallType, userName, password, setIsLoggedIn, openSnackbar, setIsFetching }) => {\n    const capitalizedUserName = userName.charAt(0).toUpperCase() + userName.slice(1)\n    let response\n    setIsFetching(true)\n    if (apiCallType === 'login') {\n        response = await retryTenTimes(\n            async () =>\n                await fetch(API_ENDPOINTS.USER.LOGIN, {\n                    method: 'post',\n                    headers: { 'Content-Type': 'application/json' },\n                    body: JSON.stringify({\n                        userName,\n                        password,\n                    }),\n                })\n        )\n    } else {\n        response = await retryTenTimes(\n            async () =>\n                await fetch(API_ENDPOINTS.USER.CREATE, {\n                    method: 'post',\n                    headers: { 'Content-Type': 'application/json' },\n                    body: JSON.stringify({\n                        userName,\n                        password,\n                    }),\n                })\n        )\n    }\n\n    response = await response.json()\n    setIsFetching(false)\n\n    if (response?.ok) {\n        setIsLoggedIn(true)\n        openSnackbar(capitalizedUserName + ' ' + JSON.stringify(response.serverResponse))\n    } else {\n        openSnackbar(JSON.stringify(response.error))\n    }\n}\n","var map = {\n\t\"./BEAUVOIR.jpg\": 9073,\n\t\"./BUKOWSKI.jpg\": 3792,\n\t\"./CARL_JUNG.jpg\": 2063,\n\t\"./FREUD.jpg\": 7393,\n\t\"./MARK_TWAIN.jpg\": 5244,\n\t\"./OSHO.jpg\": 6530,\n\t\"./PETERSON.jpg\": 4500,\n\t\"./RICKY_GERVAIS.png\": 8101,\n\t\"./ROUSSEAU.jpg\": 6961\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 2892;"],"names":["lazyLoadAsset","philosopherName","callbacks","options","setOptions","Promise","resolve","reject","fileName","toLowerCase","retryTenTimes","fetch","API_ENDPOINTS","then","response","json","data","map","callback","quotes","newOptions","JSON","parse","stringify","trim","existingQuotes","index","getPhilosopherObjectIndex","undefined","addPhilosopherInGlobalData","catch","e","philosopher","findIndex","value","getPhilosopherData","filter","getPhilosopherQuotes","getCurrentPhilosopherFullname","currentPhilosopher","fullName","doesPhilosopherDataExist","isUndefined","isObjEmpty","obj","Object","values","length","constructor","uuidv4","replace","c","crypto","getRandomValues","Uint8Array","toString","downloadImage","blob","fakeLink","window","document","createElement","style","download","href","body","appendChild","click","removeChild","remove","exportAsImage","element","imageFileName","html","getElementsByTagName","htmlWidth","clientWidth","bodyWidth","newWidth","scrollWidth","width","html2canvas","scale","canvas","image","toDataURL","shareQuote","navigator","toBlob","files","File","type","shareData","canShare","share","name","console","error","message","warn","QuoteWithImage","React","QuoteWithoutImage","useSelector","state","quoteImage","quotationText","philosopherFullName","signature","exportRef","useRef","philosophersData","propsToSend","darkMode","dispatch","useDispatch","useEffect","setThemeClassNameOnHTMLTag","filename","current","setCurrentModalName","useCreateQuoteImage","imageName","require","root","className","classList","add","bringIntoOriginalOrder","originalOptions","item","reverse","bringIntoAlphabeticalOrder","sort","a","b","localeCompare","getClientSyncDates","syncDate","currentClientDate","Date","lastSyncClientDate","setHours","getTime","compareWithServerSyncDatesAndMakeAnAPICall","userName","markedQuotes","openSnackbar","setMarkedQuotes","setSyncDate","markedQuoteClientCount","getUserDetails","markedQuotesFromServer","dateFromServer","now","markedQuotesFromServerCount","flat","sendUserDetails","method","headers","dateSynced","ok","results","loginRegister","apiCallType","password","setIsLoggedIn","setIsFetching","capitalizedUserName","charAt","toUpperCase","slice","serverResponse","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","Error","code","keys","module","exports"],"sourceRoot":""}