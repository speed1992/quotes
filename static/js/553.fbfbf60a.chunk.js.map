{"version":3,"file":"static/js/553.fbfbf60a.chunk.js","mappings":"kLAmCA,QA9BA,SAAsBA,GAAuE,IAAtE,WAAEC,EAAU,kBAAEC,EAAiB,aAAEC,EAAY,mBAAEC,GAAoBJ,EACtF,MAAOK,EAAaC,IAAkBC,EAAAA,EAAAA,UAAS,CAAEC,gBAAiB,KAAMC,UAAW,KAAMC,YAAa,OAChGC,GAAUC,EAAAA,EAAAA,KAAaC,GAAUA,EAAMC,iBAAiBH,UACxDI,GAAeC,EAAAA,EAAAA,IAAqB,CAAEC,YAAab,EAAoBO,aAE7EO,EAAAA,EAAAA,YAAU,KACN,IAAKjB,IAAeC,EAAmB,CACnC,MAAMM,EAA8B,OAAZO,QAAY,IAAZA,OAAY,EAAZA,EAAcI,OAChCV,GAAYW,EAAAA,EAAAA,IAAYjB,EAAaC,IAAuB,EAAID,EAAaC,GAAoBe,OAGvGb,EAAe,CAAEE,kBAAiBC,YAAWC,YAFzBF,EAAkBC,GAG1C,IACD,CAACL,EAAoBH,EAAYC,EAAmBC,EAA0B,OAAZY,QAAY,IAAZA,OAAY,EAAZA,EAAcI,SAEnF,MAAM,gBAAEX,EAAe,UAAEC,EAAS,YAAEC,GAAgBL,EAEpD,OACIgB,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACMtB,GAAcc,IACZS,EAAAA,EAAAA,MAAA,QAAAD,SAAA,CACyB,OAApBf,GAAwB,UAAAiB,OAAcjB,GACxB,OAAdC,GAAkB,UAAAgB,OAAchB,GAChB,OAAhBC,GAAoB,YAAAe,OAAgBf,OAKzD,C","sources":["components/organisms/analysis/unread-counter/unread-counter.js"],"sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { getPhilosopherQuotes } from '../../../../common/static/utils/utils'\r\nimport { isUndefined } from '../../../../common/utils/commonUtils'\r\n\r\nfunction UnreadCounter({ isFetching, isFetchingOptions, markedQuotes, currentPhilosopher }) {\r\n    const [quoteCounts, setQuoteCounts] = useState({ totalQuoteCount: null, readCount: null, unreadCount: null })\r\n    const options = useSelector((state) => state.philosophersData.options)\r\n    const originalData = getPhilosopherQuotes({ philosopher: currentPhilosopher, options })\r\n\r\n    useEffect(() => {\r\n        if (!isFetching && !isFetchingOptions) {\r\n            const totalQuoteCount = originalData?.length\r\n            const readCount = isUndefined(markedQuotes[currentPhilosopher]) ? 0 : markedQuotes[currentPhilosopher].length\r\n            const unreadCount = totalQuoteCount - readCount\r\n\r\n            setQuoteCounts({ totalQuoteCount, readCount, unreadCount })\r\n        }\r\n    }, [currentPhilosopher, isFetching, isFetchingOptions, markedQuotes, originalData?.length])\r\n\r\n    const { totalQuoteCount, readCount, unreadCount } = quoteCounts\r\n\r\n    return (\r\n        <>\r\n            {!isFetching && originalData && (\r\n                <span>\r\n                    {totalQuoteCount !== null && `Total: ${totalQuoteCount}`}\r\n                    {readCount !== null && ` Read: ${readCount}`}\r\n                    {unreadCount !== null && ` Unread: ${unreadCount}`}\r\n                </span>\r\n            )}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default UnreadCounter\r\n"],"names":["_ref","isFetching","isFetchingOptions","markedQuotes","currentPhilosopher","quoteCounts","setQuoteCounts","useState","totalQuoteCount","readCount","unreadCount","options","useSelector","state","philosophersData","originalData","getPhilosopherQuotes","philosopher","useEffect","length","isUndefined","_jsx","_Fragment","children","_jsxs","concat"],"sourceRoot":""}