{"version":3,"file":"static/js/QuotesList.bb749efd.chunk.js","mappings":"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","sources":["webpack://quotes/./src/components/organisms/home/row/styles/row.module.css?d653","components/organisms/home/row/utils/utils.js","common/utils/stringUtils.js","components/organisms/home/row/row.js","common/utils/debounce.js","components/organisms/analysis/no-search-results/no-search-results.jsx","components/organisms/home/quotes-list/utils/listUtils.js","components/organisms/home/quotes-list/quotes-list.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"actionItems\":\"row_actionItems__EzD7I\",\"row\":\"row_row__K3zuG\",\"quoteDescription\":\"row_quoteDescription__2gsqL\",\"quoteText\":\"row_quoteText__joqzl\"};","import { insert, setCharAt } from '../../../../../common/utils/stringUtils'\r\n\r\nexport function copyQuoteText(quoteText, philosopherFullName) {\r\n    if (philosopherFullName.toLowerCase().trim() === 'all') {\r\n        let splittingIndex = quoteText.lastIndexOf('― ')\r\n        let updatedQuoteText = setCharAt(quoteText, splittingIndex - 1, '')\r\n        updatedQuoteText = '\"' + updatedQuoteText\r\n        updatedQuoteText = insert(updatedQuoteText, splittingIndex, '\"\\n\\n')\r\n        navigator.clipboard.writeText(updatedQuoteText)\r\n    } else navigator.clipboard.writeText(`\"${quoteText}\"\\n\\n${philosopherFullName}`)\r\n}\r\n\r\nexport function rowClickHandler({ openSnackbar, philosopherFullName, quote }) {\r\n    copyQuoteText(quote, philosopherFullName)\r\n    openSnackbar('Quote Text Copied!')\r\n}\r\n\r\nexport function didntUnderstandHandler({ openSnackbar, philosopherFullName, quote }) {\r\n    navigator.clipboard.writeText(`\"${quote}\"\\n\\n${philosopherFullName}\\n\\nWhat is the meaning of this quote?`)\r\n    window.open('https://chatgpt.com/', '_blank').focus()\r\n}\r\n\r\nexport function devModeSignature() {\r\n    return isAppInDevMode() ? <>dev-mode</> : null\r\n}\r\n\r\nexport function isAppInDevMode() {\r\n    return process.env.NODE_ENV !== 'production'\r\n}\r\n\r\nexport function rowClickHandlerFoBothQuotes({ openSnackbar, quote: { hindi, english }, philosopherNames: { englishFullname, hindiFullname }, index }, event) {\r\n    event.stopPropagation()\r\n    copyBothQuotesText({ hindiQuote: hindi, englishQuote: english }, { englishFullname, hindiFullname })\r\n    openSnackbar('Quote Text Copied!')\r\n}\r\n\r\nexport const copyBothQuotesText = ({ englishQuote, hindiQuote }, { englishFullname, hindiFullname }) => navigator.clipboard.writeText(`\"${hindiQuote}\"\\n\\n― ${hindiFullname}\\n\\n\\n\"${englishQuote}\"\\n\\n― ${englishFullname}`)\r\n\r\nexport function copyURL(openSnackbar, callback) {\r\n    callback()\r\n    navigator.clipboard.writeText(window.location.href.toString())\r\n    openSnackbar('Quote Link Copied. You can now share!')\r\n}\r\n","export function insert(str, index, value) {\r\n    return str.substr(0, index) + value + str.substr(index);\r\n}\r\n\r\nexport function setCharAt(str, index, chr) {\r\n    if (index > str.length - 1) return str;\r\n    return str.substring(0, index) + chr + str.substring(index + 1);\r\n}","import React, { useCallback } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { setCurrentModalName } from '../../../../common/components/modal/modalRedux'\r\nimport useSnackbar from '../../../../common/components/snackbar/useSnackbar'\r\nimport { retryTenTimes } from '../../../../common/utils/apiUtils'\r\nimport { isUndefined } from '../../../../common/utils/commonUtils'\r\nimport { debounce } from '../../../../common/utils/debounce'\r\nimport { setQuoteImageData } from '../../analysis/generate-quote-image/generateQuoteImageRedux'\r\nimport styles from './styles/row.module.css'\r\nimport { didntUnderstandHandler, rowClickHandler } from './utils/utils'\r\n\r\nconst MarkAsRead = React.lazy(() => retryTenTimes(() => import(/* webpackChunkName: \"MarkAsRead\" */ '../../tools/mark-as-read/mark-as-read')))\r\nconst Audio = React.lazy(() => retryTenTimes(() => import(/* webpackChunkName: \"Audio\" */ '../../tools/audio/audio')))\r\n\r\nconst Row = ({ data: { philosopherFullName, markedMode, currentQuote, currentPhilosopher, markedQuotes, setMarkedQuotes, currentData, setCurrentData, index, scrollPosition, setScrollPosition, listRef, darkMode, voiceSpeed, minMode }, style }) => {\r\n    const [openSnackbar] = useSnackbar()\r\n    const { quote: quotationText, id: quotationId } = currentQuote\r\n\r\n    const debouncedHandler = useCallback(\r\n        debounce(() => setScrollPosition(parseInt(quotationId)), 500),\r\n        [quotationId, setScrollPosition]\r\n    )\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const rowHandler = useCallback(() => rowClickHandler({ quote: quotationText, openSnackbar, philosopherFullName }), [openSnackbar, philosopherFullName, quotationText])\r\n    const didntUnderstand = useCallback(() => didntUnderstandHandler({ quote: quotationText, openSnackbar, philosopherFullName }), [openSnackbar, philosopherFullName, quotationText])\r\n\r\n    if (!isUndefined(currentQuote)) {\r\n        return (\r\n            <div role=\"row\" className={styles.row} key={index} style={style} onMouseMove={debouncedHandler} onTouchStart={debouncedHandler}>\r\n                <div role=\"columnheader\" className={styles.rowChild}>\r\n                    <div className={styles.quoteText}>{`${index + 1}. \"${quotationText}\" ― ${philosopherFullName}`}</div>\r\n                </div>\r\n                <div role=\"columnheader\" id=\"actionItems\" className={styles.actionItems}>\r\n                    <button onClick={rowHandler}>Copy</button>\r\n                    <button\r\n                        onClick={() => {\r\n                            dispatch(setQuoteImageData({ quotationText, philosopherFullName, signature: 'Instagram: @philosophizetruth' }))\r\n                            dispatch(setCurrentModalName('Image'))\r\n                        }}\r\n                        style={{ textDecoration: 'none', color: darkMode ? '#fff' : '#000' }}\r\n                    >\r\n                        Download\r\n                    </button>\r\n                    <Audio index={index} currentData={currentData} scrollPosition={scrollPosition} setScrollPosition={setScrollPosition} listRef={listRef} voiceSpeed={voiceSpeed} />\r\n                    {markedMode && <MarkAsRead index={quotationId} currentPhilosopher={currentPhilosopher} markedQuotes={markedQuotes} setMarkedQuotes={setMarkedQuotes} currentData={currentData} setCurrentData={setCurrentData} />}\r\n                    {!minMode && (\r\n                        <button\r\n                            onClick={() => {\r\n                                dispatch(setQuoteImageData({ quotationText, philosopherFullName, signature: 'Instagram: @philosophizetruth', share: true }))\r\n                                dispatch(setCurrentModalName('Image'))\r\n                            }}\r\n                            style={{ textDecoration: 'none', color: darkMode ? '#fff' : '#000' }}\r\n                        >\r\n                            Share\r\n                        </button>\r\n                    )}\r\n                    <button onClick={didntUnderstand}>Didn't Understand</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n    return null\r\n}\r\n\r\nexport default Row\r\n","export function debounce(func, delay) {\r\n    let timer\r\n    return function () {\r\n        const context = this\r\n        const args = arguments\r\n        clearTimeout(timer)\r\n        timer = setTimeout(function () {\r\n            func.apply(context, args)\r\n        }, delay)\r\n    }\r\n}\r\n","import React from 'react'\r\n\r\nconst NoSearchResults = () => (\r\n    <>\r\n        <h4>No search results found!</h4>\r\n\r\n        <div>Guidlines:</div>\r\n\r\n        <div>1. Please check spelling of your search text.</div>\r\n\r\n        <div> 2. Try searching a smaller and a more generic word.</div>\r\n    </>\r\n)\r\nexport default NoSearchResults\r\n","import React from 'react'\r\nimport NoSearchResults from '../../../analysis/no-search-results/no-search-results'\r\n\r\nexport function NoRowsRenderer() {\r\n    return <NoSearchResults />\r\n}\r\n","import React, { useEffect, useMemo } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport List from 'react-virtualized/dist/commonjs/List'\r\nimport { retryTenTimes } from '../../../../common/utils/apiUtils'\r\nimport { isDesktop, scrollToQuoteId } from '../../../../common/utils/utils'\r\nimport Row from '../row/row'\r\nimport { NoRowsRenderer } from './utils/listUtils'\r\nimport { getPhilosopherFullName, getPhilosopherFullName_i10n } from './utils/utils'\r\nconst ToggleMinMode = React.lazy(() => retryTenTimes(() => import(/* webpackChunkName: \"ToggleMinMode\" */ '../mobile/toggle-min-mode/toggleMinMode')))\r\n\r\nfunction QuotesList({ listRef, width, height, searchText, start, end, setCurrentData, options, currentPhilosopher, setMarkedQuotes, scrollPosition, setScrollPosition, darkMode, scheduledPosts, setScheduledQuotes, rowsRendered, setRowsRendered, voiceSpeed, minMode }) {\r\n    const { currentData, markedMode, markedQuotes } = useSelector((state) => state.philosophersData)\r\n    const philosopherFullName = useMemo(() => getPhilosopherFullName({ currentPhilosopher, options }), [currentPhilosopher, options])\r\n    const philosopherFullName_i10n = useMemo(() => getPhilosopherFullName_i10n({ currentPhilosopher, options }), [currentPhilosopher, options])\r\n\r\n    const style = useMemo(() => ({ padding: '1rem', textAlign: isDesktop() && 'center' }), [isDesktop])\r\n\r\n    useEffect(() => {\r\n        if (rowsRendered) {\r\n            scrollToQuoteId(listRef, scrollPosition, currentData, currentPhilosopher)\r\n        }\r\n    }, [rowsRendered, currentPhilosopher])\r\n\r\n    useEffect(() => {\r\n        if (listRef.current) {\r\n            scrollToQuoteId(listRef, scrollPosition, currentData, currentPhilosopher)\r\n        }\r\n    }, [listRef?.current])\r\n\r\n    function rowRenderer({ index, key, ...others }) {\r\n        return <Row key={currentData?.[index]?.id} data={{ searchText, start, end, philosopherFullName, philosopherFullName_i10n, markedMode, currentData, setCurrentData, currentQuote: currentData[index], index, currentPhilosopher, markedQuotes, setMarkedQuotes, scrollPosition, setScrollPosition, darkMode, listRef, scheduledPosts, setScheduledQuotes, rowsRendered, setRowsRendered, voiceSpeed, minMode }} {...others} />\r\n    }\r\n\r\n    return (\r\n        currentPhilosopher !== undefined &&\r\n        currentData !== undefined && (\r\n            <>\r\n                <ToggleMinMode />\r\n                <List height={screen.height - screen.height / 4} rowCount={currentData?.length} rowHeight={550} width={width} ref={listRef} rowRenderer={rowRenderer} noRowsRenderer={currentPhilosopher !== undefined && currentData !== undefined ? NoRowsRenderer : null} style={style} />\r\n            </>\r\n        )\r\n    )\r\n}\r\n\r\nexport default QuotesList\r\n"],"names":["rowClickHandler","_ref","openSnackbar","philosopherFullName","quote","quoteText","toLowerCase","trim","splittingIndex","lastIndexOf","updatedQuoteText","chr","index","str","length","substring","value","substr","insert","navigator","clipboard","writeText","concat","copyQuoteText","MarkAsRead","React","retryTenTimes","Audio","data","markedMode","currentQuote","currentPhilosopher","markedQuotes","setMarkedQuotes","currentData","setCurrentData","scrollPosition","setScrollPosition","listRef","darkMode","voiceSpeed","minMode","style","useSnackbar","quotationText","id","quotationId","debouncedHandler","useCallback","func","delay","timer","context","this","args","arguments","clearTimeout","setTimeout","apply","debounce","parseInt","dispatch","useDispatch","rowHandler","didntUnderstand","_ref2","window","open","focus","didntUnderstandHandler","isUndefined","_jsxs","role","className","styles","row","onMouseMove","onTouchStart","children","_jsx","rowChild","actionItems","onClick","setQuoteImageData","signature","setCurrentModalName","textDecoration","color","share","NoSearchResults","_Fragment","NoRowsRenderer","ToggleMinMode","width","height","searchText","start","end","options","scheduledPosts","setScheduledQuotes","rowsRendered","setRowsRendered","useSelector","state","philosophersData","useMemo","getPhilosopherFullName","philosopherFullName_i10n","getPhilosopherFullName_i10n","padding","textAlign","isDesktop","useEffect","scrollToQuoteId","current","undefined","List","screen","rowCount","rowHeight","ref","rowRenderer","_currentData$index","key","others","Row","noRowsRenderer"],"sourceRoot":""}