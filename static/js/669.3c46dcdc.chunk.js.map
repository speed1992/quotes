{"version":3,"file":"static/js/669.3c46dcdc.chunk.js","mappings":"wPAEaA,EAAe,mCAAG,4FAASC,EAAT,EAASA,SAAUC,EAAnB,EAAmBA,aAC7B,sBAAbD,EADuB,iCAENE,EAAAA,EAAAA,KAAa,iBAC1B,8FACUC,MAAM,sDAAuD,CAC/DC,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAU,CACjBC,OAAQ,EACRR,aAAAA,EACAS,WAAYC,KAAKC,UAP7B,oFAHmB,cAEvBC,EAFuB,gBAeNA,EAASC,OAfH,OAevBD,EAfuB,OAgBvBE,MAAMR,KAAKC,UAAUK,IAhBE,2CAAH,sD,SCOtBG,EAAYC,EAAAA,MAAW,kBAAMf,EAAAA,EAAAA,KAAc,kBAAM,oCACjDgB,EAAiBD,EAAAA,MAAW,kBAAMf,EAAAA,EAAAA,KAAc,kBAAM,oCA2D5D,MAzDA,YAA+I,IAAzHiB,EAAwH,EAAxHA,WAAYC,EAA4G,EAA5GA,cAAeC,EAA6F,EAA7FA,QAASC,EAAoF,EAApFA,cAAeC,EAAqE,EAArEA,SAAUC,EAA2D,EAA3DA,YAAaC,EAA8C,EAA9CA,WAAYC,EAAkC,EAAlCA,QAAS1B,EAAyB,EAAzBA,SAAU2B,EAAe,EAAfA,YACrHC,GAAaC,EAAAA,EAAAA,KAAY,qBAAGC,iBAAoBF,cAChD3B,GAAe4B,EAAAA,EAAAA,KAAY,qBAAGC,iBAAoB7B,gBAElD8B,GAAWC,EAAAA,EAAAA,MAEXC,EAA2B,SAACC,GACnBA,EAAMC,OAAOC,KAEbC,EAAAA,EAAQZ,EAAWY,EAAAA,GACzBZ,EAAWa,EAAAA,IAGpB,OACI,SAACpB,EAAD,CAAgBqB,SAAU,kBAAMjB,GAAc,IAA9C,UACI,gBAAIc,GAAG,aAAaI,MAAO,CAAEC,QAASpB,EAAU,QAAU,QAA1D,WACI,+CAEI,4BACI,kBAAOqB,KAAK,QAAQN,GAAIC,EAAAA,EAAQM,KAAK,WAAWC,QAASX,EAA0BY,eAAgBnB,IAAYW,EAAAA,KAC/G,kBAAOS,QAAST,EAAAA,EAAhB,wBAEJ,4BACI,kBAAOK,KAAK,QAAQN,GAAIE,EAAAA,EAAcK,KAAK,WAAWC,QAASX,EAA0BY,eAAgBnB,IAAYY,EAAAA,KACrH,kBAAOQ,QAASR,EAAAA,EAAhB,iCAGR,yCAEI,kBAAOI,KAAK,WAAWK,QAAS5B,EAAY6B,SAAU,gBAAaD,EAAb,EAAGZ,OAAUY,QAAb,OAA6B3B,EAAc2B,UAErG,uCAEI,kBAAOL,KAAK,WAAWK,QAASxB,EAAUyB,SAAU,gBAAaD,EAAb,EAAGZ,OAAUY,QAAb,OAA6BvB,EAAYuB,UAEjG,+CAEI,kBAAOC,SAAU,SAACd,GAAD,OAAWH,GAASkB,EAAAA,EAAAA,IAAmBf,EAAMC,OAAOe,MAAQ,MAAMC,UAAU,aAAaT,KAAK,SAASQ,MAAOtB,EAA0B,GAAbA,EAAkB,SAElK,yBACI,SAAC,KAAD,CAAMwB,GAAIC,EAAAA,EAAAA,OAAAA,MAAqBb,MAAO,CAAEc,eAAgB,OAAQC,MAAO,QAAvE,UACI,iDAGR,sCAEI,kBAAOJ,UAAU,WAAWT,KAAK,OAAOM,SAAU,SAACQ,GAAD,OAAO7B,EAAY6B,EAAErB,OAAOe,QAAQA,MAAOlD,KAC7F,mBAAQ4C,QAAS,kBAAM7C,EAAgB,CAAEC,SAAAA,EAAUC,aAAAA,KAAnD,oCAEJ,yBACI,SAACe,EAAD","sources":["components/organisms/home/mobile/mobile-menu/utils/utils.js","components/organisms/home/mobile/mobile-menu/mobile-menu.js"],"sourcesContent":["import { retryTenTimes } from \"../../../../../../common/utils/apiUtils\"\r\n\r\nexport const sendUserDetails = async ({ userName, markedQuotes }) => {\r\n    if (userName === 'philosophizetruth') {\r\n    let response = await retryTenTimes(\r\n            async () =>\r\n                await fetch('https://quotes-backend.vercel.app/api/markedQuotes/', {\r\n                    method: 'post',\r\n                    headers: { 'Content-Type': 'application/json' },\r\n                    body: JSON.stringify({\r\n                        userId: 1,\r\n                        markedQuotes,\r\n                        dateSynced: Date.now(),\r\n                    }),\r\n                })\r\n        )\r\n\r\n        response = await response.json()\r\n        alert(JSON.stringify(response))\r\n    }\r\n}\r\n","import React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport ROUTES from '../../../../../common/routes/routes'\r\nimport { retryTenTimes } from '../../../../../common/utils/apiUtils'\r\nimport { ALPHABETICAL, LATEST } from '../../home-page/constants/constants'\r\nimport { setVoiceSpeedRedux } from '../../home-page/homePageRedux/homePageRedux'\r\nimport './mobile-menu.css'\r\nimport { sendUserDetails } from './utils/utils'\r\nconst BuildInfo = React.lazy(() => retryTenTimes(() => import('../../../tools/build-info/build-info')))\r\nconst OutsideAlerter = React.lazy(() => retryTenTimes(() => import('../../../../../common/components/outside-alerter/outside-alerter')))\r\n\r\nfunction MobileMenu({ markedMode, setMarkedMode, visible, toggleVisible, darkMode, setDarkMode, setSorting, sorting, userName, setUserName }) {\r\n    const voiceSpeed = useSelector(({ philosophersData: { voiceSpeed } }) => voiceSpeed)\r\n    const markedQuotes = useSelector(({ philosophersData: { markedQuotes } }) => markedQuotes)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const onClickSortButtonHandler = (event) => {\r\n        const id = event.target.id\r\n\r\n        if (id === LATEST) setSorting(LATEST)\r\n        else setSorting(ALPHABETICAL)\r\n    }\r\n\r\n    return (\r\n        <OutsideAlerter callback={() => toggleVisible(false)}>\r\n            <ul id=\"slide_menu\" style={{ display: visible ? 'block' : 'none' }}>\r\n                <li>\r\n                    Sort philosophers\r\n                    <div>\r\n                        <input type=\"radio\" id={LATEST} name=\"sortType\" onClick={onClickSortButtonHandler} defaultChecked={sorting === LATEST ? true : false} />\r\n                        <label htmlFor={LATEST}>Latest</label>\r\n                    </div>\r\n                    <div>\r\n                        <input type=\"radio\" id={ALPHABETICAL} name=\"sortType\" onClick={onClickSortButtonHandler} defaultChecked={sorting === ALPHABETICAL ? true : false} />\r\n                        <label htmlFor={ALPHABETICAL}>Alphabetical</label>\r\n                    </div>\r\n                </li>\r\n                <li>\r\n                    Marked Mode\r\n                    <input type=\"checkbox\" checked={markedMode} onChange={({ target: { checked } }) => setMarkedMode(checked)} />\r\n                </li>\r\n                <li>\r\n                    Dark Mode\r\n                    <input type=\"checkbox\" checked={darkMode} onChange={({ target: { checked } }) => setDarkMode(checked)} />\r\n                </li>\r\n                <li>\r\n                    Voice Speed[1-20]\r\n                    <input onChange={(event) => dispatch(setVoiceSpeedRedux(event.target.value / 10))} className=\"voiceSpeed\" type=\"number\" value={voiceSpeed ? voiceSpeed * 10 : ''} />\r\n                </li>\r\n                <li>\r\n                    <Link to={ROUTES.report.route} style={{ textDecoration: 'none', color: '#000' }}>\r\n                        <button>Open Report</button>\r\n                    </Link>\r\n                </li>\r\n                <li>\r\n                    Username\r\n                    <input className=\"userName\" type=\"text\" onChange={(e) => setUserName(e.target.value)} value={userName} />\r\n                    <button onClick={() => sendUserDetails({ userName, markedQuotes })}>Sync with Database</button>\r\n                </li>\r\n                <li>\r\n                    <BuildInfo />\r\n                </li>\r\n            </ul>\r\n        </OutsideAlerter>\r\n    )\r\n}\r\n\r\nexport default MobileMenu\r\n"],"names":["sendUserDetails","userName","markedQuotes","retryTenTimes","fetch","method","headers","body","JSON","stringify","userId","dateSynced","Date","now","response","json","alert","BuildInfo","React","OutsideAlerter","markedMode","setMarkedMode","visible","toggleVisible","darkMode","setDarkMode","setSorting","sorting","setUserName","voiceSpeed","useSelector","philosophersData","dispatch","useDispatch","onClickSortButtonHandler","event","target","id","LATEST","ALPHABETICAL","callback","style","display","type","name","onClick","defaultChecked","htmlFor","checked","onChange","setVoiceSpeedRedux","value","className","to","ROUTES","textDecoration","color","e"],"sourceRoot":""}