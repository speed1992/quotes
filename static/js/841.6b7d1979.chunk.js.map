{"version":3,"file":"static/js/841.6b7d1979.chunk.js","mappings":"kNAEO,SAASA,EAAiBC,GAAmC,IAAhCC,EAAID,EAAJC,KAAMC,EAAEF,EAAFE,GAAIC,EAASH,EAATG,UAAWC,EAAMJ,EAANI,OACrD,OAAOC,MAAMC,EAAAA,EAAcC,UAAW,CAClCC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CAAEC,EAAGT,EAAWU,OAAQZ,EAAMa,OAAQZ,EAAIa,OAAQ,OAAQC,QAAS,KACxFC,QAAS,CAAE,eAAgB,oBAC3Bb,OAAAA,IACDc,OAAM,SAACC,GAAO,GACrB,CCNO,SAASC,EAAcpB,GAA2B,IAADqB,EAAA,KAAvBlB,EAASH,EAATG,UAAWF,EAAID,EAAJC,KAAMC,EAAEF,EAAFE,GAE9CoB,GAAkDC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAvDI,EAAiBF,EAAA,GAAEG,EAAoBH,EAAA,GAqB9C,OAnBAI,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAa,IAAIC,gBACjB1B,EAASyB,EAAWzB,OAS1B,OAPgBL,EAAkBgC,KAAKV,EAAM,CAAElB,UAAAA,EAAWF,KAAAA,EAAMC,GAAAA,EAAIE,OAAAA,GAEpE4B,GACKC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,MAAM,IAChCF,MAAK,SAAAG,GAAA,IAAGC,EAAcD,EAAdC,eAAc,OAAOV,EAAqBU,EAAe,IACjEnB,OAAM,SAACC,GAAQ,IAEZ,WACJU,EAAWS,QACXX,EAAqB,GACzB,CAGJ,GAAG,CAACxB,EAAWF,EAAMC,IAEdwB,CACX,C,aCFA,EApBkB,SAAH1B,GAAqJ,IAA/IG,EAASH,EAATG,UAASoC,EAAAvC,EAAEC,KAAAA,OAAI,IAAAsC,EAAG,KAAIA,EAAAC,EAAAxC,EAAEE,GAAAA,OAAE,IAAAsC,EAAG,KAAIA,EAAEC,EAAYzC,EAAZyC,aAAcC,EAAU1C,EAAV0C,WAAYC,EAAK3C,EAAL2C,MAAOC,EAAG5C,EAAH4C,IAA0BC,GAAF7C,EAAnB8C,oBAA0B9C,EAAL6C,OAAOE,EAAwB/C,EAAxB+C,yBAA0BC,EAAQhD,EAARgD,SAC1ItB,EAAoBN,EAAe,CAAEjB,UAAAA,EAAWF,KAAAA,EAAMC,GAAAA,IACtD+C,EAAyCF,EAAyB7C,GAExE,MAA6B,KAAtBwB,QAAkDwB,IAAtBxB,GAAmCA,GAClEyB,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACIF,EAAAA,EAAAA,MAAA,OAAiBG,QAASC,EAAAA,GAAgBxB,K,UAAW,CAAEU,aAAAA,EAAcC,WAAAA,EAAYC,MAAAA,EAAOC,IAAAA,EAAKY,MAAO9B,EAAmBoB,oBAAqBG,EAAwCJ,MAAAA,IAASQ,SAAA,CACxL3B,EAAkB,WAAIuB,IADjBJ,IAGVY,EAAAA,EAAAA,KAAA,OAAAJ,UACII,EAAAA,EAAAA,KAAA,UAAQC,MAAO,CAAEC,UAAW,QAASN,UACjCI,EAAAA,EAAAA,KAACG,EAAAA,GAAI,CAAC1D,GAAI2D,EAAAA,EAAOC,MAAMC,MAAOC,MAAO,CAAEC,cAAevC,EAAmBoB,oBAAqBG,EAAwCiB,UAAW,mFAA8BR,MAAO,CAAES,eAAgB,OAAQC,MAAOpB,EAAW,OAAS,OAAQW,UAAW,QAASN,SAAC,gCAMpR,IACR,C","sources":["components/organisms/tools/translate/utils/utils.js","components/organisms/tools/translate/custom-hooks/custom-hooks.js","components/organisms/tools/translate/translate.js"],"sourcesContent":["import { API_ENDPOINTS } from \"../../../../../common/apis/apiEndpoints\";\r\n\r\nexport function hitTranslationAPI({ from, to, inputText, signal }) {\r\n    return fetch(API_ENDPOINTS.TRANSLATE, {\r\n        method: 'POST',\r\n        body: JSON.stringify({ q: inputText, source: from, target: to, format: 'text', api_key: '' }),\r\n        headers: { 'Content-Type': 'application/json' },\r\n        signal,\r\n    }).catch((e) => {})\r\n}\r\n","import { useEffect, useState } from \"react\";\r\nimport { hitTranslationAPI } from \"../utils/utils\";\r\n\r\nexport function useTranslation({ inputText, from, to }) {\r\n\r\n    const [translationOutput, setTranslationOutput] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        const controller = new AbortController()\r\n        const signal = controller.signal\r\n\r\n        const wrapped = hitTranslationAPI.bind(this, { inputText, from, to, signal });\r\n\r\n        wrapped()\r\n            .then(response => response.json())\r\n            .then(({ translatedText }) => setTranslationOutput(translatedText))\r\n            .catch((e) => { });\r\n\r\n        return (() => {\r\n            controller.abort();\r\n            setTranslationOutput(\"\")\r\n        })\r\n\r\n\r\n    }, [inputText, from, to])\r\n\r\n    return translationOutput;\r\n}","import { Link } from 'react-router-dom'\r\nimport ROUTES from '../../../../common/routes/routes'\r\nimport { rowClickHandler } from '../../home/row/utils/utils'\r\nimport { useTranslation } from './custom-hooks/custom-hooks'\r\n\r\nconst Translate = ({ inputText, from = 'en', to = 'hi', openSnackbar, searchText, start, end, philosopherFullName, index, philosopherFullName_i10n, darkMode }) => {\r\n    const translationOutput = useTranslation({ inputText, from, to })\r\n    const philosopherFullnameIn_SelectedLanguage = philosopherFullName_i10n[to]\r\n\r\n    return translationOutput !== '' && translationOutput !== undefined && translationOutput ? (\r\n        <>\r\n            <div key={index} onClick={rowClickHandler.bind(this, { openSnackbar, searchText, start, end, quote: translationOutput, philosopherFullName: philosopherFullnameIn_SelectedLanguage, index })}>\r\n                {translationOutput} ― {philosopherFullnameIn_SelectedLanguage}\r\n            </div>\r\n            <div>\r\n                <button style={{ marginTop: '10px' }}>\r\n                    <Link to={ROUTES.image.route} state={{ quotationText: translationOutput, philosopherFullName: philosopherFullnameIn_SelectedLanguage, signature: 'इंस्टाग्राम: @jaaginsaan' }} style={{ textDecoration: 'none', color: darkMode ? '#fff' : '#000', marginTop: '10px' }}>\r\n                        Download Hindi Image\r\n                    </Link>\r\n                </button>\r\n            </div>\r\n        </>\r\n    ) : null\r\n}\r\n\r\nexport default Translate\r\n"],"names":["hitTranslationAPI","_ref","from","to","inputText","signal","fetch","API_ENDPOINTS","TRANSLATE","method","body","JSON","stringify","q","source","target","format","api_key","headers","catch","e","useTranslation","_this","_useState","useState","_useState2","_slicedToArray","translationOutput","setTranslationOutput","useEffect","controller","AbortController","bind","wrapped","then","response","json","_ref2","translatedText","abort","_ref$from","_ref$to","openSnackbar","searchText","start","end","index","philosopherFullName","philosopherFullName_i10n","darkMode","philosopherFullnameIn_SelectedLanguage","undefined","_jsxs","_Fragment","children","onClick","rowClickHandler","quote","_jsx","style","marginTop","Link","ROUTES","image","route","state","quotationText","signature","textDecoration","color"],"sourceRoot":""}