{"version":3,"file":"static/js/841.8a9d5dd6.chunk.js","mappings":"4LAEO,SAASA,EAAiBC,GAAmC,IAAlC,KAAEC,EAAI,GAAEC,EAAE,UAAEC,EAAS,OAAEC,GAAQJ,EAC7D,OAAOK,MAAMC,EAAAA,EAAcC,WAAY,CACnCC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CAAEC,EAAGT,EAAWU,OAAQZ,EAAMa,OAAQZ,EAAIa,OAAQ,OAAQC,QAAS,KACxFC,QAAS,CAAE,eAAgB,oBAC3Bb,WACDc,OAAOC,OACd,CCNO,SAASC,EAAcpB,GAA+C,IAA9C,UAAEG,EAAS,KAAEF,EAAI,GAAEC,EAAE,mBAAEmB,GAAoBrB,EACtE,MAAOsB,EAAmBC,IAAwBC,EAAAA,EAAAA,UAAS,IAsB3D,OApBAC,EAAAA,EAAAA,YAAU,KACN,MAAMC,EAAa,IAAIC,gBACjBvB,EAASsB,EAAWtB,OAEpBwB,EAAU7B,EAAkB8B,KAAKC,KAAM,CAAE3B,YAAWF,OAAMC,KAAIE,WAUpE,OATAiB,EAAmB,CAAEU,OAAQ,YAAaC,QAAQ,IAClDJ,IACKK,MAAMC,GAAaA,EAASC,SAC5BF,MAAKG,IAAyB,IAAxB,eAAEC,GAAgBD,EACrBb,EAAqBc,GACrBhB,EAAmB,CAAEU,OAAQ,GAAIC,QAAQ,GAAQ,IAEpDd,OAAOC,QAEL,KACHO,EAAWY,QACXf,EAAqB,GAAG,CAC3B,GACF,CAACpB,EAAWF,EAAMC,IAEdoB,CACX,C,aCrBA,MAyBA,EAzBkBtB,IAAsK,IAArK,UAAEG,EAAS,KAAEF,EAAO,KAAI,GAAEC,EAAK,KAAI,aAAEqC,EAAY,WAAEC,EAAU,MAAEC,EAAK,IAAEC,EAAG,oBAAEC,EAAmB,MAAEC,EAAK,yBAAEC,EAAwB,SAAEC,EAAQ,mBAAEzB,GAAoBrB,EAC9K,MAAMsB,EAAoBF,EAAe,CAAEjB,YAAWF,OAAMC,KAAImB,uBAC1D0B,EAAyCF,EAAyB3C,GAClE8C,GAAWC,EAAAA,EAAAA,MAEjB,MAA6B,KAAtB3B,QAAkD4B,IAAtB5B,GAAmCA,GAClE6B,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACIF,EAAAA,EAAAA,MAAA,OAAiBG,QAASC,EAAAA,GAAgB1B,UAAK,EAAM,CAAEU,eAAcC,aAAYC,QAAOC,MAAKc,MAAOlC,EAAmBqB,oBAAqBI,EAAwCH,UAASS,SAAA,CACxL/B,EAAkB,WAAIyB,IADjBH,IAGVa,EAAAA,EAAAA,KAAA,OAAAJ,UACII,EAAAA,EAAAA,KAAA,UACIH,QAASA,KACLN,GAASU,EAAAA,EAAAA,IAAkB,CAAEC,cAAerC,EAAmBqB,oBAAqBI,EAAwCa,UAAW,qFACvIZ,GAASa,EAAAA,EAAAA,IAAoB,SAAS,EAE1CC,MAAO,CAAEC,eAAgB,OAAQC,MAAOlB,EAAW,OAAS,OAAQmB,UAAW,QAASZ,SAC3F,0DAKT,IAAI,C","sources":["components/organisms/tools/translate/utils/utils.js","components/organisms/tools/translate/custom-hooks/custom-hooks.js","components/organisms/tools/translate/translate.js"],"sourcesContent":["import { API_ENDPOINTS } from '../../../../../common/apis/apiEndpoints'\r\n\r\nexport function hitTranslationAPI({ from, to, inputText, signal }) {\r\n    return fetch(API_ENDPOINTS.TRANSLATE2, {\r\n        method: 'POST',\r\n        body: JSON.stringify({ q: inputText, source: from, target: to, format: 'text', api_key: '' }),\r\n        headers: { 'Content-Type': 'application/json' },\r\n        signal,\r\n    }).catch((e) => {})\r\n}\r\n","import { useEffect, useState } from 'react'\r\nimport { hitTranslationAPI } from '../utils/utils'\r\n\r\nexport function useTranslation({ inputText, from, to, setIsLocalFetching }) {\r\n    const [translationOutput, setTranslationOutput] = useState('')\r\n\r\n    useEffect(() => {\r\n        const controller = new AbortController()\r\n        const signal = controller.signal\r\n\r\n        const wrapped = hitTranslationAPI.bind(this, { inputText, from, to, signal })\r\n        setIsLocalFetching({ button: 'translate', status: true })\r\n        wrapped()\r\n            .then((response) => response.json())\r\n            .then(({ translatedText }) => {\r\n                setTranslationOutput(translatedText)\r\n                setIsLocalFetching({ button: '', status: false })\r\n            })\r\n            .catch((e) => {})\r\n\r\n        return () => {\r\n            controller.abort()\r\n            setTranslationOutput('')\r\n        }\r\n    }, [inputText, from, to])\r\n\r\n    return translationOutput\r\n}\r\n","import { useDispatch } from 'react-redux'\r\nimport { setCurrentModalName } from '../../../../common/components/modal/modalRedux'\r\nimport { setQuoteImageData } from '../../analysis/generate-quote-image/generateQuoteImageRedux'\r\nimport { rowClickHandler } from '../../home/row/utils/utils'\r\nimport { useTranslation } from './custom-hooks/custom-hooks'\r\n\r\nconst Translate = ({ inputText, from = 'en', to = 'hi', openSnackbar, searchText, start, end, philosopherFullName, index, philosopherFullName_i10n, darkMode, setIsLocalFetching }) => {\r\n    const translationOutput = useTranslation({ inputText, from, to, setIsLocalFetching })\r\n    const philosopherFullnameIn_SelectedLanguage = philosopherFullName_i10n[to]\r\n    const dispatch = useDispatch()\r\n\r\n    return translationOutput !== '' && translationOutput !== undefined && translationOutput ? (\r\n        <>\r\n            <div key={index} onClick={rowClickHandler.bind(this, { openSnackbar, searchText, start, end, quote: translationOutput, philosopherFullName: philosopherFullnameIn_SelectedLanguage, index })}>\r\n                {translationOutput} ― {philosopherFullnameIn_SelectedLanguage}\r\n            </div>\r\n            <div>\r\n                <button\r\n                    onClick={() => {\r\n                        dispatch(setQuoteImageData({ quotationText: translationOutput, philosopherFullName: philosopherFullnameIn_SelectedLanguage, signature: 'इंस्टाग्राम: @jaaginsaan' }))\r\n                        dispatch(setCurrentModalName('Image'))\r\n                    }}\r\n                    style={{ textDecoration: 'none', color: darkMode ? '#fff' : '#000', marginTop: '10px' }}\r\n                >\r\n                    डाउन्लोड\r\n                </button>\r\n            </div>\r\n        </>\r\n    ) : null\r\n}\r\n\r\nexport default Translate\r\n"],"names":["hitTranslationAPI","_ref","from","to","inputText","signal","fetch","API_ENDPOINTS","TRANSLATE2","method","body","JSON","stringify","q","source","target","format","api_key","headers","catch","e","useTranslation","setIsLocalFetching","translationOutput","setTranslationOutput","useState","useEffect","controller","AbortController","wrapped","bind","this","button","status","then","response","json","_ref2","translatedText","abort","openSnackbar","searchText","start","end","philosopherFullName","index","philosopherFullName_i10n","darkMode","philosopherFullnameIn_SelectedLanguage","dispatch","useDispatch","undefined","_jsxs","_Fragment","children","onClick","rowClickHandler","quote","_jsx","setQuoteImageData","quotationText","signature","setCurrentModalName","style","textDecoration","color","marginTop"],"sourceRoot":""}