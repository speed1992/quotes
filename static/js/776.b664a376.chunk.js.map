{"version":3,"file":"static/js/776.b664a376.chunk.js","mappings":"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","sources":["common/utils/ruleEngine.js","webpack://quotes/./src/components/organisms/home/row/styles/row.module.css?d653","components/organisms/home/row/row.js","common/utils/debounce.js","components/organisms/analysis/no-search-results/no-search-results.jsx","components/organisms/home/quotes-list/utils/listUtils.js","components/organisms/home/quotes-list/utils/ruleEngine/rules.js","components/organisms/home/quotes-list/quotes-list.jsx","components/organisms/home/row/utils/utils.js","common/utils/stringUtils.js"],"sourcesContent":["export const ruleEngine = {\r\n    makeDecision: function (rules, { value, params }) {\r\n        for (let i = 0; i <= rules.length; i++) {\r\n            const returnValue = rules[i](value, params)\r\n            if (returnValue) return returnValue\r\n        }\r\n    },\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"actionItems\":\"row_actionItems__Y-npM\"};","import React, { Suspense, useCallback, useState } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { useSnackbar } from 'react-simple-snackbar'\r\nimport ROUTES from '../../../../common/routes/routes'\r\nimport { retryTenTimes } from '../../../../common/utils/apiUtils'\r\nimport { isUndefined } from '../../../../common/utils/commonUtils'\r\nimport { debounce } from '../../../../common/utils/debounce'\r\nimport styles from './styles/row.module.css'\r\nimport { rowClickHandler, usePrevious } from './utils/utils'\r\nconst MarkAsRead = React.lazy(() => retryTenTimes(() => import('../../tools/mark-as-read/mark-as-read')))\r\nconst Translate = React.lazy(() => retryTenTimes(() => import('../../tools/translate/translate')))\r\nconst Audio = React.lazy(() => retryTenTimes(() => import('../../tools/audio/audio')))\r\n\r\nconst Row = ({ data: { searchText, start, end, philosopherFullName, philosopherFullName_i10n, markedMode, currentQuote, currentPhilosopher, markedQuotes, setMarkedQuotes, currentData, setCurrentData, index, scrollPosition, setScrollPosition, listRef, darkMode, scheduledPosts, setScheduledQuotes, rowsRendered, setRowsRendered, voiceSpeed }, style }) => {\r\n    const prevCurrentPhilosopher = usePrevious(currentPhilosopher)\r\n    const [openSnackbar] = useSnackbar()\r\n    const { quote: quotationText, id: quotationId } = currentQuote\r\n    const propsToSend = { openSnackbar, searchText, start, end, philosopherFullName, index, philosopherFullName_i10n, darkMode }\r\n    const [localTranslateKey, setLocalTranslateKey] = useState(false)\r\n    const debouncedHandler = useCallback(\r\n        debounce(() => setScrollPosition(parseInt(quotationId)), 500),\r\n        []\r\n    )\r\n\r\n    if (prevCurrentPhilosopher && prevCurrentPhilosopher !== currentPhilosopher && rowsRendered === false) {\r\n        setRowsRendered(true)\r\n    }\r\n\r\n    if (!isUndefined(currentQuote))\r\n        return (\r\n            <div role=\"row\" key={index} style={style} onMouseMove={debouncedHandler} onTouchStart={debouncedHandler}>\r\n                <span role=\"columnheader\" className=\"row\">\r\n                    <span onClick={rowClickHandler.bind(this, { quote: quotationText, ...propsToSend })}>{`${index + 1}. \"${quotationText}\" â€• ${philosopherFullName}`}</span>\r\n                </span>\r\n                <div role=\"columnheader\" className=\"row\">\r\n                    {localTranslateKey ? <Translate inputText={quotationText} {...propsToSend} /> : null}\r\n                </div>\r\n\r\n                <div role=\"columnheader\" className={styles.actionItems}>\r\n                    <button>\r\n                        <Link to={ROUTES.image.route} state={{ quotationText, philosopherFullName, signature: 'Instagram: @philosophizetruth' }} style={{ textDecoration: 'none', color: darkMode ? '#fff' : '#000' }}>\r\n                            Download Image\r\n                        </Link>\r\n                    </button>\r\n                    <Audio index={index} currentData={currentData} scrollPosition={scrollPosition} setScrollPosition={setScrollPosition} listRef={listRef} voiceSpeed={voiceSpeed} />\r\n                    {markedMode && (\r\n                        <Suspense fallback={''}>\r\n                            <MarkAsRead index={quotationId} currentPhilosopher={currentPhilosopher} markedQuotes={markedQuotes} setMarkedQuotes={setMarkedQuotes} currentData={currentData} setCurrentData={setCurrentData} setLocalTranslateKey={setLocalTranslateKey} />\r\n                        </Suspense>\r\n                    )}\r\n                    <button onClick={() => setLocalTranslateKey(true)}>Translate</button>\r\n                    <button>\r\n                        <Link to={ROUTES.image.route} state={{ quotationText, philosopherFullName, signature: 'Instagram: @philosophizetruth', share: true }} style={{ textDecoration: 'none', color: darkMode ? '#fff' : '#000' }}>\r\n                            Share Image\r\n                        </Link>\r\n                    </button>\r\n                    {/* <button onClick={() => copyURL(openSnackbar, () => setScrollPosition(parseInt(quotationId)))}>Share Link</button> */}\r\n                </div>\r\n            </div>\r\n        )\r\n}\r\n\r\nexport default Row\r\n","export function debounce(func, delay) {\r\n    let timer\r\n    return function () {\r\n        const context = this\r\n        const args = arguments\r\n        clearTimeout(timer)\r\n        timer = setTimeout(function () {\r\n            func.apply(context, args)\r\n        }, delay)\r\n    }\r\n}\r\n","import React from 'react'\r\n\r\nconst NoSearchResults = () => (\r\n    <>\r\n        <h4>No search results found!</h4>\r\n\r\n        <div>Guidlines:</div>\r\n\r\n        <div>1. Please check spelling of your search text.</div>\r\n\r\n        <div> 2. Try searching a smaller and a more generic word.</div>\r\n    </>\r\n)\r\nexport default NoSearchResults\r\n","import React from 'react'\r\nimport NoSearchResults from '../../../analysis/no-search-results/no-search-results'\r\n\r\nexport function NoRowsRenderer() {\r\n    return <NoSearchResults />\r\n}\r\n","export const rules = [\r\n    function (value, { start }) {\r\n        if (start <= 20) return 500\r\n    },\r\n    function (value, { start }) {\r\n        if (start > 20 && start <= 40) return 600\r\n    },\r\n    function (value, { start }) {\r\n        if (start > 40 && start <= 60) return 1000\r\n    },\r\n    function (value, { start }) {\r\n        if (start > 60 && start <= 100) return 1400\r\n    },\r\n    function (value, { start }) {\r\n        if (start > 100) return 2000\r\n    },\r\n    function () {\r\n        return 800\r\n    },\r\n]\r\n","import React, { useEffect } from 'react'\r\nimport List from 'react-virtualized/dist/commonjs/List'\r\nimport { ruleEngine } from '../../../../common/utils/ruleEngine'\r\nimport { scrollToQuoteId } from '../../../../common/utils/utils'\r\nimport Row from '../row/row'\r\nimport './quotes-list.css'\r\nimport { NoRowsRenderer } from './utils/listUtils'\r\nimport { rules } from './utils/ruleEngine/rules'\r\nimport { getPhilosopherFullName, getPhilosopherFullName_i10n } from './utils/utils'\r\n\r\nfunction QuotesList({ listRef, width, height, searchText, start, end, markedMode, currentData, setCurrentData, options, currentPhilosopher, markedQuotes, setMarkedQuotes, scrollPosition, setScrollPosition, darkMode, scheduledPosts, setScheduledQuotes, rowsRendered, setRowsRendered, voiceSpeed }) {\r\n    const philosopherFullName = getPhilosopherFullName({ currentPhilosopher, options })\r\n    const philosopherFullName_i10n = getPhilosopherFullName_i10n({ currentPhilosopher, options })\r\n\r\n    useEffect(() => {\r\n        if (rowsRendered) {\r\n            scrollToQuoteId(listRef, scrollPosition, currentData, currentPhilosopher)\r\n        }\r\n    }, [rowsRendered, currentPhilosopher])\r\n\r\n    useEffect(() => {\r\n        if (listRef.current) {\r\n            scrollToQuoteId(listRef, scrollPosition, currentData, currentPhilosopher)\r\n        }\r\n    }, [listRef?.current])\r\n\r\n    const onRowsRendered = () => {\r\n        if (rowsRendered === false) setRowsRendered(true)\r\n    }\r\n\r\n    function rowRenderer({ index, ...others }) {\r\n        return <Row data={{ searchText, start, end, philosopherFullName, philosopherFullName_i10n, markedMode, currentData, setCurrentData, currentQuote: currentData[index], index, currentPhilosopher, markedQuotes, setMarkedQuotes, scrollPosition, setScrollPosition, darkMode, listRef, scheduledPosts, setScheduledQuotes, rowsRendered, setRowsRendered, voiceSpeed }} {...others} />\r\n    }\r\n\r\n    return <List className=\"List\" height={height} rowCount={currentData.length} rowHeight={ruleEngine.makeDecision(rules, { params: { start } })} width={width} ref={listRef} rowRenderer={rowRenderer} onRowsRendered={onRowsRendered} noRowsRenderer={NoRowsRenderer} style={{ padding: '1rem' }} />\r\n}\r\n\r\nexport default QuotesList\r\n","import copy from 'copy-to-clipboard'\r\nimport { useEffect, useRef } from 'react'\r\nimport { insert, setCharAt } from '../../../../../common/utils/stringUtils'\r\n\r\nexport function copyQuoteText(quoteText, philosopherFullName) {\r\n    if (philosopherFullName.toLowerCase().trim() === 'all') {\r\n        let splittingIndex = quoteText.lastIndexOf('â€• ')\r\n        let updatedQuoteText = setCharAt(quoteText, splittingIndex - 1, '')\r\n        updatedQuoteText = '\"' + updatedQuoteText\r\n        updatedQuoteText = insert(updatedQuoteText, splittingIndex, '\"\\n\\n')\r\n        copy(updatedQuoteText)\r\n    } else copy(`\"${quoteText}\"\\n\\n${philosopherFullName}`)\r\n}\r\n\r\nexport function rowClickHandler({ openSnackbar, philosopherFullName, quote, index }) {\r\n    copyQuoteText(quote, philosopherFullName)\r\n    openSnackbar('Copied!', 1000)\r\n}\r\n\r\nexport function devModeSignature() {\r\n    return isAppInDevMode() ? <>dev-mode</> : null\r\n}\r\n\r\nexport function isAppInDevMode() {\r\n    return process.env.NODE_ENV !== 'production'\r\n}\r\n\r\nexport function rowClickHandlerFoBothQuotes({ openSnackbar, quote: { hindi, english }, philosopherNames: { englishFullname, hindiFullname }, index }, event) {\r\n    event.stopPropagation()\r\n    copyBothQuotesText({ hindiQuote: hindi, englishQuote: english }, { englishFullname, hindiFullname })\r\n    openSnackbar('Copied!', 1000)\r\n}\r\n\r\nexport const copyBothQuotesText = ({ englishQuote, hindiQuote }, { englishFullname, hindiFullname }) => copy(`\"${hindiQuote}\"\\n\\nâ€• ${hindiFullname}\\n\\n\\n\"${englishQuote}\"\\n\\nâ€• ${englishFullname}`)\r\n\r\nexport function usePrevious(value) {\r\n    const ref = useRef(null)\r\n    useEffect(() => {\r\n        ref.current = value\r\n    }, [value])\r\n    return ref.current\r\n}\r\n\r\nexport function copyURL(openSnackbar, callback) {\r\n    callback()\r\n    copy(window.location.href.toString())\r\n    openSnackbar('Quote URL Copied. You can now share!', 1000)\r\n}\r\n","export function insert(str, index, value) {\r\n    return str.substr(0, index) + value + str.substr(index);\r\n}\r\n\r\nexport function setCharAt(str, index, chr) {\r\n    if (index > str.length - 1) return str;\r\n    return str.substring(0, index) + chr + str.substring(index + 1);\r\n}"],"names":["ruleEngine","makeDecision","rules","_ref","value","params","i","length","returnValue","MarkAsRead","React","retryTenTimes","Translate","Audio","_ref$data","data","searchText","start","end","philosopherFullName","philosopherFullName_i10n","markedMode","currentQuote","currentPhilosopher","markedQuotes","setMarkedQuotes","currentData","setCurrentData","index","scrollPosition","setScrollPosition","listRef","darkMode","rowsRendered","scheduledPosts","setScheduledQuotes","setRowsRendered","voiceSpeed","style","prevCurrentPhilosopher","usePrevious","_useSnackbar","useSnackbar","openSnackbar","_slicedToArray","quotationText","quote","quotationId","id","propsToSend","_useState","useState","_useState2","localTranslateKey","setLocalTranslateKey","debouncedHandler","useCallback","func","delay","timer","context","this","args","arguments","clearTimeout","setTimeout","apply","debounce","parseInt","isUndefined","_jsxs","role","onMouseMove","onTouchStart","children","_jsx","className","onClick","rowClickHandler","bind","_objectSpread","concat","inputText","styles","Link","to","ROUTES","image","route","state","signature","textDecoration","color","Suspense","fallback","share","_Fragment","NoRowsRenderer","NoSearchResults","_ref2","_ref3","_ref4","_ref5","width","height","options","getPhilosopherFullName","getPhilosopherFullName_i10n","useEffect","scrollToQuoteId","current","List","rowCount","rowHeight","ref","rowRenderer","others","_objectWithoutProperties","_excluded","Row","onRowsRendered","noRowsRenderer","padding","quoteText","toLowerCase","trim","splittingIndex","lastIndexOf","updatedQuoteText","chr","str","substring","substr","insert","copy","copyQuoteText","useRef"],"sourceRoot":""}